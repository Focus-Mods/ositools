// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LuaDebug.proto

#ifndef PROTOBUF_INCLUDED_LuaDebug_2eproto
#define PROTOBUF_INCLUDED_LuaDebug_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_LuaDebug_2eproto 

namespace protobuf_LuaDebug_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[28];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_LuaDebug_2eproto
namespace dse {
namespace lua {
namespace dbg {
class BackendToDebugger;
class BackendToDebuggerDefaultTypeInternal;
extern BackendToDebuggerDefaultTypeInternal _BackendToDebugger_default_instance_;
class BkBreakpointTriggered;
class BkBreakpointTriggeredDefaultTypeInternal;
extern BkBreakpointTriggeredDefaultTypeInternal _BkBreakpointTriggered_default_instance_;
class BkConnectResponse;
class BkConnectResponseDefaultTypeInternal;
extern BkConnectResponseDefaultTypeInternal _BkConnectResponse_default_instance_;
class BkContextUpdated;
class BkContextUpdatedDefaultTypeInternal;
extern BkContextUpdatedDefaultTypeInternal _BkContextUpdated_default_instance_;
class BkDebugOutput;
class BkDebugOutputDefaultTypeInternal;
extern BkDebugOutputDefaultTypeInternal _BkDebugOutput_default_instance_;
class BkDebuggerReady;
class BkDebuggerReadyDefaultTypeInternal;
extern BkDebuggerReadyDefaultTypeInternal _BkDebuggerReady_default_instance_;
class BkEvaluateResponse;
class BkEvaluateResponseDefaultTypeInternal;
extern BkEvaluateResponseDefaultTypeInternal _BkEvaluateResponse_default_instance_;
class BkGetVariablesResponse;
class BkGetVariablesResponseDefaultTypeInternal;
extern BkGetVariablesResponseDefaultTypeInternal _BkGetVariablesResponse_default_instance_;
class BkModInfoResponse;
class BkModInfoResponseDefaultTypeInternal;
extern BkModInfoResponseDefaultTypeInternal _BkModInfoResponse_default_instance_;
class BkResult;
class BkResultDefaultTypeInternal;
extern BkResultDefaultTypeInternal _BkResult_default_instance_;
class BkSourceResponse;
class BkSourceResponseDefaultTypeInternal;
extern BkSourceResponseDefaultTypeInternal _BkSourceResponse_default_instance_;
class DbgConnectRequest;
class DbgConnectRequestDefaultTypeInternal;
extern DbgConnectRequestDefaultTypeInternal _DbgConnectRequest_default_instance_;
class DbgContinue;
class DbgContinueDefaultTypeInternal;
extern DbgContinueDefaultTypeInternal _DbgContinue_default_instance_;
class DbgEvaluate;
class DbgEvaluateDefaultTypeInternal;
extern DbgEvaluateDefaultTypeInternal _DbgEvaluate_default_instance_;
class DbgFetchMods;
class DbgFetchModsDefaultTypeInternal;
extern DbgFetchModsDefaultTypeInternal _DbgFetchMods_default_instance_;
class DbgGetVariables;
class DbgGetVariablesDefaultTypeInternal;
extern DbgGetVariablesDefaultTypeInternal _DbgGetVariables_default_instance_;
class DbgRequestSource;
class DbgRequestSourceDefaultTypeInternal;
extern DbgRequestSourceDefaultTypeInternal _DbgRequestSource_default_instance_;
class DbgSetBreakpoints;
class DbgSetBreakpointsDefaultTypeInternal;
extern DbgSetBreakpointsDefaultTypeInternal _DbgSetBreakpoints_default_instance_;
class DbgUpdateSettings;
class DbgUpdateSettingsDefaultTypeInternal;
extern DbgUpdateSettingsDefaultTypeInternal _DbgUpdateSettings_default_instance_;
class DebuggerToBackend;
class DebuggerToBackendDefaultTypeInternal;
extern DebuggerToBackendDefaultTypeInternal _DebuggerToBackend_default_instance_;
class MsgBreakpoint;
class MsgBreakpointDefaultTypeInternal;
extern MsgBreakpointDefaultTypeInternal _MsgBreakpoint_default_instance_;
class MsgChildValue;
class MsgChildValueDefaultTypeInternal;
extern MsgChildValueDefaultTypeInternal _MsgChildValue_default_instance_;
class MsgModuleInfo;
class MsgModuleInfoDefaultTypeInternal;
extern MsgModuleInfoDefaultTypeInternal _MsgModuleInfo_default_instance_;
class MsgSourceFileInfo;
class MsgSourceFileInfoDefaultTypeInternal;
extern MsgSourceFileInfoDefaultTypeInternal _MsgSourceFileInfo_default_instance_;
class MsgStackFrame;
class MsgStackFrameDefaultTypeInternal;
extern MsgStackFrameDefaultTypeInternal _MsgStackFrame_default_instance_;
class MsgTableKey;
class MsgTableKeyDefaultTypeInternal;
extern MsgTableKeyDefaultTypeInternal _MsgTableKey_default_instance_;
class MsgValue;
class MsgValueDefaultTypeInternal;
extern MsgValueDefaultTypeInternal _MsgValue_default_instance_;
class MsgVariablesRef;
class MsgVariablesRefDefaultTypeInternal;
extern MsgVariablesRefDefaultTypeInternal _MsgVariablesRef_default_instance_;
}  // namespace dbg
}  // namespace lua
}  // namespace dse
namespace google {
namespace protobuf {
template<> ::dse::lua::dbg::BackendToDebugger* Arena::CreateMaybeMessage<::dse::lua::dbg::BackendToDebugger>(Arena*);
template<> ::dse::lua::dbg::BkBreakpointTriggered* Arena::CreateMaybeMessage<::dse::lua::dbg::BkBreakpointTriggered>(Arena*);
template<> ::dse::lua::dbg::BkConnectResponse* Arena::CreateMaybeMessage<::dse::lua::dbg::BkConnectResponse>(Arena*);
template<> ::dse::lua::dbg::BkContextUpdated* Arena::CreateMaybeMessage<::dse::lua::dbg::BkContextUpdated>(Arena*);
template<> ::dse::lua::dbg::BkDebugOutput* Arena::CreateMaybeMessage<::dse::lua::dbg::BkDebugOutput>(Arena*);
template<> ::dse::lua::dbg::BkDebuggerReady* Arena::CreateMaybeMessage<::dse::lua::dbg::BkDebuggerReady>(Arena*);
template<> ::dse::lua::dbg::BkEvaluateResponse* Arena::CreateMaybeMessage<::dse::lua::dbg::BkEvaluateResponse>(Arena*);
template<> ::dse::lua::dbg::BkGetVariablesResponse* Arena::CreateMaybeMessage<::dse::lua::dbg::BkGetVariablesResponse>(Arena*);
template<> ::dse::lua::dbg::BkModInfoResponse* Arena::CreateMaybeMessage<::dse::lua::dbg::BkModInfoResponse>(Arena*);
template<> ::dse::lua::dbg::BkResult* Arena::CreateMaybeMessage<::dse::lua::dbg::BkResult>(Arena*);
template<> ::dse::lua::dbg::BkSourceResponse* Arena::CreateMaybeMessage<::dse::lua::dbg::BkSourceResponse>(Arena*);
template<> ::dse::lua::dbg::DbgConnectRequest* Arena::CreateMaybeMessage<::dse::lua::dbg::DbgConnectRequest>(Arena*);
template<> ::dse::lua::dbg::DbgContinue* Arena::CreateMaybeMessage<::dse::lua::dbg::DbgContinue>(Arena*);
template<> ::dse::lua::dbg::DbgEvaluate* Arena::CreateMaybeMessage<::dse::lua::dbg::DbgEvaluate>(Arena*);
template<> ::dse::lua::dbg::DbgFetchMods* Arena::CreateMaybeMessage<::dse::lua::dbg::DbgFetchMods>(Arena*);
template<> ::dse::lua::dbg::DbgGetVariables* Arena::CreateMaybeMessage<::dse::lua::dbg::DbgGetVariables>(Arena*);
template<> ::dse::lua::dbg::DbgRequestSource* Arena::CreateMaybeMessage<::dse::lua::dbg::DbgRequestSource>(Arena*);
template<> ::dse::lua::dbg::DbgSetBreakpoints* Arena::CreateMaybeMessage<::dse::lua::dbg::DbgSetBreakpoints>(Arena*);
template<> ::dse::lua::dbg::DbgUpdateSettings* Arena::CreateMaybeMessage<::dse::lua::dbg::DbgUpdateSettings>(Arena*);
template<> ::dse::lua::dbg::DebuggerToBackend* Arena::CreateMaybeMessage<::dse::lua::dbg::DebuggerToBackend>(Arena*);
template<> ::dse::lua::dbg::MsgBreakpoint* Arena::CreateMaybeMessage<::dse::lua::dbg::MsgBreakpoint>(Arena*);
template<> ::dse::lua::dbg::MsgChildValue* Arena::CreateMaybeMessage<::dse::lua::dbg::MsgChildValue>(Arena*);
template<> ::dse::lua::dbg::MsgModuleInfo* Arena::CreateMaybeMessage<::dse::lua::dbg::MsgModuleInfo>(Arena*);
template<> ::dse::lua::dbg::MsgSourceFileInfo* Arena::CreateMaybeMessage<::dse::lua::dbg::MsgSourceFileInfo>(Arena*);
template<> ::dse::lua::dbg::MsgStackFrame* Arena::CreateMaybeMessage<::dse::lua::dbg::MsgStackFrame>(Arena*);
template<> ::dse::lua::dbg::MsgTableKey* Arena::CreateMaybeMessage<::dse::lua::dbg::MsgTableKey>(Arena*);
template<> ::dse::lua::dbg::MsgValue* Arena::CreateMaybeMessage<::dse::lua::dbg::MsgValue>(Arena*);
template<> ::dse::lua::dbg::MsgVariablesRef* Arena::CreateMaybeMessage<::dse::lua::dbg::MsgVariablesRef>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dse {
namespace lua {
namespace dbg {

enum MsgTableKey_Type {
  MsgTableKey_Type_NUMERIC = 0,
  MsgTableKey_Type_TEXT = 1,
  MsgTableKey_Type_MsgTableKey_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgTableKey_Type_MsgTableKey_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgTableKey_Type_IsValid(int value);
const MsgTableKey_Type MsgTableKey_Type_Type_MIN = MsgTableKey_Type_NUMERIC;
const MsgTableKey_Type MsgTableKey_Type_Type_MAX = MsgTableKey_Type_TEXT;
const int MsgTableKey_Type_Type_ARRAYSIZE = MsgTableKey_Type_Type_MAX + 1;

enum MsgChildValue_Type {
  MsgChildValue_Type_NUMERIC = 0,
  MsgChildValue_Type_TEXT = 1,
  MsgChildValue_Type_MsgChildValue_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgChildValue_Type_MsgChildValue_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgChildValue_Type_IsValid(int value);
const MsgChildValue_Type MsgChildValue_Type_Type_MIN = MsgChildValue_Type_NUMERIC;
const MsgChildValue_Type MsgChildValue_Type_Type_MAX = MsgChildValue_Type_TEXT;
const int MsgChildValue_Type_Type_ARRAYSIZE = MsgChildValue_Type_Type_MAX + 1;

enum BkBreakpointTriggered_Reason {
  BkBreakpointTriggered_Reason_BREAKPOINT = 0,
  BkBreakpointTriggered_Reason_EXCEPTION = 1,
  BkBreakpointTriggered_Reason_PAUSE = 2,
  BkBreakpointTriggered_Reason_STEP = 3,
  BkBreakpointTriggered_Reason_BkBreakpointTriggered_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BkBreakpointTriggered_Reason_BkBreakpointTriggered_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BkBreakpointTriggered_Reason_IsValid(int value);
const BkBreakpointTriggered_Reason BkBreakpointTriggered_Reason_Reason_MIN = BkBreakpointTriggered_Reason_BREAKPOINT;
const BkBreakpointTriggered_Reason BkBreakpointTriggered_Reason_Reason_MAX = BkBreakpointTriggered_Reason_STEP;
const int BkBreakpointTriggered_Reason_Reason_ARRAYSIZE = BkBreakpointTriggered_Reason_Reason_MAX + 1;

enum DbgContinue_Action {
  DbgContinue_Action_CONTINUE = 0,
  DbgContinue_Action_STEP_OVER = 1,
  DbgContinue_Action_STEP_INTO = 2,
  DbgContinue_Action_STEP_OUT = 3,
  DbgContinue_Action_PAUSE = 4,
  DbgContinue_Action_DbgContinue_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DbgContinue_Action_DbgContinue_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DbgContinue_Action_IsValid(int value);
const DbgContinue_Action DbgContinue_Action_Action_MIN = DbgContinue_Action_CONTINUE;
const DbgContinue_Action DbgContinue_Action_Action_MAX = DbgContinue_Action_PAUSE;
const int DbgContinue_Action_Action_ARRAYSIZE = DbgContinue_Action_Action_MAX + 1;

enum BkContextUpdated_Status {
  BkContextUpdated_Status_UNLOADED = 0,
  BkContextUpdated_Status_LOADED = 1,
  BkContextUpdated_Status_BkContextUpdated_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BkContextUpdated_Status_BkContextUpdated_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BkContextUpdated_Status_IsValid(int value);
const BkContextUpdated_Status BkContextUpdated_Status_Status_MIN = BkContextUpdated_Status_UNLOADED;
const BkContextUpdated_Status BkContextUpdated_Status_Status_MAX = BkContextUpdated_Status_LOADED;
const int BkContextUpdated_Status_Status_ARRAYSIZE = BkContextUpdated_Status_Status_MAX + 1;

enum BkDebugOutput_Severity {
  BkDebugOutput_Severity_LEVEL_INFO = 0,
  BkDebugOutput_Severity_LEVEL_WARNING = 1,
  BkDebugOutput_Severity_LEVEL_ERROR = 2,
  BkDebugOutput_Severity_LEVEL_DEBUG = 3,
  BkDebugOutput_Severity_BkDebugOutput_Severity_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BkDebugOutput_Severity_BkDebugOutput_Severity_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BkDebugOutput_Severity_IsValid(int value);
const BkDebugOutput_Severity BkDebugOutput_Severity_Severity_MIN = BkDebugOutput_Severity_LEVEL_INFO;
const BkDebugOutput_Severity BkDebugOutput_Severity_Severity_MAX = BkDebugOutput_Severity_LEVEL_DEBUG;
const int BkDebugOutput_Severity_Severity_ARRAYSIZE = BkDebugOutput_Severity_Severity_MAX + 1;

enum StatusCode {
  SUCCESS = 0,
  NOT_IN_PAUSE = 1,
  NO_DEBUGGEE = 2,
  INVALID_CONTINUE_ACTION = 3,
  IN_PAUSE = 4,
  EVAL_ENGINE_NOT_READY = 5,
  EVAL_FAILED = 6,
  NO_SUCH_FILE = 7,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = SUCCESS;
const StatusCode StatusCode_MAX = NO_SUCH_FILE;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

enum DbgContext {
  SERVER = 0,
  CLIENT = 1,
  DbgContext_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DbgContext_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DbgContext_IsValid(int value);
const DbgContext DbgContext_MIN = SERVER;
const DbgContext DbgContext_MAX = CLIENT;
const int DbgContext_ARRAYSIZE = DbgContext_MAX + 1;

enum MsgValueType {
  NIL = 0,
  BOOLEAN = 1,
  INTEGER = 2,
  FLOAT = 3,
  STRING = 4,
  TABLE = 5,
  FUNCTION = 6,
  USERDATA = 7,
  THREAD = 8,
  UNKNOWN = 9,
  COMPONENT_HANDLE = 10,
  NONE = 11,
  MsgValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgValueType_IsValid(int value);
const MsgValueType MsgValueType_MIN = NIL;
const MsgValueType MsgValueType_MAX = NONE;
const int MsgValueType_ARRAYSIZE = MsgValueType_MAX + 1;

// ===================================================================

class MsgTableKey : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.MsgTableKey) */ {
 public:
  MsgTableKey();
  virtual ~MsgTableKey();

  MsgTableKey(const MsgTableKey& from);

  inline MsgTableKey& operator=(const MsgTableKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgTableKey(MsgTableKey&& from) noexcept
    : MsgTableKey() {
    *this = ::std::move(from);
  }

  inline MsgTableKey& operator=(MsgTableKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgTableKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgTableKey* internal_default_instance() {
    return reinterpret_cast<const MsgTableKey*>(
               &_MsgTableKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(MsgTableKey* other);
  void Swap(MsgTableKey* other);
  friend void swap(MsgTableKey& a, MsgTableKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgTableKey* New() const final {
    return CreateMaybeMessage<MsgTableKey>(NULL);
  }

  MsgTableKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgTableKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgTableKey& from);
  void MergeFrom(const MsgTableKey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgTableKey* other);
  protected:
  explicit MsgTableKey(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MsgTableKey_Type Type;
  static const Type NUMERIC =
    MsgTableKey_Type_NUMERIC;
  static const Type TEXT =
    MsgTableKey_Type_TEXT;
  static inline bool Type_IsValid(int value) {
    return MsgTableKey_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MsgTableKey_Type_Type_MIN;
  static const Type Type_MAX =
    MsgTableKey_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MsgTableKey_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // string key = 3;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_key();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      ::std::string* key);

  // int64 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // .dse.lua.dbg.MsgTableKey.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::dse::lua::dbg::MsgTableKey_Type type() const;
  void set_type(::dse::lua::dbg::MsgTableKey_Type value);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.MsgTableKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::int64 index_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgVariablesRef : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.MsgVariablesRef) */ {
 public:
  MsgVariablesRef();
  virtual ~MsgVariablesRef();

  MsgVariablesRef(const MsgVariablesRef& from);

  inline MsgVariablesRef& operator=(const MsgVariablesRef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgVariablesRef(MsgVariablesRef&& from) noexcept
    : MsgVariablesRef() {
    *this = ::std::move(from);
  }

  inline MsgVariablesRef& operator=(MsgVariablesRef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgVariablesRef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgVariablesRef* internal_default_instance() {
    return reinterpret_cast<const MsgVariablesRef*>(
               &_MsgVariablesRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(MsgVariablesRef* other);
  void Swap(MsgVariablesRef* other);
  friend void swap(MsgVariablesRef& a, MsgVariablesRef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgVariablesRef* New() const final {
    return CreateMaybeMessage<MsgVariablesRef>(NULL);
  }

  MsgVariablesRef* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgVariablesRef>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgVariablesRef& from);
  void MergeFrom(const MsgVariablesRef& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgVariablesRef* other);
  protected:
  explicit MsgVariablesRef(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dse.lua.dbg.MsgTableKey key = 4;
  int key_size() const;
  void clear_key();
  static const int kKeyFieldNumber = 4;
  ::dse::lua::dbg::MsgTableKey* mutable_key(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgTableKey >*
      mutable_key();
  const ::dse::lua::dbg::MsgTableKey& key(int index) const;
  ::dse::lua::dbg::MsgTableKey* add_key();
  const ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgTableKey >&
      key() const;

  // int32 variableRef = 1;
  void clear_variableref();
  static const int kVariableRefFieldNumber = 1;
  ::google::protobuf::int32 variableref() const;
  void set_variableref(::google::protobuf::int32 value);

  // int32 frame = 2;
  void clear_frame();
  static const int kFrameFieldNumber = 2;
  ::google::protobuf::int32 frame() const;
  void set_frame(::google::protobuf::int32 value);

  // int32 local = 3;
  void clear_local();
  static const int kLocalFieldNumber = 3;
  ::google::protobuf::int32 local() const;
  void set_local(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.MsgVariablesRef)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgTableKey > key_;
  ::google::protobuf::int32 variableref_;
  ::google::protobuf::int32 frame_;
  ::google::protobuf::int32 local_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgValue : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.MsgValue) */ {
 public:
  MsgValue();
  virtual ~MsgValue();

  MsgValue(const MsgValue& from);

  inline MsgValue& operator=(const MsgValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgValue(MsgValue&& from) noexcept
    : MsgValue() {
    *this = ::std::move(from);
  }

  inline MsgValue& operator=(MsgValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgValue& default_instance();

  enum ValueCase {
    kBoolval = 2,
    kIntval = 3,
    kFloatval = 4,
    kStringval = 5,
    kVariables = 6,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgValue* internal_default_instance() {
    return reinterpret_cast<const MsgValue*>(
               &_MsgValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(MsgValue* other);
  void Swap(MsgValue* other);
  friend void swap(MsgValue& a, MsgValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgValue* New() const final {
    return CreateMaybeMessage<MsgValue>(NULL);
  }

  MsgValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgValue& from);
  void MergeFrom(const MsgValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgValue* other);
  protected:
  explicit MsgValue(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dse.lua.dbg.MsgValueType type_id = 1;
  void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  ::dse::lua::dbg::MsgValueType type_id() const;
  void set_type_id(::dse::lua::dbg::MsgValueType value);

  // bool boolval = 2;
  private:
  bool has_boolval() const;
  public:
  void clear_boolval();
  static const int kBoolvalFieldNumber = 2;
  bool boolval() const;
  void set_boolval(bool value);

  // int64 intval = 3;
  private:
  bool has_intval() const;
  public:
  void clear_intval();
  static const int kIntvalFieldNumber = 3;
  ::google::protobuf::int64 intval() const;
  void set_intval(::google::protobuf::int64 value);

  // float floatval = 4;
  private:
  bool has_floatval() const;
  public:
  void clear_floatval();
  static const int kFloatvalFieldNumber = 4;
  float floatval() const;
  void set_floatval(float value);

  // string stringval = 5;
  private:
  bool has_stringval() const;
  public:
  void clear_stringval();
  static const int kStringvalFieldNumber = 5;
  const ::std::string& stringval() const;
  void set_stringval(const ::std::string& value);
  #if LANG_CXX11
  void set_stringval(::std::string&& value);
  #endif
  void set_stringval(const char* value);
  void set_stringval(const char* value, size_t size);
  ::std::string* mutable_stringval();
  ::std::string* release_stringval();
  void set_allocated_stringval(::std::string* stringval);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_stringval();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stringval(
      ::std::string* stringval);

  // .dse.lua.dbg.MsgVariablesRef variables = 6;
  bool has_variables() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 6;
  private:
  const ::dse::lua::dbg::MsgVariablesRef& _internal_variables() const;
  public:
  const ::dse::lua::dbg::MsgVariablesRef& variables() const;
  ::dse::lua::dbg::MsgVariablesRef* release_variables();
  ::dse::lua::dbg::MsgVariablesRef* mutable_variables();
  void set_allocated_variables(::dse::lua::dbg::MsgVariablesRef* variables);
  void unsafe_arena_set_allocated_variables(
      ::dse::lua::dbg::MsgVariablesRef* variables);
  ::dse::lua::dbg::MsgVariablesRef* unsafe_arena_release_variables();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:dse.lua.dbg.MsgValue)
 private:
  void set_has_boolval();
  void set_has_intval();
  void set_has_floatval();
  void set_has_stringval();
  void set_has_variables();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_id_;
  union ValueUnion {
    ValueUnion() {}
    bool boolval_;
    ::google::protobuf::int64 intval_;
    float floatval_;
    ::google::protobuf::internal::ArenaStringPtr stringval_;
    ::dse::lua::dbg::MsgVariablesRef* variables_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgChildValue : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.MsgChildValue) */ {
 public:
  MsgChildValue();
  virtual ~MsgChildValue();

  MsgChildValue(const MsgChildValue& from);

  inline MsgChildValue& operator=(const MsgChildValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgChildValue(MsgChildValue&& from) noexcept
    : MsgChildValue() {
    *this = ::std::move(from);
  }

  inline MsgChildValue& operator=(MsgChildValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgChildValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgChildValue* internal_default_instance() {
    return reinterpret_cast<const MsgChildValue*>(
               &_MsgChildValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(MsgChildValue* other);
  void Swap(MsgChildValue* other);
  friend void swap(MsgChildValue& a, MsgChildValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgChildValue* New() const final {
    return CreateMaybeMessage<MsgChildValue>(NULL);
  }

  MsgChildValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgChildValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgChildValue& from);
  void MergeFrom(const MsgChildValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgChildValue* other);
  protected:
  explicit MsgChildValue(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MsgChildValue_Type Type;
  static const Type NUMERIC =
    MsgChildValue_Type_NUMERIC;
  static const Type TEXT =
    MsgChildValue_Type_TEXT;
  static inline bool Type_IsValid(int value) {
    return MsgChildValue_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MsgChildValue_Type_Type_MIN;
  static const Type Type_MAX =
    MsgChildValue_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MsgChildValue_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .dse.lua.dbg.MsgValue value = 4;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  private:
  const ::dse::lua::dbg::MsgValue& _internal_value() const;
  public:
  const ::dse::lua::dbg::MsgValue& value() const;
  ::dse::lua::dbg::MsgValue* release_value();
  ::dse::lua::dbg::MsgValue* mutable_value();
  void set_allocated_value(::dse::lua::dbg::MsgValue* value);
  void unsafe_arena_set_allocated_value(
      ::dse::lua::dbg::MsgValue* value);
  ::dse::lua::dbg::MsgValue* unsafe_arena_release_value();

  // int64 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // .dse.lua.dbg.MsgChildValue.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::dse::lua::dbg::MsgChildValue_Type type() const;
  void set_type(::dse::lua::dbg::MsgChildValue_Type value);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.MsgChildValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::dse::lua::dbg::MsgValue* value_;
  ::google::protobuf::int64 index_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgStackFrame : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.MsgStackFrame) */ {
 public:
  MsgStackFrame();
  virtual ~MsgStackFrame();

  MsgStackFrame(const MsgStackFrame& from);

  inline MsgStackFrame& operator=(const MsgStackFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgStackFrame(MsgStackFrame&& from) noexcept
    : MsgStackFrame() {
    *this = ::std::move(from);
  }

  inline MsgStackFrame& operator=(MsgStackFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgStackFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgStackFrame* internal_default_instance() {
    return reinterpret_cast<const MsgStackFrame*>(
               &_MsgStackFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(MsgStackFrame* other);
  void Swap(MsgStackFrame* other);
  friend void swap(MsgStackFrame& a, MsgStackFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgStackFrame* New() const final {
    return CreateMaybeMessage<MsgStackFrame>(NULL);
  }

  MsgStackFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgStackFrame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgStackFrame& from);
  void MergeFrom(const MsgStackFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgStackFrame* other);
  protected:
  explicit MsgStackFrame(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string source = 1;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_source();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      ::std::string* source);

  // string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_path();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      ::std::string* path);

  // string function = 3;
  void clear_function();
  static const int kFunctionFieldNumber = 3;
  const ::std::string& function() const;
  void set_function(const ::std::string& value);
  #if LANG_CXX11
  void set_function(::std::string&& value);
  #endif
  void set_function(const char* value);
  void set_function(const char* value, size_t size);
  ::std::string* mutable_function();
  ::std::string* release_function();
  void set_allocated_function(::std::string* function);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_function();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_function(
      ::std::string* function);

  // int32 line = 4;
  void clear_line();
  static const int kLineFieldNumber = 4;
  ::google::protobuf::int32 line() const;
  void set_line(::google::protobuf::int32 value);

  // int32 scope_first_line = 5;
  void clear_scope_first_line();
  static const int kScopeFirstLineFieldNumber = 5;
  ::google::protobuf::int32 scope_first_line() const;
  void set_scope_first_line(::google::protobuf::int32 value);

  // int32 scope_last_line = 6;
  void clear_scope_last_line();
  static const int kScopeLastLineFieldNumber = 6;
  ::google::protobuf::int32 scope_last_line() const;
  void set_scope_last_line(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.MsgStackFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr function_;
  ::google::protobuf::int32 line_;
  ::google::protobuf::int32 scope_first_line_;
  ::google::protobuf::int32 scope_last_line_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DbgConnectRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.DbgConnectRequest) */ {
 public:
  DbgConnectRequest();
  virtual ~DbgConnectRequest();

  DbgConnectRequest(const DbgConnectRequest& from);

  inline DbgConnectRequest& operator=(const DbgConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DbgConnectRequest(DbgConnectRequest&& from) noexcept
    : DbgConnectRequest() {
    *this = ::std::move(from);
  }

  inline DbgConnectRequest& operator=(DbgConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DbgConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbgConnectRequest* internal_default_instance() {
    return reinterpret_cast<const DbgConnectRequest*>(
               &_DbgConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(DbgConnectRequest* other);
  void Swap(DbgConnectRequest* other);
  friend void swap(DbgConnectRequest& a, DbgConnectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DbgConnectRequest* New() const final {
    return CreateMaybeMessage<DbgConnectRequest>(NULL);
  }

  DbgConnectRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DbgConnectRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DbgConnectRequest& from);
  void MergeFrom(const DbgConnectRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgConnectRequest* other);
  protected:
  explicit DbgConnectRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 protocol_version = 1;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  ::google::protobuf::uint32 protocol_version() const;
  void set_protocol_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.DbgConnectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 protocol_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkConnectResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.BkConnectResponse) */ {
 public:
  BkConnectResponse();
  virtual ~BkConnectResponse();

  BkConnectResponse(const BkConnectResponse& from);

  inline BkConnectResponse& operator=(const BkConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkConnectResponse(BkConnectResponse&& from) noexcept
    : BkConnectResponse() {
    *this = ::std::move(from);
  }

  inline BkConnectResponse& operator=(BkConnectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkConnectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkConnectResponse* internal_default_instance() {
    return reinterpret_cast<const BkConnectResponse*>(
               &_BkConnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(BkConnectResponse* other);
  void Swap(BkConnectResponse* other);
  friend void swap(BkConnectResponse& a, BkConnectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkConnectResponse* New() const final {
    return CreateMaybeMessage<BkConnectResponse>(NULL);
  }

  BkConnectResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkConnectResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkConnectResponse& from);
  void MergeFrom(const BkConnectResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkConnectResponse* other);
  protected:
  explicit BkConnectResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 protocol_version = 1;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  ::google::protobuf::uint32 protocol_version() const;
  void set_protocol_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.BkConnectResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 protocol_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DbgUpdateSettings : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.DbgUpdateSettings) */ {
 public:
  DbgUpdateSettings();
  virtual ~DbgUpdateSettings();

  DbgUpdateSettings(const DbgUpdateSettings& from);

  inline DbgUpdateSettings& operator=(const DbgUpdateSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DbgUpdateSettings(DbgUpdateSettings&& from) noexcept
    : DbgUpdateSettings() {
    *this = ::std::move(from);
  }

  inline DbgUpdateSettings& operator=(DbgUpdateSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DbgUpdateSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbgUpdateSettings* internal_default_instance() {
    return reinterpret_cast<const DbgUpdateSettings*>(
               &_DbgUpdateSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(DbgUpdateSettings* other);
  void Swap(DbgUpdateSettings* other);
  friend void swap(DbgUpdateSettings& a, DbgUpdateSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DbgUpdateSettings* New() const final {
    return CreateMaybeMessage<DbgUpdateSettings>(NULL);
  }

  DbgUpdateSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DbgUpdateSettings>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DbgUpdateSettings& from);
  void MergeFrom(const DbgUpdateSettings& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgUpdateSettings* other);
  protected:
  explicit DbgUpdateSettings(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool break_on_error = 1;
  void clear_break_on_error();
  static const int kBreakOnErrorFieldNumber = 1;
  bool break_on_error() const;
  void set_break_on_error(bool value);

  // bool break_on_generic_error = 2;
  void clear_break_on_generic_error();
  static const int kBreakOnGenericErrorFieldNumber = 2;
  bool break_on_generic_error() const;
  void set_break_on_generic_error(bool value);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.DbgUpdateSettings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool break_on_error_;
  bool break_on_generic_error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgBreakpoint : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.MsgBreakpoint) */ {
 public:
  MsgBreakpoint();
  virtual ~MsgBreakpoint();

  MsgBreakpoint(const MsgBreakpoint& from);

  inline MsgBreakpoint& operator=(const MsgBreakpoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgBreakpoint(MsgBreakpoint&& from) noexcept
    : MsgBreakpoint() {
    *this = ::std::move(from);
  }

  inline MsgBreakpoint& operator=(MsgBreakpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgBreakpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgBreakpoint* internal_default_instance() {
    return reinterpret_cast<const MsgBreakpoint*>(
               &_MsgBreakpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(MsgBreakpoint* other);
  void Swap(MsgBreakpoint* other);
  friend void swap(MsgBreakpoint& a, MsgBreakpoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgBreakpoint* New() const final {
    return CreateMaybeMessage<MsgBreakpoint>(NULL);
  }

  MsgBreakpoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgBreakpoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgBreakpoint& from);
  void MergeFrom(const MsgBreakpoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgBreakpoint* other);
  protected:
  explicit MsgBreakpoint(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_path();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      ::std::string* path);

  // int32 line = 2;
  void clear_line();
  static const int kLineFieldNumber = 2;
  ::google::protobuf::int32 line() const;
  void set_line(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.MsgBreakpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int32 line_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DbgSetBreakpoints : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.DbgSetBreakpoints) */ {
 public:
  DbgSetBreakpoints();
  virtual ~DbgSetBreakpoints();

  DbgSetBreakpoints(const DbgSetBreakpoints& from);

  inline DbgSetBreakpoints& operator=(const DbgSetBreakpoints& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DbgSetBreakpoints(DbgSetBreakpoints&& from) noexcept
    : DbgSetBreakpoints() {
    *this = ::std::move(from);
  }

  inline DbgSetBreakpoints& operator=(DbgSetBreakpoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DbgSetBreakpoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbgSetBreakpoints* internal_default_instance() {
    return reinterpret_cast<const DbgSetBreakpoints*>(
               &_DbgSetBreakpoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(DbgSetBreakpoints* other);
  void Swap(DbgSetBreakpoints* other);
  friend void swap(DbgSetBreakpoints& a, DbgSetBreakpoints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DbgSetBreakpoints* New() const final {
    return CreateMaybeMessage<DbgSetBreakpoints>(NULL);
  }

  DbgSetBreakpoints* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DbgSetBreakpoints>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DbgSetBreakpoints& from);
  void MergeFrom(const DbgSetBreakpoints& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgSetBreakpoints* other);
  protected:
  explicit DbgSetBreakpoints(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dse.lua.dbg.MsgBreakpoint breakpoint = 1;
  int breakpoint_size() const;
  void clear_breakpoint();
  static const int kBreakpointFieldNumber = 1;
  ::dse::lua::dbg::MsgBreakpoint* mutable_breakpoint(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgBreakpoint >*
      mutable_breakpoint();
  const ::dse::lua::dbg::MsgBreakpoint& breakpoint(int index) const;
  ::dse::lua::dbg::MsgBreakpoint* add_breakpoint();
  const ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgBreakpoint >&
      breakpoint() const;

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.DbgSetBreakpoints)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgBreakpoint > breakpoint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkBreakpointTriggered : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.BkBreakpointTriggered) */ {
 public:
  BkBreakpointTriggered();
  virtual ~BkBreakpointTriggered();

  BkBreakpointTriggered(const BkBreakpointTriggered& from);

  inline BkBreakpointTriggered& operator=(const BkBreakpointTriggered& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkBreakpointTriggered(BkBreakpointTriggered&& from) noexcept
    : BkBreakpointTriggered() {
    *this = ::std::move(from);
  }

  inline BkBreakpointTriggered& operator=(BkBreakpointTriggered&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkBreakpointTriggered& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkBreakpointTriggered* internal_default_instance() {
    return reinterpret_cast<const BkBreakpointTriggered*>(
               &_BkBreakpointTriggered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(BkBreakpointTriggered* other);
  void Swap(BkBreakpointTriggered* other);
  friend void swap(BkBreakpointTriggered& a, BkBreakpointTriggered& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkBreakpointTriggered* New() const final {
    return CreateMaybeMessage<BkBreakpointTriggered>(NULL);
  }

  BkBreakpointTriggered* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkBreakpointTriggered>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkBreakpointTriggered& from);
  void MergeFrom(const BkBreakpointTriggered& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkBreakpointTriggered* other);
  protected:
  explicit BkBreakpointTriggered(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BkBreakpointTriggered_Reason Reason;
  static const Reason BREAKPOINT =
    BkBreakpointTriggered_Reason_BREAKPOINT;
  static const Reason EXCEPTION =
    BkBreakpointTriggered_Reason_EXCEPTION;
  static const Reason PAUSE =
    BkBreakpointTriggered_Reason_PAUSE;
  static const Reason STEP =
    BkBreakpointTriggered_Reason_STEP;
  static inline bool Reason_IsValid(int value) {
    return BkBreakpointTriggered_Reason_IsValid(value);
  }
  static const Reason Reason_MIN =
    BkBreakpointTriggered_Reason_Reason_MIN;
  static const Reason Reason_MAX =
    BkBreakpointTriggered_Reason_Reason_MAX;
  static const int Reason_ARRAYSIZE =
    BkBreakpointTriggered_Reason_Reason_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .dse.lua.dbg.MsgStackFrame stack = 2;
  int stack_size() const;
  void clear_stack();
  static const int kStackFieldNumber = 2;
  ::dse::lua::dbg::MsgStackFrame* mutable_stack(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgStackFrame >*
      mutable_stack();
  const ::dse::lua::dbg::MsgStackFrame& stack(int index) const;
  ::dse::lua::dbg::MsgStackFrame* add_stack();
  const ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgStackFrame >&
      stack() const;

  // string message = 4;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_message();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      ::std::string* message);

  // .dse.lua.dbg.BkBreakpointTriggered.Reason reason = 1;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  ::dse::lua::dbg::BkBreakpointTriggered_Reason reason() const;
  void set_reason(::dse::lua::dbg::BkBreakpointTriggered_Reason value);

  // .dse.lua.dbg.DbgContext context = 3;
  void clear_context();
  static const int kContextFieldNumber = 3;
  ::dse::lua::dbg::DbgContext context() const;
  void set_context(::dse::lua::dbg::DbgContext value);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.BkBreakpointTriggered)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgStackFrame > stack_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int reason_;
  int context_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DbgContinue : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.DbgContinue) */ {
 public:
  DbgContinue();
  virtual ~DbgContinue();

  DbgContinue(const DbgContinue& from);

  inline DbgContinue& operator=(const DbgContinue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DbgContinue(DbgContinue&& from) noexcept
    : DbgContinue() {
    *this = ::std::move(from);
  }

  inline DbgContinue& operator=(DbgContinue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DbgContinue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbgContinue* internal_default_instance() {
    return reinterpret_cast<const DbgContinue*>(
               &_DbgContinue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(DbgContinue* other);
  void Swap(DbgContinue* other);
  friend void swap(DbgContinue& a, DbgContinue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DbgContinue* New() const final {
    return CreateMaybeMessage<DbgContinue>(NULL);
  }

  DbgContinue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DbgContinue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DbgContinue& from);
  void MergeFrom(const DbgContinue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgContinue* other);
  protected:
  explicit DbgContinue(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DbgContinue_Action Action;
  static const Action CONTINUE =
    DbgContinue_Action_CONTINUE;
  static const Action STEP_OVER =
    DbgContinue_Action_STEP_OVER;
  static const Action STEP_INTO =
    DbgContinue_Action_STEP_INTO;
  static const Action STEP_OUT =
    DbgContinue_Action_STEP_OUT;
  static const Action PAUSE =
    DbgContinue_Action_PAUSE;
  static inline bool Action_IsValid(int value) {
    return DbgContinue_Action_IsValid(value);
  }
  static const Action Action_MIN =
    DbgContinue_Action_Action_MIN;
  static const Action Action_MAX =
    DbgContinue_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    DbgContinue_Action_Action_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // .dse.lua.dbg.DbgContext context = 1;
  void clear_context();
  static const int kContextFieldNumber = 1;
  ::dse::lua::dbg::DbgContext context() const;
  void set_context(::dse::lua::dbg::DbgContext value);

  // .dse.lua.dbg.DbgContinue.Action action = 2;
  void clear_action();
  static const int kActionFieldNumber = 2;
  ::dse::lua::dbg::DbgContinue_Action action() const;
  void set_action(::dse::lua::dbg::DbgContinue_Action value);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.DbgContinue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int context_;
  int action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DbgEvaluate : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.DbgEvaluate) */ {
 public:
  DbgEvaluate();
  virtual ~DbgEvaluate();

  DbgEvaluate(const DbgEvaluate& from);

  inline DbgEvaluate& operator=(const DbgEvaluate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DbgEvaluate(DbgEvaluate&& from) noexcept
    : DbgEvaluate() {
    *this = ::std::move(from);
  }

  inline DbgEvaluate& operator=(DbgEvaluate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DbgEvaluate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbgEvaluate* internal_default_instance() {
    return reinterpret_cast<const DbgEvaluate*>(
               &_DbgEvaluate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(DbgEvaluate* other);
  void Swap(DbgEvaluate* other);
  friend void swap(DbgEvaluate& a, DbgEvaluate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DbgEvaluate* New() const final {
    return CreateMaybeMessage<DbgEvaluate>(NULL);
  }

  DbgEvaluate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DbgEvaluate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DbgEvaluate& from);
  void MergeFrom(const DbgEvaluate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgEvaluate* other);
  protected:
  explicit DbgEvaluate(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string expression = 2;
  void clear_expression();
  static const int kExpressionFieldNumber = 2;
  const ::std::string& expression() const;
  void set_expression(const ::std::string& value);
  #if LANG_CXX11
  void set_expression(::std::string&& value);
  #endif
  void set_expression(const char* value);
  void set_expression(const char* value, size_t size);
  ::std::string* mutable_expression();
  ::std::string* release_expression();
  void set_allocated_expression(::std::string* expression);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_expression();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_expression(
      ::std::string* expression);

  // .dse.lua.dbg.DbgContext context = 1;
  void clear_context();
  static const int kContextFieldNumber = 1;
  ::dse::lua::dbg::DbgContext context() const;
  void set_context(::dse::lua::dbg::DbgContext value);

  // int32 frame = 3;
  void clear_frame();
  static const int kFrameFieldNumber = 3;
  ::google::protobuf::int32 frame() const;
  void set_frame(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.DbgEvaluate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr expression_;
  int context_;
  ::google::protobuf::int32 frame_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DbgGetVariables : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.DbgGetVariables) */ {
 public:
  DbgGetVariables();
  virtual ~DbgGetVariables();

  DbgGetVariables(const DbgGetVariables& from);

  inline DbgGetVariables& operator=(const DbgGetVariables& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DbgGetVariables(DbgGetVariables&& from) noexcept
    : DbgGetVariables() {
    *this = ::std::move(from);
  }

  inline DbgGetVariables& operator=(DbgGetVariables&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DbgGetVariables& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbgGetVariables* internal_default_instance() {
    return reinterpret_cast<const DbgGetVariables*>(
               &_DbgGetVariables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(DbgGetVariables* other);
  void Swap(DbgGetVariables* other);
  friend void swap(DbgGetVariables& a, DbgGetVariables& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DbgGetVariables* New() const final {
    return CreateMaybeMessage<DbgGetVariables>(NULL);
  }

  DbgGetVariables* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DbgGetVariables>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DbgGetVariables& from);
  void MergeFrom(const DbgGetVariables& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgGetVariables* other);
  protected:
  explicit DbgGetVariables(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dse.lua.dbg.MsgTableKey key = 5;
  int key_size() const;
  void clear_key();
  static const int kKeyFieldNumber = 5;
  ::dse::lua::dbg::MsgTableKey* mutable_key(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgTableKey >*
      mutable_key();
  const ::dse::lua::dbg::MsgTableKey& key(int index) const;
  ::dse::lua::dbg::MsgTableKey* add_key();
  const ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgTableKey >&
      key() const;

  // .dse.lua.dbg.DbgContext context = 1;
  void clear_context();
  static const int kContextFieldNumber = 1;
  ::dse::lua::dbg::DbgContext context() const;
  void set_context(::dse::lua::dbg::DbgContext value);

  // int32 variableRef = 2;
  void clear_variableref();
  static const int kVariableRefFieldNumber = 2;
  ::google::protobuf::int32 variableref() const;
  void set_variableref(::google::protobuf::int32 value);

  // int32 frame = 3;
  void clear_frame();
  static const int kFrameFieldNumber = 3;
  ::google::protobuf::int32 frame() const;
  void set_frame(::google::protobuf::int32 value);

  // int32 local = 4;
  void clear_local();
  static const int kLocalFieldNumber = 4;
  ::google::protobuf::int32 local() const;
  void set_local(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.DbgGetVariables)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgTableKey > key_;
  int context_;
  ::google::protobuf::int32 variableref_;
  ::google::protobuf::int32 frame_;
  ::google::protobuf::int32 local_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkEvaluateResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.BkEvaluateResponse) */ {
 public:
  BkEvaluateResponse();
  virtual ~BkEvaluateResponse();

  BkEvaluateResponse(const BkEvaluateResponse& from);

  inline BkEvaluateResponse& operator=(const BkEvaluateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkEvaluateResponse(BkEvaluateResponse&& from) noexcept
    : BkEvaluateResponse() {
    *this = ::std::move(from);
  }

  inline BkEvaluateResponse& operator=(BkEvaluateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkEvaluateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkEvaluateResponse* internal_default_instance() {
    return reinterpret_cast<const BkEvaluateResponse*>(
               &_BkEvaluateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void UnsafeArenaSwap(BkEvaluateResponse* other);
  void Swap(BkEvaluateResponse* other);
  friend void swap(BkEvaluateResponse& a, BkEvaluateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkEvaluateResponse* New() const final {
    return CreateMaybeMessage<BkEvaluateResponse>(NULL);
  }

  BkEvaluateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkEvaluateResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkEvaluateResponse& from);
  void MergeFrom(const BkEvaluateResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkEvaluateResponse* other);
  protected:
  explicit BkEvaluateResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 2;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_error_message();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error_message(
      ::std::string* error_message);

  // .dse.lua.dbg.MsgValue result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  private:
  const ::dse::lua::dbg::MsgValue& _internal_result() const;
  public:
  const ::dse::lua::dbg::MsgValue& result() const;
  ::dse::lua::dbg::MsgValue* release_result();
  ::dse::lua::dbg::MsgValue* mutable_result();
  void set_allocated_result(::dse::lua::dbg::MsgValue* result);
  void unsafe_arena_set_allocated_result(
      ::dse::lua::dbg::MsgValue* result);
  ::dse::lua::dbg::MsgValue* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.BkEvaluateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::dse::lua::dbg::MsgValue* result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkGetVariablesResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.BkGetVariablesResponse) */ {
 public:
  BkGetVariablesResponse();
  virtual ~BkGetVariablesResponse();

  BkGetVariablesResponse(const BkGetVariablesResponse& from);

  inline BkGetVariablesResponse& operator=(const BkGetVariablesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkGetVariablesResponse(BkGetVariablesResponse&& from) noexcept
    : BkGetVariablesResponse() {
    *this = ::std::move(from);
  }

  inline BkGetVariablesResponse& operator=(BkGetVariablesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkGetVariablesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkGetVariablesResponse* internal_default_instance() {
    return reinterpret_cast<const BkGetVariablesResponse*>(
               &_BkGetVariablesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void UnsafeArenaSwap(BkGetVariablesResponse* other);
  void Swap(BkGetVariablesResponse* other);
  friend void swap(BkGetVariablesResponse& a, BkGetVariablesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkGetVariablesResponse* New() const final {
    return CreateMaybeMessage<BkGetVariablesResponse>(NULL);
  }

  BkGetVariablesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkGetVariablesResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkGetVariablesResponse& from);
  void MergeFrom(const BkGetVariablesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkGetVariablesResponse* other);
  protected:
  explicit BkGetVariablesResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dse.lua.dbg.MsgChildValue result = 1;
  int result_size() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::dse::lua::dbg::MsgChildValue* mutable_result(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgChildValue >*
      mutable_result();
  const ::dse::lua::dbg::MsgChildValue& result(int index) const;
  ::dse::lua::dbg::MsgChildValue* add_result();
  const ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgChildValue >&
      result() const;

  // string error_message = 2;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_error_message();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error_message(
      ::std::string* error_message);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.BkGetVariablesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgChildValue > result_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DbgFetchMods : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.DbgFetchMods) */ {
 public:
  DbgFetchMods();
  virtual ~DbgFetchMods();

  DbgFetchMods(const DbgFetchMods& from);

  inline DbgFetchMods& operator=(const DbgFetchMods& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DbgFetchMods(DbgFetchMods&& from) noexcept
    : DbgFetchMods() {
    *this = ::std::move(from);
  }

  inline DbgFetchMods& operator=(DbgFetchMods&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DbgFetchMods& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbgFetchMods* internal_default_instance() {
    return reinterpret_cast<const DbgFetchMods*>(
               &_DbgFetchMods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void UnsafeArenaSwap(DbgFetchMods* other);
  void Swap(DbgFetchMods* other);
  friend void swap(DbgFetchMods& a, DbgFetchMods& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DbgFetchMods* New() const final {
    return CreateMaybeMessage<DbgFetchMods>(NULL);
  }

  DbgFetchMods* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DbgFetchMods>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DbgFetchMods& from);
  void MergeFrom(const DbgFetchMods& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgFetchMods* other);
  protected:
  explicit DbgFetchMods(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.DbgFetchMods)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkContextUpdated : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.BkContextUpdated) */ {
 public:
  BkContextUpdated();
  virtual ~BkContextUpdated();

  BkContextUpdated(const BkContextUpdated& from);

  inline BkContextUpdated& operator=(const BkContextUpdated& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkContextUpdated(BkContextUpdated&& from) noexcept
    : BkContextUpdated() {
    *this = ::std::move(from);
  }

  inline BkContextUpdated& operator=(BkContextUpdated&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkContextUpdated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkContextUpdated* internal_default_instance() {
    return reinterpret_cast<const BkContextUpdated*>(
               &_BkContextUpdated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void UnsafeArenaSwap(BkContextUpdated* other);
  void Swap(BkContextUpdated* other);
  friend void swap(BkContextUpdated& a, BkContextUpdated& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkContextUpdated* New() const final {
    return CreateMaybeMessage<BkContextUpdated>(NULL);
  }

  BkContextUpdated* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkContextUpdated>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkContextUpdated& from);
  void MergeFrom(const BkContextUpdated& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkContextUpdated* other);
  protected:
  explicit BkContextUpdated(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BkContextUpdated_Status Status;
  static const Status UNLOADED =
    BkContextUpdated_Status_UNLOADED;
  static const Status LOADED =
    BkContextUpdated_Status_LOADED;
  static inline bool Status_IsValid(int value) {
    return BkContextUpdated_Status_IsValid(value);
  }
  static const Status Status_MIN =
    BkContextUpdated_Status_Status_MIN;
  static const Status Status_MAX =
    BkContextUpdated_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    BkContextUpdated_Status_Status_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // .dse.lua.dbg.DbgContext context = 1;
  void clear_context();
  static const int kContextFieldNumber = 1;
  ::dse::lua::dbg::DbgContext context() const;
  void set_context(::dse::lua::dbg::DbgContext value);

  // .dse.lua.dbg.BkContextUpdated.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::dse::lua::dbg::BkContextUpdated_Status status() const;
  void set_status(::dse::lua::dbg::BkContextUpdated_Status value);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.BkContextUpdated)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int context_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgModuleInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.MsgModuleInfo) */ {
 public:
  MsgModuleInfo();
  virtual ~MsgModuleInfo();

  MsgModuleInfo(const MsgModuleInfo& from);

  inline MsgModuleInfo& operator=(const MsgModuleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgModuleInfo(MsgModuleInfo&& from) noexcept
    : MsgModuleInfo() {
    *this = ::std::move(from);
  }

  inline MsgModuleInfo& operator=(MsgModuleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgModuleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgModuleInfo* internal_default_instance() {
    return reinterpret_cast<const MsgModuleInfo*>(
               &_MsgModuleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void UnsafeArenaSwap(MsgModuleInfo* other);
  void Swap(MsgModuleInfo* other);
  friend void swap(MsgModuleInfo& a, MsgModuleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgModuleInfo* New() const final {
    return CreateMaybeMessage<MsgModuleInfo>(NULL);
  }

  MsgModuleInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgModuleInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgModuleInfo& from);
  void MergeFrom(const MsgModuleInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgModuleInfo* other);
  protected:
  explicit MsgModuleInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_uuid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      ::std::string* uuid);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string author = 3;
  void clear_author();
  static const int kAuthorFieldNumber = 3;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  #if LANG_CXX11
  void set_author(::std::string&& value);
  #endif
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_author();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_author(
      ::std::string* author);

  // string path = 4;
  void clear_path();
  static const int kPathFieldNumber = 4;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_path();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      ::std::string* path);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.MsgModuleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgSourceFileInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.MsgSourceFileInfo) */ {
 public:
  MsgSourceFileInfo();
  virtual ~MsgSourceFileInfo();

  MsgSourceFileInfo(const MsgSourceFileInfo& from);

  inline MsgSourceFileInfo& operator=(const MsgSourceFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgSourceFileInfo(MsgSourceFileInfo&& from) noexcept
    : MsgSourceFileInfo() {
    *this = ::std::move(from);
  }

  inline MsgSourceFileInfo& operator=(MsgSourceFileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgSourceFileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgSourceFileInfo* internal_default_instance() {
    return reinterpret_cast<const MsgSourceFileInfo*>(
               &_MsgSourceFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void UnsafeArenaSwap(MsgSourceFileInfo* other);
  void Swap(MsgSourceFileInfo* other);
  friend void swap(MsgSourceFileInfo& a, MsgSourceFileInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgSourceFileInfo* New() const final {
    return CreateMaybeMessage<MsgSourceFileInfo>(NULL);
  }

  MsgSourceFileInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgSourceFileInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgSourceFileInfo& from);
  void MergeFrom(const MsgSourceFileInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgSourceFileInfo* other);
  protected:
  explicit MsgSourceFileInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_path();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      ::std::string* path);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.MsgSourceFileInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkModInfoResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.BkModInfoResponse) */ {
 public:
  BkModInfoResponse();
  virtual ~BkModInfoResponse();

  BkModInfoResponse(const BkModInfoResponse& from);

  inline BkModInfoResponse& operator=(const BkModInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkModInfoResponse(BkModInfoResponse&& from) noexcept
    : BkModInfoResponse() {
    *this = ::std::move(from);
  }

  inline BkModInfoResponse& operator=(BkModInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkModInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkModInfoResponse* internal_default_instance() {
    return reinterpret_cast<const BkModInfoResponse*>(
               &_BkModInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void UnsafeArenaSwap(BkModInfoResponse* other);
  void Swap(BkModInfoResponse* other);
  friend void swap(BkModInfoResponse& a, BkModInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkModInfoResponse* New() const final {
    return CreateMaybeMessage<BkModInfoResponse>(NULL);
  }

  BkModInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkModInfoResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkModInfoResponse& from);
  void MergeFrom(const BkModInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkModInfoResponse* other);
  protected:
  explicit BkModInfoResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dse.lua.dbg.MsgModuleInfo module = 1;
  int module_size() const;
  void clear_module();
  static const int kModuleFieldNumber = 1;
  ::dse::lua::dbg::MsgModuleInfo* mutable_module(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgModuleInfo >*
      mutable_module();
  const ::dse::lua::dbg::MsgModuleInfo& module(int index) const;
  ::dse::lua::dbg::MsgModuleInfo* add_module();
  const ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgModuleInfo >&
      module() const;

  // repeated .dse.lua.dbg.MsgSourceFileInfo source = 2;
  int source_size() const;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  ::dse::lua::dbg::MsgSourceFileInfo* mutable_source(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgSourceFileInfo >*
      mutable_source();
  const ::dse::lua::dbg::MsgSourceFileInfo& source(int index) const;
  ::dse::lua::dbg::MsgSourceFileInfo* add_source();
  const ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgSourceFileInfo >&
      source() const;

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.BkModInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgModuleInfo > module_;
  ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgSourceFileInfo > source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkDebugOutput : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.BkDebugOutput) */ {
 public:
  BkDebugOutput();
  virtual ~BkDebugOutput();

  BkDebugOutput(const BkDebugOutput& from);

  inline BkDebugOutput& operator=(const BkDebugOutput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkDebugOutput(BkDebugOutput&& from) noexcept
    : BkDebugOutput() {
    *this = ::std::move(from);
  }

  inline BkDebugOutput& operator=(BkDebugOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkDebugOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkDebugOutput* internal_default_instance() {
    return reinterpret_cast<const BkDebugOutput*>(
               &_BkDebugOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void UnsafeArenaSwap(BkDebugOutput* other);
  void Swap(BkDebugOutput* other);
  friend void swap(BkDebugOutput& a, BkDebugOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkDebugOutput* New() const final {
    return CreateMaybeMessage<BkDebugOutput>(NULL);
  }

  BkDebugOutput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkDebugOutput>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkDebugOutput& from);
  void MergeFrom(const BkDebugOutput& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkDebugOutput* other);
  protected:
  explicit BkDebugOutput(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BkDebugOutput_Severity Severity;
  static const Severity LEVEL_INFO =
    BkDebugOutput_Severity_LEVEL_INFO;
  static const Severity LEVEL_WARNING =
    BkDebugOutput_Severity_LEVEL_WARNING;
  static const Severity LEVEL_ERROR =
    BkDebugOutput_Severity_LEVEL_ERROR;
  static const Severity LEVEL_DEBUG =
    BkDebugOutput_Severity_LEVEL_DEBUG;
  static inline bool Severity_IsValid(int value) {
    return BkDebugOutput_Severity_IsValid(value);
  }
  static const Severity Severity_MIN =
    BkDebugOutput_Severity_Severity_MIN;
  static const Severity Severity_MAX =
    BkDebugOutput_Severity_Severity_MAX;
  static const int Severity_ARRAYSIZE =
    BkDebugOutput_Severity_Severity_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_message();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      ::std::string* message);

  // .dse.lua.dbg.BkDebugOutput.Severity severity = 2;
  void clear_severity();
  static const int kSeverityFieldNumber = 2;
  ::dse::lua::dbg::BkDebugOutput_Severity severity() const;
  void set_severity(::dse::lua::dbg::BkDebugOutput_Severity value);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.BkDebugOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int severity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.BkResult) */ {
 public:
  BkResult();
  virtual ~BkResult();

  BkResult(const BkResult& from);

  inline BkResult& operator=(const BkResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkResult(BkResult&& from) noexcept
    : BkResult() {
    *this = ::std::move(from);
  }

  inline BkResult& operator=(BkResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkResult* internal_default_instance() {
    return reinterpret_cast<const BkResult*>(
               &_BkResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void UnsafeArenaSwap(BkResult* other);
  void Swap(BkResult* other);
  friend void swap(BkResult& a, BkResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkResult* New() const final {
    return CreateMaybeMessage<BkResult>(NULL);
  }

  BkResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkResult& from);
  void MergeFrom(const BkResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkResult* other);
  protected:
  explicit BkResult(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dse.lua.dbg.StatusCode status_code = 1;
  void clear_status_code();
  static const int kStatusCodeFieldNumber = 1;
  ::dse::lua::dbg::StatusCode status_code() const;
  void set_status_code(::dse::lua::dbg::StatusCode value);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.BkResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkDebuggerReady : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.BkDebuggerReady) */ {
 public:
  BkDebuggerReady();
  virtual ~BkDebuggerReady();

  BkDebuggerReady(const BkDebuggerReady& from);

  inline BkDebuggerReady& operator=(const BkDebuggerReady& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkDebuggerReady(BkDebuggerReady&& from) noexcept
    : BkDebuggerReady() {
    *this = ::std::move(from);
  }

  inline BkDebuggerReady& operator=(BkDebuggerReady&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkDebuggerReady& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkDebuggerReady* internal_default_instance() {
    return reinterpret_cast<const BkDebuggerReady*>(
               &_BkDebuggerReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void UnsafeArenaSwap(BkDebuggerReady* other);
  void Swap(BkDebuggerReady* other);
  friend void swap(BkDebuggerReady& a, BkDebuggerReady& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkDebuggerReady* New() const final {
    return CreateMaybeMessage<BkDebuggerReady>(NULL);
  }

  BkDebuggerReady* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkDebuggerReady>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkDebuggerReady& from);
  void MergeFrom(const BkDebuggerReady& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkDebuggerReady* other);
  protected:
  explicit BkDebuggerReady(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.BkDebuggerReady)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DbgRequestSource : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.DbgRequestSource) */ {
 public:
  DbgRequestSource();
  virtual ~DbgRequestSource();

  DbgRequestSource(const DbgRequestSource& from);

  inline DbgRequestSource& operator=(const DbgRequestSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DbgRequestSource(DbgRequestSource&& from) noexcept
    : DbgRequestSource() {
    *this = ::std::move(from);
  }

  inline DbgRequestSource& operator=(DbgRequestSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DbgRequestSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbgRequestSource* internal_default_instance() {
    return reinterpret_cast<const DbgRequestSource*>(
               &_DbgRequestSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void UnsafeArenaSwap(DbgRequestSource* other);
  void Swap(DbgRequestSource* other);
  friend void swap(DbgRequestSource& a, DbgRequestSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DbgRequestSource* New() const final {
    return CreateMaybeMessage<DbgRequestSource>(NULL);
  }

  DbgRequestSource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DbgRequestSource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DbgRequestSource& from);
  void MergeFrom(const DbgRequestSource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgRequestSource* other);
  protected:
  explicit DbgRequestSource(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.DbgRequestSource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkSourceResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.BkSourceResponse) */ {
 public:
  BkSourceResponse();
  virtual ~BkSourceResponse();

  BkSourceResponse(const BkSourceResponse& from);

  inline BkSourceResponse& operator=(const BkSourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkSourceResponse(BkSourceResponse&& from) noexcept
    : BkSourceResponse() {
    *this = ::std::move(from);
  }

  inline BkSourceResponse& operator=(BkSourceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkSourceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkSourceResponse* internal_default_instance() {
    return reinterpret_cast<const BkSourceResponse*>(
               &_BkSourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void UnsafeArenaSwap(BkSourceResponse* other);
  void Swap(BkSourceResponse* other);
  friend void swap(BkSourceResponse& a, BkSourceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkSourceResponse* New() const final {
    return CreateMaybeMessage<BkSourceResponse>(NULL);
  }

  BkSourceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkSourceResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkSourceResponse& from);
  void MergeFrom(const BkSourceResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkSourceResponse* other);
  protected:
  explicit BkSourceResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string body = 2;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_body();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      ::std::string* body);

  // @@protoc_insertion_point(class_scope:dse.lua.dbg.BkSourceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DebuggerToBackend : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.DebuggerToBackend) */ {
 public:
  DebuggerToBackend();
  virtual ~DebuggerToBackend();

  DebuggerToBackend(const DebuggerToBackend& from);

  inline DebuggerToBackend& operator=(const DebuggerToBackend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebuggerToBackend(DebuggerToBackend&& from) noexcept
    : DebuggerToBackend() {
    *this = ::std::move(from);
  }

  inline DebuggerToBackend& operator=(DebuggerToBackend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DebuggerToBackend& default_instance();

  enum MsgCase {
    kConnect = 3,
    kUpdateSettings = 4,
    kSetBreakpoints = 5,
    kContinue = 6,
    kEvaluate = 7,
    kFetchMods = 8,
    kRequestSource = 9,
    kGetVariables = 10,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebuggerToBackend* internal_default_instance() {
    return reinterpret_cast<const DebuggerToBackend*>(
               &_DebuggerToBackend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void UnsafeArenaSwap(DebuggerToBackend* other);
  void Swap(DebuggerToBackend* other);
  friend void swap(DebuggerToBackend& a, DebuggerToBackend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebuggerToBackend* New() const final {
    return CreateMaybeMessage<DebuggerToBackend>(NULL);
  }

  DebuggerToBackend* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DebuggerToBackend>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DebuggerToBackend& from);
  void MergeFrom(const DebuggerToBackend& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DebuggerToBackend* other);
  protected:
  explicit DebuggerToBackend(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 seq_no = 1;
  void clear_seq_no();
  static const int kSeqNoFieldNumber = 1;
  ::google::protobuf::uint32 seq_no() const;
  void set_seq_no(::google::protobuf::uint32 value);

  // uint32 reply_seq_no = 2;
  void clear_reply_seq_no();
  static const int kReplySeqNoFieldNumber = 2;
  ::google::protobuf::uint32 reply_seq_no() const;
  void set_reply_seq_no(::google::protobuf::uint32 value);

  // .dse.lua.dbg.DbgConnectRequest connect = 3;
  bool has_connect() const;
  void clear_connect();
  static const int kConnectFieldNumber = 3;
  private:
  const ::dse::lua::dbg::DbgConnectRequest& _internal_connect() const;
  public:
  const ::dse::lua::dbg::DbgConnectRequest& connect() const;
  ::dse::lua::dbg::DbgConnectRequest* release_connect();
  ::dse::lua::dbg::DbgConnectRequest* mutable_connect();
  void set_allocated_connect(::dse::lua::dbg::DbgConnectRequest* connect);
  void unsafe_arena_set_allocated_connect(
      ::dse::lua::dbg::DbgConnectRequest* connect);
  ::dse::lua::dbg::DbgConnectRequest* unsafe_arena_release_connect();

  // .dse.lua.dbg.DbgUpdateSettings updateSettings = 4;
  bool has_updatesettings() const;
  void clear_updatesettings();
  static const int kUpdateSettingsFieldNumber = 4;
  private:
  const ::dse::lua::dbg::DbgUpdateSettings& _internal_updatesettings() const;
  public:
  const ::dse::lua::dbg::DbgUpdateSettings& updatesettings() const;
  ::dse::lua::dbg::DbgUpdateSettings* release_updatesettings();
  ::dse::lua::dbg::DbgUpdateSettings* mutable_updatesettings();
  void set_allocated_updatesettings(::dse::lua::dbg::DbgUpdateSettings* updatesettings);
  void unsafe_arena_set_allocated_updatesettings(
      ::dse::lua::dbg::DbgUpdateSettings* updatesettings);
  ::dse::lua::dbg::DbgUpdateSettings* unsafe_arena_release_updatesettings();

  // .dse.lua.dbg.DbgSetBreakpoints setBreakpoints = 5;
  bool has_setbreakpoints() const;
  void clear_setbreakpoints();
  static const int kSetBreakpointsFieldNumber = 5;
  private:
  const ::dse::lua::dbg::DbgSetBreakpoints& _internal_setbreakpoints() const;
  public:
  const ::dse::lua::dbg::DbgSetBreakpoints& setbreakpoints() const;
  ::dse::lua::dbg::DbgSetBreakpoints* release_setbreakpoints();
  ::dse::lua::dbg::DbgSetBreakpoints* mutable_setbreakpoints();
  void set_allocated_setbreakpoints(::dse::lua::dbg::DbgSetBreakpoints* setbreakpoints);
  void unsafe_arena_set_allocated_setbreakpoints(
      ::dse::lua::dbg::DbgSetBreakpoints* setbreakpoints);
  ::dse::lua::dbg::DbgSetBreakpoints* unsafe_arena_release_setbreakpoints();

  // .dse.lua.dbg.DbgContinue continue = 6;
  bool has_continue_() const;
  void clear_continue_();
  static const int kContinueFieldNumber = 6;
  private:
  const ::dse::lua::dbg::DbgContinue& _internal_continue_() const;
  public:
  const ::dse::lua::dbg::DbgContinue& continue_() const;
  ::dse::lua::dbg::DbgContinue* release_continue_();
  ::dse::lua::dbg::DbgContinue* mutable_continue_();
  void set_allocated_continue_(::dse::lua::dbg::DbgContinue* continue_);
  void unsafe_arena_set_allocated_continue_(
      ::dse::lua::dbg::DbgContinue* continue_);
  ::dse::lua::dbg::DbgContinue* unsafe_arena_release_continue_();

  // .dse.lua.dbg.DbgEvaluate evaluate = 7;
  bool has_evaluate() const;
  void clear_evaluate();
  static const int kEvaluateFieldNumber = 7;
  private:
  const ::dse::lua::dbg::DbgEvaluate& _internal_evaluate() const;
  public:
  const ::dse::lua::dbg::DbgEvaluate& evaluate() const;
  ::dse::lua::dbg::DbgEvaluate* release_evaluate();
  ::dse::lua::dbg::DbgEvaluate* mutable_evaluate();
  void set_allocated_evaluate(::dse::lua::dbg::DbgEvaluate* evaluate);
  void unsafe_arena_set_allocated_evaluate(
      ::dse::lua::dbg::DbgEvaluate* evaluate);
  ::dse::lua::dbg::DbgEvaluate* unsafe_arena_release_evaluate();

  // .dse.lua.dbg.DbgFetchMods fetchMods = 8;
  bool has_fetchmods() const;
  void clear_fetchmods();
  static const int kFetchModsFieldNumber = 8;
  private:
  const ::dse::lua::dbg::DbgFetchMods& _internal_fetchmods() const;
  public:
  const ::dse::lua::dbg::DbgFetchMods& fetchmods() const;
  ::dse::lua::dbg::DbgFetchMods* release_fetchmods();
  ::dse::lua::dbg::DbgFetchMods* mutable_fetchmods();
  void set_allocated_fetchmods(::dse::lua::dbg::DbgFetchMods* fetchmods);
  void unsafe_arena_set_allocated_fetchmods(
      ::dse::lua::dbg::DbgFetchMods* fetchmods);
  ::dse::lua::dbg::DbgFetchMods* unsafe_arena_release_fetchmods();

  // .dse.lua.dbg.DbgRequestSource requestSource = 9;
  bool has_requestsource() const;
  void clear_requestsource();
  static const int kRequestSourceFieldNumber = 9;
  private:
  const ::dse::lua::dbg::DbgRequestSource& _internal_requestsource() const;
  public:
  const ::dse::lua::dbg::DbgRequestSource& requestsource() const;
  ::dse::lua::dbg::DbgRequestSource* release_requestsource();
  ::dse::lua::dbg::DbgRequestSource* mutable_requestsource();
  void set_allocated_requestsource(::dse::lua::dbg::DbgRequestSource* requestsource);
  void unsafe_arena_set_allocated_requestsource(
      ::dse::lua::dbg::DbgRequestSource* requestsource);
  ::dse::lua::dbg::DbgRequestSource* unsafe_arena_release_requestsource();

  // .dse.lua.dbg.DbgGetVariables getVariables = 10;
  bool has_getvariables() const;
  void clear_getvariables();
  static const int kGetVariablesFieldNumber = 10;
  private:
  const ::dse::lua::dbg::DbgGetVariables& _internal_getvariables() const;
  public:
  const ::dse::lua::dbg::DbgGetVariables& getvariables() const;
  ::dse::lua::dbg::DbgGetVariables* release_getvariables();
  ::dse::lua::dbg::DbgGetVariables* mutable_getvariables();
  void set_allocated_getvariables(::dse::lua::dbg::DbgGetVariables* getvariables);
  void unsafe_arena_set_allocated_getvariables(
      ::dse::lua::dbg::DbgGetVariables* getvariables);
  ::dse::lua::dbg::DbgGetVariables* unsafe_arena_release_getvariables();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:dse.lua.dbg.DebuggerToBackend)
 private:
  void set_has_connect();
  void set_has_updatesettings();
  void set_has_setbreakpoints();
  void set_has_continue_();
  void set_has_evaluate();
  void set_has_fetchmods();
  void set_has_requestsource();
  void set_has_getvariables();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 seq_no_;
  ::google::protobuf::uint32 reply_seq_no_;
  union MsgUnion {
    MsgUnion() {}
    ::dse::lua::dbg::DbgConnectRequest* connect_;
    ::dse::lua::dbg::DbgUpdateSettings* updatesettings_;
    ::dse::lua::dbg::DbgSetBreakpoints* setbreakpoints_;
    ::dse::lua::dbg::DbgContinue* continue__;
    ::dse::lua::dbg::DbgEvaluate* evaluate_;
    ::dse::lua::dbg::DbgFetchMods* fetchmods_;
    ::dse::lua::dbg::DbgRequestSource* requestsource_;
    ::dse::lua::dbg::DbgGetVariables* getvariables_;
  } msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackendToDebugger : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.lua.dbg.BackendToDebugger) */ {
 public:
  BackendToDebugger();
  virtual ~BackendToDebugger();

  BackendToDebugger(const BackendToDebugger& from);

  inline BackendToDebugger& operator=(const BackendToDebugger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BackendToDebugger(BackendToDebugger&& from) noexcept
    : BackendToDebugger() {
    *this = ::std::move(from);
  }

  inline BackendToDebugger& operator=(BackendToDebugger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BackendToDebugger& default_instance();

  enum MsgCase {
    kConnectResponse = 3,
    kBreakpointTriggered = 4,
    kEvaluateResponse = 5,
    kContextUpdated = 6,
    kModInfoResponse = 7,
    kDebugOutput = 8,
    kResults = 9,
    kDebuggerReady = 10,
    kSourceResponse = 11,
    kGetVariablesResponse = 12,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackendToDebugger* internal_default_instance() {
    return reinterpret_cast<const BackendToDebugger*>(
               &_BackendToDebugger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void UnsafeArenaSwap(BackendToDebugger* other);
  void Swap(BackendToDebugger* other);
  friend void swap(BackendToDebugger& a, BackendToDebugger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BackendToDebugger* New() const final {
    return CreateMaybeMessage<BackendToDebugger>(NULL);
  }

  BackendToDebugger* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BackendToDebugger>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BackendToDebugger& from);
  void MergeFrom(const BackendToDebugger& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackendToDebugger* other);
  protected:
  explicit BackendToDebugger(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 seq_no = 1;
  void clear_seq_no();
  static const int kSeqNoFieldNumber = 1;
  ::google::protobuf::uint32 seq_no() const;
  void set_seq_no(::google::protobuf::uint32 value);

  // uint32 reply_seq_no = 2;
  void clear_reply_seq_no();
  static const int kReplySeqNoFieldNumber = 2;
  ::google::protobuf::uint32 reply_seq_no() const;
  void set_reply_seq_no(::google::protobuf::uint32 value);

  // .dse.lua.dbg.BkConnectResponse connectResponse = 3;
  bool has_connectresponse() const;
  void clear_connectresponse();
  static const int kConnectResponseFieldNumber = 3;
  private:
  const ::dse::lua::dbg::BkConnectResponse& _internal_connectresponse() const;
  public:
  const ::dse::lua::dbg::BkConnectResponse& connectresponse() const;
  ::dse::lua::dbg::BkConnectResponse* release_connectresponse();
  ::dse::lua::dbg::BkConnectResponse* mutable_connectresponse();
  void set_allocated_connectresponse(::dse::lua::dbg::BkConnectResponse* connectresponse);
  void unsafe_arena_set_allocated_connectresponse(
      ::dse::lua::dbg::BkConnectResponse* connectresponse);
  ::dse::lua::dbg::BkConnectResponse* unsafe_arena_release_connectresponse();

  // .dse.lua.dbg.BkBreakpointTriggered breakpointTriggered = 4;
  bool has_breakpointtriggered() const;
  void clear_breakpointtriggered();
  static const int kBreakpointTriggeredFieldNumber = 4;
  private:
  const ::dse::lua::dbg::BkBreakpointTriggered& _internal_breakpointtriggered() const;
  public:
  const ::dse::lua::dbg::BkBreakpointTriggered& breakpointtriggered() const;
  ::dse::lua::dbg::BkBreakpointTriggered* release_breakpointtriggered();
  ::dse::lua::dbg::BkBreakpointTriggered* mutable_breakpointtriggered();
  void set_allocated_breakpointtriggered(::dse::lua::dbg::BkBreakpointTriggered* breakpointtriggered);
  void unsafe_arena_set_allocated_breakpointtriggered(
      ::dse::lua::dbg::BkBreakpointTriggered* breakpointtriggered);
  ::dse::lua::dbg::BkBreakpointTriggered* unsafe_arena_release_breakpointtriggered();

  // .dse.lua.dbg.BkEvaluateResponse evaluateResponse = 5;
  bool has_evaluateresponse() const;
  void clear_evaluateresponse();
  static const int kEvaluateResponseFieldNumber = 5;
  private:
  const ::dse::lua::dbg::BkEvaluateResponse& _internal_evaluateresponse() const;
  public:
  const ::dse::lua::dbg::BkEvaluateResponse& evaluateresponse() const;
  ::dse::lua::dbg::BkEvaluateResponse* release_evaluateresponse();
  ::dse::lua::dbg::BkEvaluateResponse* mutable_evaluateresponse();
  void set_allocated_evaluateresponse(::dse::lua::dbg::BkEvaluateResponse* evaluateresponse);
  void unsafe_arena_set_allocated_evaluateresponse(
      ::dse::lua::dbg::BkEvaluateResponse* evaluateresponse);
  ::dse::lua::dbg::BkEvaluateResponse* unsafe_arena_release_evaluateresponse();

  // .dse.lua.dbg.BkContextUpdated contextUpdated = 6;
  bool has_contextupdated() const;
  void clear_contextupdated();
  static const int kContextUpdatedFieldNumber = 6;
  private:
  const ::dse::lua::dbg::BkContextUpdated& _internal_contextupdated() const;
  public:
  const ::dse::lua::dbg::BkContextUpdated& contextupdated() const;
  ::dse::lua::dbg::BkContextUpdated* release_contextupdated();
  ::dse::lua::dbg::BkContextUpdated* mutable_contextupdated();
  void set_allocated_contextupdated(::dse::lua::dbg::BkContextUpdated* contextupdated);
  void unsafe_arena_set_allocated_contextupdated(
      ::dse::lua::dbg::BkContextUpdated* contextupdated);
  ::dse::lua::dbg::BkContextUpdated* unsafe_arena_release_contextupdated();

  // .dse.lua.dbg.BkModInfoResponse modInfoResponse = 7;
  bool has_modinforesponse() const;
  void clear_modinforesponse();
  static const int kModInfoResponseFieldNumber = 7;
  private:
  const ::dse::lua::dbg::BkModInfoResponse& _internal_modinforesponse() const;
  public:
  const ::dse::lua::dbg::BkModInfoResponse& modinforesponse() const;
  ::dse::lua::dbg::BkModInfoResponse* release_modinforesponse();
  ::dse::lua::dbg::BkModInfoResponse* mutable_modinforesponse();
  void set_allocated_modinforesponse(::dse::lua::dbg::BkModInfoResponse* modinforesponse);
  void unsafe_arena_set_allocated_modinforesponse(
      ::dse::lua::dbg::BkModInfoResponse* modinforesponse);
  ::dse::lua::dbg::BkModInfoResponse* unsafe_arena_release_modinforesponse();

  // .dse.lua.dbg.BkDebugOutput debugOutput = 8;
  bool has_debugoutput() const;
  void clear_debugoutput();
  static const int kDebugOutputFieldNumber = 8;
  private:
  const ::dse::lua::dbg::BkDebugOutput& _internal_debugoutput() const;
  public:
  const ::dse::lua::dbg::BkDebugOutput& debugoutput() const;
  ::dse::lua::dbg::BkDebugOutput* release_debugoutput();
  ::dse::lua::dbg::BkDebugOutput* mutable_debugoutput();
  void set_allocated_debugoutput(::dse::lua::dbg::BkDebugOutput* debugoutput);
  void unsafe_arena_set_allocated_debugoutput(
      ::dse::lua::dbg::BkDebugOutput* debugoutput);
  ::dse::lua::dbg::BkDebugOutput* unsafe_arena_release_debugoutput();

  // .dse.lua.dbg.BkResult results = 9;
  bool has_results() const;
  void clear_results();
  static const int kResultsFieldNumber = 9;
  private:
  const ::dse::lua::dbg::BkResult& _internal_results() const;
  public:
  const ::dse::lua::dbg::BkResult& results() const;
  ::dse::lua::dbg::BkResult* release_results();
  ::dse::lua::dbg::BkResult* mutable_results();
  void set_allocated_results(::dse::lua::dbg::BkResult* results);
  void unsafe_arena_set_allocated_results(
      ::dse::lua::dbg::BkResult* results);
  ::dse::lua::dbg::BkResult* unsafe_arena_release_results();

  // .dse.lua.dbg.BkDebuggerReady debuggerReady = 10;
  bool has_debuggerready() const;
  void clear_debuggerready();
  static const int kDebuggerReadyFieldNumber = 10;
  private:
  const ::dse::lua::dbg::BkDebuggerReady& _internal_debuggerready() const;
  public:
  const ::dse::lua::dbg::BkDebuggerReady& debuggerready() const;
  ::dse::lua::dbg::BkDebuggerReady* release_debuggerready();
  ::dse::lua::dbg::BkDebuggerReady* mutable_debuggerready();
  void set_allocated_debuggerready(::dse::lua::dbg::BkDebuggerReady* debuggerready);
  void unsafe_arena_set_allocated_debuggerready(
      ::dse::lua::dbg::BkDebuggerReady* debuggerready);
  ::dse::lua::dbg::BkDebuggerReady* unsafe_arena_release_debuggerready();

  // .dse.lua.dbg.BkSourceResponse sourceResponse = 11;
  bool has_sourceresponse() const;
  void clear_sourceresponse();
  static const int kSourceResponseFieldNumber = 11;
  private:
  const ::dse::lua::dbg::BkSourceResponse& _internal_sourceresponse() const;
  public:
  const ::dse::lua::dbg::BkSourceResponse& sourceresponse() const;
  ::dse::lua::dbg::BkSourceResponse* release_sourceresponse();
  ::dse::lua::dbg::BkSourceResponse* mutable_sourceresponse();
  void set_allocated_sourceresponse(::dse::lua::dbg::BkSourceResponse* sourceresponse);
  void unsafe_arena_set_allocated_sourceresponse(
      ::dse::lua::dbg::BkSourceResponse* sourceresponse);
  ::dse::lua::dbg::BkSourceResponse* unsafe_arena_release_sourceresponse();

  // .dse.lua.dbg.BkGetVariablesResponse getVariablesResponse = 12;
  bool has_getvariablesresponse() const;
  void clear_getvariablesresponse();
  static const int kGetVariablesResponseFieldNumber = 12;
  private:
  const ::dse::lua::dbg::BkGetVariablesResponse& _internal_getvariablesresponse() const;
  public:
  const ::dse::lua::dbg::BkGetVariablesResponse& getvariablesresponse() const;
  ::dse::lua::dbg::BkGetVariablesResponse* release_getvariablesresponse();
  ::dse::lua::dbg::BkGetVariablesResponse* mutable_getvariablesresponse();
  void set_allocated_getvariablesresponse(::dse::lua::dbg::BkGetVariablesResponse* getvariablesresponse);
  void unsafe_arena_set_allocated_getvariablesresponse(
      ::dse::lua::dbg::BkGetVariablesResponse* getvariablesresponse);
  ::dse::lua::dbg::BkGetVariablesResponse* unsafe_arena_release_getvariablesresponse();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:dse.lua.dbg.BackendToDebugger)
 private:
  void set_has_connectresponse();
  void set_has_breakpointtriggered();
  void set_has_evaluateresponse();
  void set_has_contextupdated();
  void set_has_modinforesponse();
  void set_has_debugoutput();
  void set_has_results();
  void set_has_debuggerready();
  void set_has_sourceresponse();
  void set_has_getvariablesresponse();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 seq_no_;
  ::google::protobuf::uint32 reply_seq_no_;
  union MsgUnion {
    MsgUnion() {}
    ::dse::lua::dbg::BkConnectResponse* connectresponse_;
    ::dse::lua::dbg::BkBreakpointTriggered* breakpointtriggered_;
    ::dse::lua::dbg::BkEvaluateResponse* evaluateresponse_;
    ::dse::lua::dbg::BkContextUpdated* contextupdated_;
    ::dse::lua::dbg::BkModInfoResponse* modinforesponse_;
    ::dse::lua::dbg::BkDebugOutput* debugoutput_;
    ::dse::lua::dbg::BkResult* results_;
    ::dse::lua::dbg::BkDebuggerReady* debuggerready_;
    ::dse::lua::dbg::BkSourceResponse* sourceresponse_;
    ::dse::lua::dbg::BkGetVariablesResponse* getvariablesresponse_;
  } msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_LuaDebug_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgTableKey

// .dse.lua.dbg.MsgTableKey.Type type = 1;
inline void MsgTableKey::clear_type() {
  type_ = 0;
}
inline ::dse::lua::dbg::MsgTableKey_Type MsgTableKey::type() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgTableKey.type)
  return static_cast< ::dse::lua::dbg::MsgTableKey_Type >(type_);
}
inline void MsgTableKey::set_type(::dse::lua::dbg::MsgTableKey_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgTableKey.type)
}

// int64 index = 2;
inline void MsgTableKey::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MsgTableKey::index() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgTableKey.index)
  return index_;
}
inline void MsgTableKey::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgTableKey.index)
}

// string key = 3;
inline void MsgTableKey::clear_key() {
  key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsgTableKey::key() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgTableKey.key)
  return key_.Get();
}
inline void MsgTableKey::set_key(const ::std::string& value) {
  
  key_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgTableKey.key)
}
#if LANG_CXX11
inline void MsgTableKey::set_key(::std::string&& value) {
  
  key_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.MsgTableKey.key)
}
#endif
inline void MsgTableKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.MsgTableKey.key)
}
inline void MsgTableKey::set_key(const char* value,
    size_t size) {
  
  key_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.MsgTableKey.key)
}
inline ::std::string* MsgTableKey::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.MsgTableKey.key)
  return key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsgTableKey::release_key() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.MsgTableKey.key)
  
  return key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MsgTableKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.MsgTableKey.key)
}
inline ::std::string* MsgTableKey::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.MsgTableKey.key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsgTableKey::unsafe_arena_set_allocated_key(
    ::std::string* key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (key != NULL) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.MsgTableKey.key)
}

// -------------------------------------------------------------------

// MsgVariablesRef

// int32 variableRef = 1;
inline void MsgVariablesRef::clear_variableref() {
  variableref_ = 0;
}
inline ::google::protobuf::int32 MsgVariablesRef::variableref() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgVariablesRef.variableRef)
  return variableref_;
}
inline void MsgVariablesRef::set_variableref(::google::protobuf::int32 value) {
  
  variableref_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgVariablesRef.variableRef)
}

// int32 frame = 2;
inline void MsgVariablesRef::clear_frame() {
  frame_ = 0;
}
inline ::google::protobuf::int32 MsgVariablesRef::frame() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgVariablesRef.frame)
  return frame_;
}
inline void MsgVariablesRef::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgVariablesRef.frame)
}

// int32 local = 3;
inline void MsgVariablesRef::clear_local() {
  local_ = 0;
}
inline ::google::protobuf::int32 MsgVariablesRef::local() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgVariablesRef.local)
  return local_;
}
inline void MsgVariablesRef::set_local(::google::protobuf::int32 value) {
  
  local_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgVariablesRef.local)
}

// repeated .dse.lua.dbg.MsgTableKey key = 4;
inline int MsgVariablesRef::key_size() const {
  return key_.size();
}
inline void MsgVariablesRef::clear_key() {
  key_.Clear();
}
inline ::dse::lua::dbg::MsgTableKey* MsgVariablesRef::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.MsgVariablesRef.key)
  return key_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgTableKey >*
MsgVariablesRef::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:dse.lua.dbg.MsgVariablesRef.key)
  return &key_;
}
inline const ::dse::lua::dbg::MsgTableKey& MsgVariablesRef::key(int index) const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgVariablesRef.key)
  return key_.Get(index);
}
inline ::dse::lua::dbg::MsgTableKey* MsgVariablesRef::add_key() {
  // @@protoc_insertion_point(field_add:dse.lua.dbg.MsgVariablesRef.key)
  return key_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgTableKey >&
MsgVariablesRef::key() const {
  // @@protoc_insertion_point(field_list:dse.lua.dbg.MsgVariablesRef.key)
  return key_;
}

// -------------------------------------------------------------------

// MsgValue

// .dse.lua.dbg.MsgValueType type_id = 1;
inline void MsgValue::clear_type_id() {
  type_id_ = 0;
}
inline ::dse::lua::dbg::MsgValueType MsgValue::type_id() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgValue.type_id)
  return static_cast< ::dse::lua::dbg::MsgValueType >(type_id_);
}
inline void MsgValue::set_type_id(::dse::lua::dbg::MsgValueType value) {
  
  type_id_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgValue.type_id)
}

// bool boolval = 2;
inline bool MsgValue::has_boolval() const {
  return value_case() == kBoolval;
}
inline void MsgValue::set_has_boolval() {
  _oneof_case_[0] = kBoolval;
}
inline void MsgValue::clear_boolval() {
  if (has_boolval()) {
    value_.boolval_ = false;
    clear_has_value();
  }
}
inline bool MsgValue::boolval() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgValue.boolval)
  if (has_boolval()) {
    return value_.boolval_;
  }
  return false;
}
inline void MsgValue::set_boolval(bool value) {
  if (!has_boolval()) {
    clear_value();
    set_has_boolval();
  }
  value_.boolval_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgValue.boolval)
}

// int64 intval = 3;
inline bool MsgValue::has_intval() const {
  return value_case() == kIntval;
}
inline void MsgValue::set_has_intval() {
  _oneof_case_[0] = kIntval;
}
inline void MsgValue::clear_intval() {
  if (has_intval()) {
    value_.intval_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 MsgValue::intval() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgValue.intval)
  if (has_intval()) {
    return value_.intval_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void MsgValue::set_intval(::google::protobuf::int64 value) {
  if (!has_intval()) {
    clear_value();
    set_has_intval();
  }
  value_.intval_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgValue.intval)
}

// float floatval = 4;
inline bool MsgValue::has_floatval() const {
  return value_case() == kFloatval;
}
inline void MsgValue::set_has_floatval() {
  _oneof_case_[0] = kFloatval;
}
inline void MsgValue::clear_floatval() {
  if (has_floatval()) {
    value_.floatval_ = 0;
    clear_has_value();
  }
}
inline float MsgValue::floatval() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgValue.floatval)
  if (has_floatval()) {
    return value_.floatval_;
  }
  return 0;
}
inline void MsgValue::set_floatval(float value) {
  if (!has_floatval()) {
    clear_value();
    set_has_floatval();
  }
  value_.floatval_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgValue.floatval)
}

// string stringval = 5;
inline bool MsgValue::has_stringval() const {
  return value_case() == kStringval;
}
inline void MsgValue::set_has_stringval() {
  _oneof_case_[0] = kStringval;
}
inline void MsgValue::clear_stringval() {
  if (has_stringval()) {
    value_.stringval_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_value();
  }
}
inline const ::std::string& MsgValue::stringval() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgValue.stringval)
  if (has_stringval()) {
    return value_.stringval_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void MsgValue::set_stringval(const ::std::string& value) {
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.stringval_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgValue.stringval)
}
#if LANG_CXX11
inline void MsgValue::set_stringval(::std::string&& value) {
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgValue.stringval)
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.stringval_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.MsgValue.stringval)
}
#endif
inline void MsgValue::set_stringval(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.stringval_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.MsgValue.stringval)
}
inline void MsgValue::set_stringval(const char* value,
                             size_t size) {
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.stringval_.SetLite(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.MsgValue.stringval)
}
inline ::std::string* MsgValue::mutable_stringval() {
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return value_.stringval_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.MsgValue.stringval)
}
inline ::std::string* MsgValue::release_stringval() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.MsgValue.stringval)
  if (has_stringval()) {
    clear_has_value();
    return value_.stringval_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void MsgValue::set_allocated_stringval(::std::string* stringval) {
  if (!has_stringval()) {
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (stringval != NULL) {
    set_has_stringval();
    value_.stringval_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stringval,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.MsgValue.stringval)
}
inline ::std::string* MsgValue::unsafe_arena_release_stringval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.MsgValue.stringval)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_stringval()) {
    clear_has_value();
    return value_.stringval_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void MsgValue::unsafe_arena_set_allocated_stringval(::std::string* stringval) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_stringval()) {
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (stringval) {
    set_has_stringval();
    value_.stringval_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stringval, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.MsgValue.stringval)
}

// .dse.lua.dbg.MsgVariablesRef variables = 6;
inline bool MsgValue::has_variables() const {
  return value_case() == kVariables;
}
inline void MsgValue::set_has_variables() {
  _oneof_case_[0] = kVariables;
}
inline void MsgValue::clear_variables() {
  if (has_variables()) {
    if (GetArenaNoVirtual() == NULL) {
      delete value_.variables_;
    }
    clear_has_value();
  }
}
inline const ::dse::lua::dbg::MsgVariablesRef& MsgValue::_internal_variables() const {
  return *value_.variables_;
}
inline ::dse::lua::dbg::MsgVariablesRef* MsgValue::release_variables() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.MsgValue.variables)
  if (has_variables()) {
    clear_has_value();
      ::dse::lua::dbg::MsgVariablesRef* temp = value_.variables_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    value_.variables_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::MsgVariablesRef& MsgValue::variables() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgValue.variables)
  return has_variables()
      ? *value_.variables_
      : *reinterpret_cast< ::dse::lua::dbg::MsgVariablesRef*>(&::dse::lua::dbg::_MsgVariablesRef_default_instance_);
}
inline ::dse::lua::dbg::MsgVariablesRef* MsgValue::unsafe_arena_release_variables() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.MsgValue.variables)
  if (has_variables()) {
    clear_has_value();
    ::dse::lua::dbg::MsgVariablesRef* temp = value_.variables_;
    value_.variables_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MsgValue::unsafe_arena_set_allocated_variables(::dse::lua::dbg::MsgVariablesRef* variables) {
  clear_value();
  if (variables) {
    set_has_variables();
    value_.variables_ = variables;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.MsgValue.variables)
}
inline ::dse::lua::dbg::MsgVariablesRef* MsgValue::mutable_variables() {
  if (!has_variables()) {
    clear_value();
    set_has_variables();
    value_.variables_ = CreateMaybeMessage< ::dse::lua::dbg::MsgVariablesRef >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.MsgValue.variables)
  return value_.variables_;
}

inline bool MsgValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void MsgValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline MsgValue::ValueCase MsgValue::value_case() const {
  return MsgValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MsgChildValue

// .dse.lua.dbg.MsgChildValue.Type type = 1;
inline void MsgChildValue::clear_type() {
  type_ = 0;
}
inline ::dse::lua::dbg::MsgChildValue_Type MsgChildValue::type() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgChildValue.type)
  return static_cast< ::dse::lua::dbg::MsgChildValue_Type >(type_);
}
inline void MsgChildValue::set_type(::dse::lua::dbg::MsgChildValue_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgChildValue.type)
}

// int64 index = 2;
inline void MsgChildValue::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MsgChildValue::index() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgChildValue.index)
  return index_;
}
inline void MsgChildValue::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgChildValue.index)
}

// string name = 3;
inline void MsgChildValue::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsgChildValue::name() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgChildValue.name)
  return name_.Get();
}
inline void MsgChildValue::set_name(const ::std::string& value) {
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgChildValue.name)
}
#if LANG_CXX11
inline void MsgChildValue::set_name(::std::string&& value) {
  
  name_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.MsgChildValue.name)
}
#endif
inline void MsgChildValue::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.MsgChildValue.name)
}
inline void MsgChildValue::set_name(const char* value,
    size_t size) {
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.MsgChildValue.name)
}
inline ::std::string* MsgChildValue::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.MsgChildValue.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsgChildValue::release_name() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.MsgChildValue.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MsgChildValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.MsgChildValue.name)
}
inline ::std::string* MsgChildValue::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.MsgChildValue.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsgChildValue::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.MsgChildValue.name)
}

// .dse.lua.dbg.MsgValue value = 4;
inline bool MsgChildValue::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void MsgChildValue::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::dse::lua::dbg::MsgValue& MsgChildValue::_internal_value() const {
  return *value_;
}
inline const ::dse::lua::dbg::MsgValue& MsgChildValue::value() const {
  const ::dse::lua::dbg::MsgValue* p = value_;
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgChildValue.value)
  return p != NULL ? *p : *reinterpret_cast<const ::dse::lua::dbg::MsgValue*>(
      &::dse::lua::dbg::_MsgValue_default_instance_);
}
inline ::dse::lua::dbg::MsgValue* MsgChildValue::release_value() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.MsgChildValue.value)
  
  ::dse::lua::dbg::MsgValue* temp = value_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  value_ = NULL;
  return temp;
}
inline ::dse::lua::dbg::MsgValue* MsgChildValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.MsgChildValue.value)
  
  ::dse::lua::dbg::MsgValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::dse::lua::dbg::MsgValue* MsgChildValue::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::dse::lua::dbg::MsgValue>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.MsgChildValue.value)
  return value_;
}
inline void MsgChildValue::set_allocated_value(::dse::lua::dbg::MsgValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.MsgChildValue.value)
}

// -------------------------------------------------------------------

// MsgStackFrame

// string source = 1;
inline void MsgStackFrame::clear_source() {
  source_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsgStackFrame::source() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgStackFrame.source)
  return source_.Get();
}
inline void MsgStackFrame::set_source(const ::std::string& value) {
  
  source_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgStackFrame.source)
}
#if LANG_CXX11
inline void MsgStackFrame::set_source(::std::string&& value) {
  
  source_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.MsgStackFrame.source)
}
#endif
inline void MsgStackFrame::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.MsgStackFrame.source)
}
inline void MsgStackFrame::set_source(const char* value,
    size_t size) {
  
  source_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.MsgStackFrame.source)
}
inline ::std::string* MsgStackFrame::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.MsgStackFrame.source)
  return source_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsgStackFrame::release_source() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.MsgStackFrame.source)
  
  return source_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MsgStackFrame::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.MsgStackFrame.source)
}
inline ::std::string* MsgStackFrame::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.MsgStackFrame.source)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return source_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsgStackFrame::unsafe_arena_set_allocated_source(
    ::std::string* source) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source != NULL) {
    
  } else {
    
  }
  source_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.MsgStackFrame.source)
}

// string path = 2;
inline void MsgStackFrame::clear_path() {
  path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsgStackFrame::path() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgStackFrame.path)
  return path_.Get();
}
inline void MsgStackFrame::set_path(const ::std::string& value) {
  
  path_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgStackFrame.path)
}
#if LANG_CXX11
inline void MsgStackFrame::set_path(::std::string&& value) {
  
  path_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.MsgStackFrame.path)
}
#endif
inline void MsgStackFrame::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.MsgStackFrame.path)
}
inline void MsgStackFrame::set_path(const char* value,
    size_t size) {
  
  path_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.MsgStackFrame.path)
}
inline ::std::string* MsgStackFrame::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.MsgStackFrame.path)
  return path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsgStackFrame::release_path() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.MsgStackFrame.path)
  
  return path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MsgStackFrame::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.MsgStackFrame.path)
}
inline ::std::string* MsgStackFrame::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.MsgStackFrame.path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsgStackFrame::unsafe_arena_set_allocated_path(
    ::std::string* path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (path != NULL) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.MsgStackFrame.path)
}

// string function = 3;
inline void MsgStackFrame::clear_function() {
  function_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsgStackFrame::function() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgStackFrame.function)
  return function_.Get();
}
inline void MsgStackFrame::set_function(const ::std::string& value) {
  
  function_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgStackFrame.function)
}
#if LANG_CXX11
inline void MsgStackFrame::set_function(::std::string&& value) {
  
  function_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.MsgStackFrame.function)
}
#endif
inline void MsgStackFrame::set_function(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  function_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.MsgStackFrame.function)
}
inline void MsgStackFrame::set_function(const char* value,
    size_t size) {
  
  function_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.MsgStackFrame.function)
}
inline ::std::string* MsgStackFrame::mutable_function() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.MsgStackFrame.function)
  return function_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsgStackFrame::release_function() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.MsgStackFrame.function)
  
  return function_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MsgStackFrame::set_allocated_function(::std::string* function) {
  if (function != NULL) {
    
  } else {
    
  }
  function_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.MsgStackFrame.function)
}
inline ::std::string* MsgStackFrame::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.MsgStackFrame.function)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return function_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsgStackFrame::unsafe_arena_set_allocated_function(
    ::std::string* function) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (function != NULL) {
    
  } else {
    
  }
  function_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      function, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.MsgStackFrame.function)
}

// int32 line = 4;
inline void MsgStackFrame::clear_line() {
  line_ = 0;
}
inline ::google::protobuf::int32 MsgStackFrame::line() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgStackFrame.line)
  return line_;
}
inline void MsgStackFrame::set_line(::google::protobuf::int32 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgStackFrame.line)
}

// int32 scope_first_line = 5;
inline void MsgStackFrame::clear_scope_first_line() {
  scope_first_line_ = 0;
}
inline ::google::protobuf::int32 MsgStackFrame::scope_first_line() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgStackFrame.scope_first_line)
  return scope_first_line_;
}
inline void MsgStackFrame::set_scope_first_line(::google::protobuf::int32 value) {
  
  scope_first_line_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgStackFrame.scope_first_line)
}

// int32 scope_last_line = 6;
inline void MsgStackFrame::clear_scope_last_line() {
  scope_last_line_ = 0;
}
inline ::google::protobuf::int32 MsgStackFrame::scope_last_line() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgStackFrame.scope_last_line)
  return scope_last_line_;
}
inline void MsgStackFrame::set_scope_last_line(::google::protobuf::int32 value) {
  
  scope_last_line_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgStackFrame.scope_last_line)
}

// -------------------------------------------------------------------

// DbgConnectRequest

// uint32 protocol_version = 1;
inline void DbgConnectRequest::clear_protocol_version() {
  protocol_version_ = 0u;
}
inline ::google::protobuf::uint32 DbgConnectRequest::protocol_version() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DbgConnectRequest.protocol_version)
  return protocol_version_;
}
inline void DbgConnectRequest::set_protocol_version(::google::protobuf::uint32 value) {
  
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.DbgConnectRequest.protocol_version)
}

// -------------------------------------------------------------------

// BkConnectResponse

// uint32 protocol_version = 1;
inline void BkConnectResponse::clear_protocol_version() {
  protocol_version_ = 0u;
}
inline ::google::protobuf::uint32 BkConnectResponse::protocol_version() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkConnectResponse.protocol_version)
  return protocol_version_;
}
inline void BkConnectResponse::set_protocol_version(::google::protobuf::uint32 value) {
  
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.BkConnectResponse.protocol_version)
}

// -------------------------------------------------------------------

// DbgUpdateSettings

// bool break_on_error = 1;
inline void DbgUpdateSettings::clear_break_on_error() {
  break_on_error_ = false;
}
inline bool DbgUpdateSettings::break_on_error() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DbgUpdateSettings.break_on_error)
  return break_on_error_;
}
inline void DbgUpdateSettings::set_break_on_error(bool value) {
  
  break_on_error_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.DbgUpdateSettings.break_on_error)
}

// bool break_on_generic_error = 2;
inline void DbgUpdateSettings::clear_break_on_generic_error() {
  break_on_generic_error_ = false;
}
inline bool DbgUpdateSettings::break_on_generic_error() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DbgUpdateSettings.break_on_generic_error)
  return break_on_generic_error_;
}
inline void DbgUpdateSettings::set_break_on_generic_error(bool value) {
  
  break_on_generic_error_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.DbgUpdateSettings.break_on_generic_error)
}

// -------------------------------------------------------------------

// MsgBreakpoint

// string path = 1;
inline void MsgBreakpoint::clear_path() {
  path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsgBreakpoint::path() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgBreakpoint.path)
  return path_.Get();
}
inline void MsgBreakpoint::set_path(const ::std::string& value) {
  
  path_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgBreakpoint.path)
}
#if LANG_CXX11
inline void MsgBreakpoint::set_path(::std::string&& value) {
  
  path_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.MsgBreakpoint.path)
}
#endif
inline void MsgBreakpoint::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.MsgBreakpoint.path)
}
inline void MsgBreakpoint::set_path(const char* value,
    size_t size) {
  
  path_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.MsgBreakpoint.path)
}
inline ::std::string* MsgBreakpoint::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.MsgBreakpoint.path)
  return path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsgBreakpoint::release_path() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.MsgBreakpoint.path)
  
  return path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MsgBreakpoint::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.MsgBreakpoint.path)
}
inline ::std::string* MsgBreakpoint::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.MsgBreakpoint.path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsgBreakpoint::unsafe_arena_set_allocated_path(
    ::std::string* path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (path != NULL) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.MsgBreakpoint.path)
}

// int32 line = 2;
inline void MsgBreakpoint::clear_line() {
  line_ = 0;
}
inline ::google::protobuf::int32 MsgBreakpoint::line() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgBreakpoint.line)
  return line_;
}
inline void MsgBreakpoint::set_line(::google::protobuf::int32 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgBreakpoint.line)
}

// -------------------------------------------------------------------

// DbgSetBreakpoints

// repeated .dse.lua.dbg.MsgBreakpoint breakpoint = 1;
inline int DbgSetBreakpoints::breakpoint_size() const {
  return breakpoint_.size();
}
inline void DbgSetBreakpoints::clear_breakpoint() {
  breakpoint_.Clear();
}
inline ::dse::lua::dbg::MsgBreakpoint* DbgSetBreakpoints::mutable_breakpoint(int index) {
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.DbgSetBreakpoints.breakpoint)
  return breakpoint_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgBreakpoint >*
DbgSetBreakpoints::mutable_breakpoint() {
  // @@protoc_insertion_point(field_mutable_list:dse.lua.dbg.DbgSetBreakpoints.breakpoint)
  return &breakpoint_;
}
inline const ::dse::lua::dbg::MsgBreakpoint& DbgSetBreakpoints::breakpoint(int index) const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DbgSetBreakpoints.breakpoint)
  return breakpoint_.Get(index);
}
inline ::dse::lua::dbg::MsgBreakpoint* DbgSetBreakpoints::add_breakpoint() {
  // @@protoc_insertion_point(field_add:dse.lua.dbg.DbgSetBreakpoints.breakpoint)
  return breakpoint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgBreakpoint >&
DbgSetBreakpoints::breakpoint() const {
  // @@protoc_insertion_point(field_list:dse.lua.dbg.DbgSetBreakpoints.breakpoint)
  return breakpoint_;
}

// -------------------------------------------------------------------

// BkBreakpointTriggered

// .dse.lua.dbg.BkBreakpointTriggered.Reason reason = 1;
inline void BkBreakpointTriggered::clear_reason() {
  reason_ = 0;
}
inline ::dse::lua::dbg::BkBreakpointTriggered_Reason BkBreakpointTriggered::reason() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkBreakpointTriggered.reason)
  return static_cast< ::dse::lua::dbg::BkBreakpointTriggered_Reason >(reason_);
}
inline void BkBreakpointTriggered::set_reason(::dse::lua::dbg::BkBreakpointTriggered_Reason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.BkBreakpointTriggered.reason)
}

// repeated .dse.lua.dbg.MsgStackFrame stack = 2;
inline int BkBreakpointTriggered::stack_size() const {
  return stack_.size();
}
inline void BkBreakpointTriggered::clear_stack() {
  stack_.Clear();
}
inline ::dse::lua::dbg::MsgStackFrame* BkBreakpointTriggered::mutable_stack(int index) {
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BkBreakpointTriggered.stack)
  return stack_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgStackFrame >*
BkBreakpointTriggered::mutable_stack() {
  // @@protoc_insertion_point(field_mutable_list:dse.lua.dbg.BkBreakpointTriggered.stack)
  return &stack_;
}
inline const ::dse::lua::dbg::MsgStackFrame& BkBreakpointTriggered::stack(int index) const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkBreakpointTriggered.stack)
  return stack_.Get(index);
}
inline ::dse::lua::dbg::MsgStackFrame* BkBreakpointTriggered::add_stack() {
  // @@protoc_insertion_point(field_add:dse.lua.dbg.BkBreakpointTriggered.stack)
  return stack_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgStackFrame >&
BkBreakpointTriggered::stack() const {
  // @@protoc_insertion_point(field_list:dse.lua.dbg.BkBreakpointTriggered.stack)
  return stack_;
}

// .dse.lua.dbg.DbgContext context = 3;
inline void BkBreakpointTriggered::clear_context() {
  context_ = 0;
}
inline ::dse::lua::dbg::DbgContext BkBreakpointTriggered::context() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkBreakpointTriggered.context)
  return static_cast< ::dse::lua::dbg::DbgContext >(context_);
}
inline void BkBreakpointTriggered::set_context(::dse::lua::dbg::DbgContext value) {
  
  context_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.BkBreakpointTriggered.context)
}

// string message = 4;
inline void BkBreakpointTriggered::clear_message() {
  message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BkBreakpointTriggered::message() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkBreakpointTriggered.message)
  return message_.Get();
}
inline void BkBreakpointTriggered::set_message(const ::std::string& value) {
  
  message_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.BkBreakpointTriggered.message)
}
#if LANG_CXX11
inline void BkBreakpointTriggered::set_message(::std::string&& value) {
  
  message_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.BkBreakpointTriggered.message)
}
#endif
inline void BkBreakpointTriggered::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.BkBreakpointTriggered.message)
}
inline void BkBreakpointTriggered::set_message(const char* value,
    size_t size) {
  
  message_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.BkBreakpointTriggered.message)
}
inline ::std::string* BkBreakpointTriggered::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BkBreakpointTriggered.message)
  return message_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BkBreakpointTriggered::release_message() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BkBreakpointTriggered.message)
  
  return message_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void BkBreakpointTriggered::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.BkBreakpointTriggered.message)
}
inline ::std::string* BkBreakpointTriggered::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BkBreakpointTriggered.message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return message_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BkBreakpointTriggered::unsafe_arena_set_allocated_message(
    ::std::string* message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (message != NULL) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BkBreakpointTriggered.message)
}

// -------------------------------------------------------------------

// DbgContinue

// .dse.lua.dbg.DbgContext context = 1;
inline void DbgContinue::clear_context() {
  context_ = 0;
}
inline ::dse::lua::dbg::DbgContext DbgContinue::context() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DbgContinue.context)
  return static_cast< ::dse::lua::dbg::DbgContext >(context_);
}
inline void DbgContinue::set_context(::dse::lua::dbg::DbgContext value) {
  
  context_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.DbgContinue.context)
}

// .dse.lua.dbg.DbgContinue.Action action = 2;
inline void DbgContinue::clear_action() {
  action_ = 0;
}
inline ::dse::lua::dbg::DbgContinue_Action DbgContinue::action() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DbgContinue.action)
  return static_cast< ::dse::lua::dbg::DbgContinue_Action >(action_);
}
inline void DbgContinue::set_action(::dse::lua::dbg::DbgContinue_Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.DbgContinue.action)
}

// -------------------------------------------------------------------

// DbgEvaluate

// .dse.lua.dbg.DbgContext context = 1;
inline void DbgEvaluate::clear_context() {
  context_ = 0;
}
inline ::dse::lua::dbg::DbgContext DbgEvaluate::context() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DbgEvaluate.context)
  return static_cast< ::dse::lua::dbg::DbgContext >(context_);
}
inline void DbgEvaluate::set_context(::dse::lua::dbg::DbgContext value) {
  
  context_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.DbgEvaluate.context)
}

// string expression = 2;
inline void DbgEvaluate::clear_expression() {
  expression_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DbgEvaluate::expression() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DbgEvaluate.expression)
  return expression_.Get();
}
inline void DbgEvaluate::set_expression(const ::std::string& value) {
  
  expression_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.DbgEvaluate.expression)
}
#if LANG_CXX11
inline void DbgEvaluate::set_expression(::std::string&& value) {
  
  expression_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.DbgEvaluate.expression)
}
#endif
inline void DbgEvaluate::set_expression(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  expression_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.DbgEvaluate.expression)
}
inline void DbgEvaluate::set_expression(const char* value,
    size_t size) {
  
  expression_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.DbgEvaluate.expression)
}
inline ::std::string* DbgEvaluate::mutable_expression() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.DbgEvaluate.expression)
  return expression_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DbgEvaluate::release_expression() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.DbgEvaluate.expression)
  
  return expression_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DbgEvaluate::set_allocated_expression(::std::string* expression) {
  if (expression != NULL) {
    
  } else {
    
  }
  expression_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expression,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.DbgEvaluate.expression)
}
inline ::std::string* DbgEvaluate::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.DbgEvaluate.expression)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return expression_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DbgEvaluate::unsafe_arena_set_allocated_expression(
    ::std::string* expression) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (expression != NULL) {
    
  } else {
    
  }
  expression_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      expression, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.DbgEvaluate.expression)
}

// int32 frame = 3;
inline void DbgEvaluate::clear_frame() {
  frame_ = 0;
}
inline ::google::protobuf::int32 DbgEvaluate::frame() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DbgEvaluate.frame)
  return frame_;
}
inline void DbgEvaluate::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.DbgEvaluate.frame)
}

// -------------------------------------------------------------------

// DbgGetVariables

// .dse.lua.dbg.DbgContext context = 1;
inline void DbgGetVariables::clear_context() {
  context_ = 0;
}
inline ::dse::lua::dbg::DbgContext DbgGetVariables::context() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DbgGetVariables.context)
  return static_cast< ::dse::lua::dbg::DbgContext >(context_);
}
inline void DbgGetVariables::set_context(::dse::lua::dbg::DbgContext value) {
  
  context_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.DbgGetVariables.context)
}

// int32 variableRef = 2;
inline void DbgGetVariables::clear_variableref() {
  variableref_ = 0;
}
inline ::google::protobuf::int32 DbgGetVariables::variableref() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DbgGetVariables.variableRef)
  return variableref_;
}
inline void DbgGetVariables::set_variableref(::google::protobuf::int32 value) {
  
  variableref_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.DbgGetVariables.variableRef)
}

// int32 frame = 3;
inline void DbgGetVariables::clear_frame() {
  frame_ = 0;
}
inline ::google::protobuf::int32 DbgGetVariables::frame() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DbgGetVariables.frame)
  return frame_;
}
inline void DbgGetVariables::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.DbgGetVariables.frame)
}

// int32 local = 4;
inline void DbgGetVariables::clear_local() {
  local_ = 0;
}
inline ::google::protobuf::int32 DbgGetVariables::local() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DbgGetVariables.local)
  return local_;
}
inline void DbgGetVariables::set_local(::google::protobuf::int32 value) {
  
  local_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.DbgGetVariables.local)
}

// repeated .dse.lua.dbg.MsgTableKey key = 5;
inline int DbgGetVariables::key_size() const {
  return key_.size();
}
inline void DbgGetVariables::clear_key() {
  key_.Clear();
}
inline ::dse::lua::dbg::MsgTableKey* DbgGetVariables::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.DbgGetVariables.key)
  return key_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgTableKey >*
DbgGetVariables::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:dse.lua.dbg.DbgGetVariables.key)
  return &key_;
}
inline const ::dse::lua::dbg::MsgTableKey& DbgGetVariables::key(int index) const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DbgGetVariables.key)
  return key_.Get(index);
}
inline ::dse::lua::dbg::MsgTableKey* DbgGetVariables::add_key() {
  // @@protoc_insertion_point(field_add:dse.lua.dbg.DbgGetVariables.key)
  return key_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgTableKey >&
DbgGetVariables::key() const {
  // @@protoc_insertion_point(field_list:dse.lua.dbg.DbgGetVariables.key)
  return key_;
}

// -------------------------------------------------------------------

// BkEvaluateResponse

// .dse.lua.dbg.MsgValue result = 1;
inline bool BkEvaluateResponse::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void BkEvaluateResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}
inline const ::dse::lua::dbg::MsgValue& BkEvaluateResponse::_internal_result() const {
  return *result_;
}
inline const ::dse::lua::dbg::MsgValue& BkEvaluateResponse::result() const {
  const ::dse::lua::dbg::MsgValue* p = result_;
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkEvaluateResponse.result)
  return p != NULL ? *p : *reinterpret_cast<const ::dse::lua::dbg::MsgValue*>(
      &::dse::lua::dbg::_MsgValue_default_instance_);
}
inline ::dse::lua::dbg::MsgValue* BkEvaluateResponse::release_result() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BkEvaluateResponse.result)
  
  ::dse::lua::dbg::MsgValue* temp = result_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  result_ = NULL;
  return temp;
}
inline ::dse::lua::dbg::MsgValue* BkEvaluateResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BkEvaluateResponse.result)
  
  ::dse::lua::dbg::MsgValue* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::dse::lua::dbg::MsgValue* BkEvaluateResponse::mutable_result() {
  
  if (result_ == NULL) {
    auto* p = CreateMaybeMessage<::dse::lua::dbg::MsgValue>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BkEvaluateResponse.result)
  return result_;
}
inline void BkEvaluateResponse::set_allocated_result(::dse::lua::dbg::MsgValue* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.BkEvaluateResponse.result)
}

// string error_message = 2;
inline void BkEvaluateResponse::clear_error_message() {
  error_message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BkEvaluateResponse::error_message() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkEvaluateResponse.error_message)
  return error_message_.Get();
}
inline void BkEvaluateResponse::set_error_message(const ::std::string& value) {
  
  error_message_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.BkEvaluateResponse.error_message)
}
#if LANG_CXX11
inline void BkEvaluateResponse::set_error_message(::std::string&& value) {
  
  error_message_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.BkEvaluateResponse.error_message)
}
#endif
inline void BkEvaluateResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.BkEvaluateResponse.error_message)
}
inline void BkEvaluateResponse::set_error_message(const char* value,
    size_t size) {
  
  error_message_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.BkEvaluateResponse.error_message)
}
inline ::std::string* BkEvaluateResponse::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BkEvaluateResponse.error_message)
  return error_message_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BkEvaluateResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BkEvaluateResponse.error_message)
  
  return error_message_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void BkEvaluateResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.BkEvaluateResponse.error_message)
}
inline ::std::string* BkEvaluateResponse::unsafe_arena_release_error_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BkEvaluateResponse.error_message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return error_message_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BkEvaluateResponse::unsafe_arena_set_allocated_error_message(
    ::std::string* error_message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      error_message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BkEvaluateResponse.error_message)
}

// -------------------------------------------------------------------

// BkGetVariablesResponse

// repeated .dse.lua.dbg.MsgChildValue result = 1;
inline int BkGetVariablesResponse::result_size() const {
  return result_.size();
}
inline void BkGetVariablesResponse::clear_result() {
  result_.Clear();
}
inline ::dse::lua::dbg::MsgChildValue* BkGetVariablesResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BkGetVariablesResponse.result)
  return result_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgChildValue >*
BkGetVariablesResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:dse.lua.dbg.BkGetVariablesResponse.result)
  return &result_;
}
inline const ::dse::lua::dbg::MsgChildValue& BkGetVariablesResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkGetVariablesResponse.result)
  return result_.Get(index);
}
inline ::dse::lua::dbg::MsgChildValue* BkGetVariablesResponse::add_result() {
  // @@protoc_insertion_point(field_add:dse.lua.dbg.BkGetVariablesResponse.result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgChildValue >&
BkGetVariablesResponse::result() const {
  // @@protoc_insertion_point(field_list:dse.lua.dbg.BkGetVariablesResponse.result)
  return result_;
}

// string error_message = 2;
inline void BkGetVariablesResponse::clear_error_message() {
  error_message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BkGetVariablesResponse::error_message() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkGetVariablesResponse.error_message)
  return error_message_.Get();
}
inline void BkGetVariablesResponse::set_error_message(const ::std::string& value) {
  
  error_message_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.BkGetVariablesResponse.error_message)
}
#if LANG_CXX11
inline void BkGetVariablesResponse::set_error_message(::std::string&& value) {
  
  error_message_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.BkGetVariablesResponse.error_message)
}
#endif
inline void BkGetVariablesResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.BkGetVariablesResponse.error_message)
}
inline void BkGetVariablesResponse::set_error_message(const char* value,
    size_t size) {
  
  error_message_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.BkGetVariablesResponse.error_message)
}
inline ::std::string* BkGetVariablesResponse::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BkGetVariablesResponse.error_message)
  return error_message_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BkGetVariablesResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BkGetVariablesResponse.error_message)
  
  return error_message_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void BkGetVariablesResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.BkGetVariablesResponse.error_message)
}
inline ::std::string* BkGetVariablesResponse::unsafe_arena_release_error_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BkGetVariablesResponse.error_message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return error_message_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BkGetVariablesResponse::unsafe_arena_set_allocated_error_message(
    ::std::string* error_message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      error_message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BkGetVariablesResponse.error_message)
}

// -------------------------------------------------------------------

// DbgFetchMods

// -------------------------------------------------------------------

// BkContextUpdated

// .dse.lua.dbg.DbgContext context = 1;
inline void BkContextUpdated::clear_context() {
  context_ = 0;
}
inline ::dse::lua::dbg::DbgContext BkContextUpdated::context() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkContextUpdated.context)
  return static_cast< ::dse::lua::dbg::DbgContext >(context_);
}
inline void BkContextUpdated::set_context(::dse::lua::dbg::DbgContext value) {
  
  context_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.BkContextUpdated.context)
}

// .dse.lua.dbg.BkContextUpdated.Status status = 2;
inline void BkContextUpdated::clear_status() {
  status_ = 0;
}
inline ::dse::lua::dbg::BkContextUpdated_Status BkContextUpdated::status() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkContextUpdated.status)
  return static_cast< ::dse::lua::dbg::BkContextUpdated_Status >(status_);
}
inline void BkContextUpdated::set_status(::dse::lua::dbg::BkContextUpdated_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.BkContextUpdated.status)
}

// -------------------------------------------------------------------

// MsgModuleInfo

// string uuid = 1;
inline void MsgModuleInfo::clear_uuid() {
  uuid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsgModuleInfo::uuid() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgModuleInfo.uuid)
  return uuid_.Get();
}
inline void MsgModuleInfo::set_uuid(const ::std::string& value) {
  
  uuid_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgModuleInfo.uuid)
}
#if LANG_CXX11
inline void MsgModuleInfo::set_uuid(::std::string&& value) {
  
  uuid_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.MsgModuleInfo.uuid)
}
#endif
inline void MsgModuleInfo::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.MsgModuleInfo.uuid)
}
inline void MsgModuleInfo::set_uuid(const char* value,
    size_t size) {
  
  uuid_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.MsgModuleInfo.uuid)
}
inline ::std::string* MsgModuleInfo::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.MsgModuleInfo.uuid)
  return uuid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsgModuleInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.MsgModuleInfo.uuid)
  
  return uuid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MsgModuleInfo::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.MsgModuleInfo.uuid)
}
inline ::std::string* MsgModuleInfo::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.MsgModuleInfo.uuid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return uuid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsgModuleInfo::unsafe_arena_set_allocated_uuid(
    ::std::string* uuid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.MsgModuleInfo.uuid)
}

// string name = 2;
inline void MsgModuleInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsgModuleInfo::name() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgModuleInfo.name)
  return name_.Get();
}
inline void MsgModuleInfo::set_name(const ::std::string& value) {
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgModuleInfo.name)
}
#if LANG_CXX11
inline void MsgModuleInfo::set_name(::std::string&& value) {
  
  name_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.MsgModuleInfo.name)
}
#endif
inline void MsgModuleInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.MsgModuleInfo.name)
}
inline void MsgModuleInfo::set_name(const char* value,
    size_t size) {
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.MsgModuleInfo.name)
}
inline ::std::string* MsgModuleInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.MsgModuleInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsgModuleInfo::release_name() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.MsgModuleInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MsgModuleInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.MsgModuleInfo.name)
}
inline ::std::string* MsgModuleInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.MsgModuleInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsgModuleInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.MsgModuleInfo.name)
}

// string author = 3;
inline void MsgModuleInfo::clear_author() {
  author_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsgModuleInfo::author() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgModuleInfo.author)
  return author_.Get();
}
inline void MsgModuleInfo::set_author(const ::std::string& value) {
  
  author_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgModuleInfo.author)
}
#if LANG_CXX11
inline void MsgModuleInfo::set_author(::std::string&& value) {
  
  author_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.MsgModuleInfo.author)
}
#endif
inline void MsgModuleInfo::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.MsgModuleInfo.author)
}
inline void MsgModuleInfo::set_author(const char* value,
    size_t size) {
  
  author_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.MsgModuleInfo.author)
}
inline ::std::string* MsgModuleInfo::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.MsgModuleInfo.author)
  return author_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsgModuleInfo::release_author() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.MsgModuleInfo.author)
  
  return author_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MsgModuleInfo::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.MsgModuleInfo.author)
}
inline ::std::string* MsgModuleInfo::unsafe_arena_release_author() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.MsgModuleInfo.author)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return author_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsgModuleInfo::unsafe_arena_set_allocated_author(
    ::std::string* author) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (author != NULL) {
    
  } else {
    
  }
  author_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      author, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.MsgModuleInfo.author)
}

// string path = 4;
inline void MsgModuleInfo::clear_path() {
  path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsgModuleInfo::path() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgModuleInfo.path)
  return path_.Get();
}
inline void MsgModuleInfo::set_path(const ::std::string& value) {
  
  path_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgModuleInfo.path)
}
#if LANG_CXX11
inline void MsgModuleInfo::set_path(::std::string&& value) {
  
  path_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.MsgModuleInfo.path)
}
#endif
inline void MsgModuleInfo::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.MsgModuleInfo.path)
}
inline void MsgModuleInfo::set_path(const char* value,
    size_t size) {
  
  path_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.MsgModuleInfo.path)
}
inline ::std::string* MsgModuleInfo::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.MsgModuleInfo.path)
  return path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsgModuleInfo::release_path() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.MsgModuleInfo.path)
  
  return path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MsgModuleInfo::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.MsgModuleInfo.path)
}
inline ::std::string* MsgModuleInfo::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.MsgModuleInfo.path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsgModuleInfo::unsafe_arena_set_allocated_path(
    ::std::string* path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (path != NULL) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.MsgModuleInfo.path)
}

// -------------------------------------------------------------------

// MsgSourceFileInfo

// string path = 1;
inline void MsgSourceFileInfo::clear_path() {
  path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsgSourceFileInfo::path() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.MsgSourceFileInfo.path)
  return path_.Get();
}
inline void MsgSourceFileInfo::set_path(const ::std::string& value) {
  
  path_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.MsgSourceFileInfo.path)
}
#if LANG_CXX11
inline void MsgSourceFileInfo::set_path(::std::string&& value) {
  
  path_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.MsgSourceFileInfo.path)
}
#endif
inline void MsgSourceFileInfo::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.MsgSourceFileInfo.path)
}
inline void MsgSourceFileInfo::set_path(const char* value,
    size_t size) {
  
  path_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.MsgSourceFileInfo.path)
}
inline ::std::string* MsgSourceFileInfo::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.MsgSourceFileInfo.path)
  return path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsgSourceFileInfo::release_path() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.MsgSourceFileInfo.path)
  
  return path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MsgSourceFileInfo::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.MsgSourceFileInfo.path)
}
inline ::std::string* MsgSourceFileInfo::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.MsgSourceFileInfo.path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsgSourceFileInfo::unsafe_arena_set_allocated_path(
    ::std::string* path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (path != NULL) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.MsgSourceFileInfo.path)
}

// -------------------------------------------------------------------

// BkModInfoResponse

// repeated .dse.lua.dbg.MsgModuleInfo module = 1;
inline int BkModInfoResponse::module_size() const {
  return module_.size();
}
inline void BkModInfoResponse::clear_module() {
  module_.Clear();
}
inline ::dse::lua::dbg::MsgModuleInfo* BkModInfoResponse::mutable_module(int index) {
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BkModInfoResponse.module)
  return module_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgModuleInfo >*
BkModInfoResponse::mutable_module() {
  // @@protoc_insertion_point(field_mutable_list:dse.lua.dbg.BkModInfoResponse.module)
  return &module_;
}
inline const ::dse::lua::dbg::MsgModuleInfo& BkModInfoResponse::module(int index) const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkModInfoResponse.module)
  return module_.Get(index);
}
inline ::dse::lua::dbg::MsgModuleInfo* BkModInfoResponse::add_module() {
  // @@protoc_insertion_point(field_add:dse.lua.dbg.BkModInfoResponse.module)
  return module_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgModuleInfo >&
BkModInfoResponse::module() const {
  // @@protoc_insertion_point(field_list:dse.lua.dbg.BkModInfoResponse.module)
  return module_;
}

// repeated .dse.lua.dbg.MsgSourceFileInfo source = 2;
inline int BkModInfoResponse::source_size() const {
  return source_.size();
}
inline void BkModInfoResponse::clear_source() {
  source_.Clear();
}
inline ::dse::lua::dbg::MsgSourceFileInfo* BkModInfoResponse::mutable_source(int index) {
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BkModInfoResponse.source)
  return source_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgSourceFileInfo >*
BkModInfoResponse::mutable_source() {
  // @@protoc_insertion_point(field_mutable_list:dse.lua.dbg.BkModInfoResponse.source)
  return &source_;
}
inline const ::dse::lua::dbg::MsgSourceFileInfo& BkModInfoResponse::source(int index) const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkModInfoResponse.source)
  return source_.Get(index);
}
inline ::dse::lua::dbg::MsgSourceFileInfo* BkModInfoResponse::add_source() {
  // @@protoc_insertion_point(field_add:dse.lua.dbg.BkModInfoResponse.source)
  return source_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::lua::dbg::MsgSourceFileInfo >&
BkModInfoResponse::source() const {
  // @@protoc_insertion_point(field_list:dse.lua.dbg.BkModInfoResponse.source)
  return source_;
}

// -------------------------------------------------------------------

// BkDebugOutput

// string message = 1;
inline void BkDebugOutput::clear_message() {
  message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BkDebugOutput::message() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkDebugOutput.message)
  return message_.Get();
}
inline void BkDebugOutput::set_message(const ::std::string& value) {
  
  message_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.BkDebugOutput.message)
}
#if LANG_CXX11
inline void BkDebugOutput::set_message(::std::string&& value) {
  
  message_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.BkDebugOutput.message)
}
#endif
inline void BkDebugOutput::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.BkDebugOutput.message)
}
inline void BkDebugOutput::set_message(const char* value,
    size_t size) {
  
  message_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.BkDebugOutput.message)
}
inline ::std::string* BkDebugOutput::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BkDebugOutput.message)
  return message_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BkDebugOutput::release_message() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BkDebugOutput.message)
  
  return message_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void BkDebugOutput::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.BkDebugOutput.message)
}
inline ::std::string* BkDebugOutput::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BkDebugOutput.message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return message_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BkDebugOutput::unsafe_arena_set_allocated_message(
    ::std::string* message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (message != NULL) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BkDebugOutput.message)
}

// .dse.lua.dbg.BkDebugOutput.Severity severity = 2;
inline void BkDebugOutput::clear_severity() {
  severity_ = 0;
}
inline ::dse::lua::dbg::BkDebugOutput_Severity BkDebugOutput::severity() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkDebugOutput.severity)
  return static_cast< ::dse::lua::dbg::BkDebugOutput_Severity >(severity_);
}
inline void BkDebugOutput::set_severity(::dse::lua::dbg::BkDebugOutput_Severity value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.BkDebugOutput.severity)
}

// -------------------------------------------------------------------

// BkResult

// .dse.lua.dbg.StatusCode status_code = 1;
inline void BkResult::clear_status_code() {
  status_code_ = 0;
}
inline ::dse::lua::dbg::StatusCode BkResult::status_code() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkResult.status_code)
  return static_cast< ::dse::lua::dbg::StatusCode >(status_code_);
}
inline void BkResult::set_status_code(::dse::lua::dbg::StatusCode value) {
  
  status_code_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.BkResult.status_code)
}

// -------------------------------------------------------------------

// BkDebuggerReady

// -------------------------------------------------------------------

// DbgRequestSource

// string name = 1;
inline void DbgRequestSource::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DbgRequestSource::name() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DbgRequestSource.name)
  return name_.Get();
}
inline void DbgRequestSource::set_name(const ::std::string& value) {
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.DbgRequestSource.name)
}
#if LANG_CXX11
inline void DbgRequestSource::set_name(::std::string&& value) {
  
  name_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.DbgRequestSource.name)
}
#endif
inline void DbgRequestSource::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.DbgRequestSource.name)
}
inline void DbgRequestSource::set_name(const char* value,
    size_t size) {
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.DbgRequestSource.name)
}
inline ::std::string* DbgRequestSource::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.DbgRequestSource.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DbgRequestSource::release_name() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.DbgRequestSource.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DbgRequestSource::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.DbgRequestSource.name)
}
inline ::std::string* DbgRequestSource::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.DbgRequestSource.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DbgRequestSource::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.DbgRequestSource.name)
}

// -------------------------------------------------------------------

// BkSourceResponse

// string name = 1;
inline void BkSourceResponse::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BkSourceResponse::name() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkSourceResponse.name)
  return name_.Get();
}
inline void BkSourceResponse::set_name(const ::std::string& value) {
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.BkSourceResponse.name)
}
#if LANG_CXX11
inline void BkSourceResponse::set_name(::std::string&& value) {
  
  name_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.BkSourceResponse.name)
}
#endif
inline void BkSourceResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.BkSourceResponse.name)
}
inline void BkSourceResponse::set_name(const char* value,
    size_t size) {
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.BkSourceResponse.name)
}
inline ::std::string* BkSourceResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BkSourceResponse.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BkSourceResponse::release_name() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BkSourceResponse.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void BkSourceResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.BkSourceResponse.name)
}
inline ::std::string* BkSourceResponse::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BkSourceResponse.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BkSourceResponse::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BkSourceResponse.name)
}

// string body = 2;
inline void BkSourceResponse::clear_body() {
  body_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BkSourceResponse::body() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BkSourceResponse.body)
  return body_.Get();
}
inline void BkSourceResponse::set_body(const ::std::string& value) {
  
  body_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.lua.dbg.BkSourceResponse.body)
}
#if LANG_CXX11
inline void BkSourceResponse::set_body(::std::string&& value) {
  
  body_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.lua.dbg.BkSourceResponse.body)
}
#endif
inline void BkSourceResponse::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.lua.dbg.BkSourceResponse.body)
}
inline void BkSourceResponse::set_body(const char* value,
    size_t size) {
  
  body_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.lua.dbg.BkSourceResponse.body)
}
inline ::std::string* BkSourceResponse::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BkSourceResponse.body)
  return body_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BkSourceResponse::release_body() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BkSourceResponse.body)
  
  return body_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void BkSourceResponse::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.lua.dbg.BkSourceResponse.body)
}
inline ::std::string* BkSourceResponse::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BkSourceResponse.body)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return body_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BkSourceResponse::unsafe_arena_set_allocated_body(
    ::std::string* body) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (body != NULL) {
    
  } else {
    
  }
  body_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      body, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BkSourceResponse.body)
}

// -------------------------------------------------------------------

// DebuggerToBackend

// uint32 seq_no = 1;
inline void DebuggerToBackend::clear_seq_no() {
  seq_no_ = 0u;
}
inline ::google::protobuf::uint32 DebuggerToBackend::seq_no() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DebuggerToBackend.seq_no)
  return seq_no_;
}
inline void DebuggerToBackend::set_seq_no(::google::protobuf::uint32 value) {
  
  seq_no_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.DebuggerToBackend.seq_no)
}

// uint32 reply_seq_no = 2;
inline void DebuggerToBackend::clear_reply_seq_no() {
  reply_seq_no_ = 0u;
}
inline ::google::protobuf::uint32 DebuggerToBackend::reply_seq_no() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DebuggerToBackend.reply_seq_no)
  return reply_seq_no_;
}
inline void DebuggerToBackend::set_reply_seq_no(::google::protobuf::uint32 value) {
  
  reply_seq_no_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.DebuggerToBackend.reply_seq_no)
}

// .dse.lua.dbg.DbgConnectRequest connect = 3;
inline bool DebuggerToBackend::has_connect() const {
  return msg_case() == kConnect;
}
inline void DebuggerToBackend::set_has_connect() {
  _oneof_case_[0] = kConnect;
}
inline void DebuggerToBackend::clear_connect() {
  if (has_connect()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.connect_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::DbgConnectRequest& DebuggerToBackend::_internal_connect() const {
  return *msg_.connect_;
}
inline ::dse::lua::dbg::DbgConnectRequest* DebuggerToBackend::release_connect() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.DebuggerToBackend.connect)
  if (has_connect()) {
    clear_has_msg();
      ::dse::lua::dbg::DbgConnectRequest* temp = msg_.connect_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.connect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::DbgConnectRequest& DebuggerToBackend::connect() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DebuggerToBackend.connect)
  return has_connect()
      ? *msg_.connect_
      : *reinterpret_cast< ::dse::lua::dbg::DbgConnectRequest*>(&::dse::lua::dbg::_DbgConnectRequest_default_instance_);
}
inline ::dse::lua::dbg::DbgConnectRequest* DebuggerToBackend::unsafe_arena_release_connect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.DebuggerToBackend.connect)
  if (has_connect()) {
    clear_has_msg();
    ::dse::lua::dbg::DbgConnectRequest* temp = msg_.connect_;
    msg_.connect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DebuggerToBackend::unsafe_arena_set_allocated_connect(::dse::lua::dbg::DbgConnectRequest* connect) {
  clear_msg();
  if (connect) {
    set_has_connect();
    msg_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.DebuggerToBackend.connect)
}
inline ::dse::lua::dbg::DbgConnectRequest* DebuggerToBackend::mutable_connect() {
  if (!has_connect()) {
    clear_msg();
    set_has_connect();
    msg_.connect_ = CreateMaybeMessage< ::dse::lua::dbg::DbgConnectRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.DebuggerToBackend.connect)
  return msg_.connect_;
}

// .dse.lua.dbg.DbgUpdateSettings updateSettings = 4;
inline bool DebuggerToBackend::has_updatesettings() const {
  return msg_case() == kUpdateSettings;
}
inline void DebuggerToBackend::set_has_updatesettings() {
  _oneof_case_[0] = kUpdateSettings;
}
inline void DebuggerToBackend::clear_updatesettings() {
  if (has_updatesettings()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.updatesettings_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::DbgUpdateSettings& DebuggerToBackend::_internal_updatesettings() const {
  return *msg_.updatesettings_;
}
inline ::dse::lua::dbg::DbgUpdateSettings* DebuggerToBackend::release_updatesettings() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.DebuggerToBackend.updateSettings)
  if (has_updatesettings()) {
    clear_has_msg();
      ::dse::lua::dbg::DbgUpdateSettings* temp = msg_.updatesettings_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.updatesettings_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::DbgUpdateSettings& DebuggerToBackend::updatesettings() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DebuggerToBackend.updateSettings)
  return has_updatesettings()
      ? *msg_.updatesettings_
      : *reinterpret_cast< ::dse::lua::dbg::DbgUpdateSettings*>(&::dse::lua::dbg::_DbgUpdateSettings_default_instance_);
}
inline ::dse::lua::dbg::DbgUpdateSettings* DebuggerToBackend::unsafe_arena_release_updatesettings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.DebuggerToBackend.updateSettings)
  if (has_updatesettings()) {
    clear_has_msg();
    ::dse::lua::dbg::DbgUpdateSettings* temp = msg_.updatesettings_;
    msg_.updatesettings_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DebuggerToBackend::unsafe_arena_set_allocated_updatesettings(::dse::lua::dbg::DbgUpdateSettings* updatesettings) {
  clear_msg();
  if (updatesettings) {
    set_has_updatesettings();
    msg_.updatesettings_ = updatesettings;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.DebuggerToBackend.updateSettings)
}
inline ::dse::lua::dbg::DbgUpdateSettings* DebuggerToBackend::mutable_updatesettings() {
  if (!has_updatesettings()) {
    clear_msg();
    set_has_updatesettings();
    msg_.updatesettings_ = CreateMaybeMessage< ::dse::lua::dbg::DbgUpdateSettings >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.DebuggerToBackend.updateSettings)
  return msg_.updatesettings_;
}

// .dse.lua.dbg.DbgSetBreakpoints setBreakpoints = 5;
inline bool DebuggerToBackend::has_setbreakpoints() const {
  return msg_case() == kSetBreakpoints;
}
inline void DebuggerToBackend::set_has_setbreakpoints() {
  _oneof_case_[0] = kSetBreakpoints;
}
inline void DebuggerToBackend::clear_setbreakpoints() {
  if (has_setbreakpoints()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.setbreakpoints_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::DbgSetBreakpoints& DebuggerToBackend::_internal_setbreakpoints() const {
  return *msg_.setbreakpoints_;
}
inline ::dse::lua::dbg::DbgSetBreakpoints* DebuggerToBackend::release_setbreakpoints() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.DebuggerToBackend.setBreakpoints)
  if (has_setbreakpoints()) {
    clear_has_msg();
      ::dse::lua::dbg::DbgSetBreakpoints* temp = msg_.setbreakpoints_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.setbreakpoints_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::DbgSetBreakpoints& DebuggerToBackend::setbreakpoints() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DebuggerToBackend.setBreakpoints)
  return has_setbreakpoints()
      ? *msg_.setbreakpoints_
      : *reinterpret_cast< ::dse::lua::dbg::DbgSetBreakpoints*>(&::dse::lua::dbg::_DbgSetBreakpoints_default_instance_);
}
inline ::dse::lua::dbg::DbgSetBreakpoints* DebuggerToBackend::unsafe_arena_release_setbreakpoints() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.DebuggerToBackend.setBreakpoints)
  if (has_setbreakpoints()) {
    clear_has_msg();
    ::dse::lua::dbg::DbgSetBreakpoints* temp = msg_.setbreakpoints_;
    msg_.setbreakpoints_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DebuggerToBackend::unsafe_arena_set_allocated_setbreakpoints(::dse::lua::dbg::DbgSetBreakpoints* setbreakpoints) {
  clear_msg();
  if (setbreakpoints) {
    set_has_setbreakpoints();
    msg_.setbreakpoints_ = setbreakpoints;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.DebuggerToBackend.setBreakpoints)
}
inline ::dse::lua::dbg::DbgSetBreakpoints* DebuggerToBackend::mutable_setbreakpoints() {
  if (!has_setbreakpoints()) {
    clear_msg();
    set_has_setbreakpoints();
    msg_.setbreakpoints_ = CreateMaybeMessage< ::dse::lua::dbg::DbgSetBreakpoints >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.DebuggerToBackend.setBreakpoints)
  return msg_.setbreakpoints_;
}

// .dse.lua.dbg.DbgContinue continue = 6;
inline bool DebuggerToBackend::has_continue_() const {
  return msg_case() == kContinue;
}
inline void DebuggerToBackend::set_has_continue_() {
  _oneof_case_[0] = kContinue;
}
inline void DebuggerToBackend::clear_continue_() {
  if (has_continue_()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.continue__;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::DbgContinue& DebuggerToBackend::_internal_continue_() const {
  return *msg_.continue__;
}
inline ::dse::lua::dbg::DbgContinue* DebuggerToBackend::release_continue_() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.DebuggerToBackend.continue)
  if (has_continue_()) {
    clear_has_msg();
      ::dse::lua::dbg::DbgContinue* temp = msg_.continue__;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.continue__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::DbgContinue& DebuggerToBackend::continue_() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DebuggerToBackend.continue)
  return has_continue_()
      ? *msg_.continue__
      : *reinterpret_cast< ::dse::lua::dbg::DbgContinue*>(&::dse::lua::dbg::_DbgContinue_default_instance_);
}
inline ::dse::lua::dbg::DbgContinue* DebuggerToBackend::unsafe_arena_release_continue_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.DebuggerToBackend.continue)
  if (has_continue_()) {
    clear_has_msg();
    ::dse::lua::dbg::DbgContinue* temp = msg_.continue__;
    msg_.continue__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DebuggerToBackend::unsafe_arena_set_allocated_continue_(::dse::lua::dbg::DbgContinue* continue_) {
  clear_msg();
  if (continue_) {
    set_has_continue_();
    msg_.continue__ = continue_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.DebuggerToBackend.continue)
}
inline ::dse::lua::dbg::DbgContinue* DebuggerToBackend::mutable_continue_() {
  if (!has_continue_()) {
    clear_msg();
    set_has_continue_();
    msg_.continue__ = CreateMaybeMessage< ::dse::lua::dbg::DbgContinue >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.DebuggerToBackend.continue)
  return msg_.continue__;
}

// .dse.lua.dbg.DbgEvaluate evaluate = 7;
inline bool DebuggerToBackend::has_evaluate() const {
  return msg_case() == kEvaluate;
}
inline void DebuggerToBackend::set_has_evaluate() {
  _oneof_case_[0] = kEvaluate;
}
inline void DebuggerToBackend::clear_evaluate() {
  if (has_evaluate()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.evaluate_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::DbgEvaluate& DebuggerToBackend::_internal_evaluate() const {
  return *msg_.evaluate_;
}
inline ::dse::lua::dbg::DbgEvaluate* DebuggerToBackend::release_evaluate() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.DebuggerToBackend.evaluate)
  if (has_evaluate()) {
    clear_has_msg();
      ::dse::lua::dbg::DbgEvaluate* temp = msg_.evaluate_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.evaluate_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::DbgEvaluate& DebuggerToBackend::evaluate() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DebuggerToBackend.evaluate)
  return has_evaluate()
      ? *msg_.evaluate_
      : *reinterpret_cast< ::dse::lua::dbg::DbgEvaluate*>(&::dse::lua::dbg::_DbgEvaluate_default_instance_);
}
inline ::dse::lua::dbg::DbgEvaluate* DebuggerToBackend::unsafe_arena_release_evaluate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.DebuggerToBackend.evaluate)
  if (has_evaluate()) {
    clear_has_msg();
    ::dse::lua::dbg::DbgEvaluate* temp = msg_.evaluate_;
    msg_.evaluate_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DebuggerToBackend::unsafe_arena_set_allocated_evaluate(::dse::lua::dbg::DbgEvaluate* evaluate) {
  clear_msg();
  if (evaluate) {
    set_has_evaluate();
    msg_.evaluate_ = evaluate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.DebuggerToBackend.evaluate)
}
inline ::dse::lua::dbg::DbgEvaluate* DebuggerToBackend::mutable_evaluate() {
  if (!has_evaluate()) {
    clear_msg();
    set_has_evaluate();
    msg_.evaluate_ = CreateMaybeMessage< ::dse::lua::dbg::DbgEvaluate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.DebuggerToBackend.evaluate)
  return msg_.evaluate_;
}

// .dse.lua.dbg.DbgFetchMods fetchMods = 8;
inline bool DebuggerToBackend::has_fetchmods() const {
  return msg_case() == kFetchMods;
}
inline void DebuggerToBackend::set_has_fetchmods() {
  _oneof_case_[0] = kFetchMods;
}
inline void DebuggerToBackend::clear_fetchmods() {
  if (has_fetchmods()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.fetchmods_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::DbgFetchMods& DebuggerToBackend::_internal_fetchmods() const {
  return *msg_.fetchmods_;
}
inline ::dse::lua::dbg::DbgFetchMods* DebuggerToBackend::release_fetchmods() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.DebuggerToBackend.fetchMods)
  if (has_fetchmods()) {
    clear_has_msg();
      ::dse::lua::dbg::DbgFetchMods* temp = msg_.fetchmods_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.fetchmods_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::DbgFetchMods& DebuggerToBackend::fetchmods() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DebuggerToBackend.fetchMods)
  return has_fetchmods()
      ? *msg_.fetchmods_
      : *reinterpret_cast< ::dse::lua::dbg::DbgFetchMods*>(&::dse::lua::dbg::_DbgFetchMods_default_instance_);
}
inline ::dse::lua::dbg::DbgFetchMods* DebuggerToBackend::unsafe_arena_release_fetchmods() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.DebuggerToBackend.fetchMods)
  if (has_fetchmods()) {
    clear_has_msg();
    ::dse::lua::dbg::DbgFetchMods* temp = msg_.fetchmods_;
    msg_.fetchmods_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DebuggerToBackend::unsafe_arena_set_allocated_fetchmods(::dse::lua::dbg::DbgFetchMods* fetchmods) {
  clear_msg();
  if (fetchmods) {
    set_has_fetchmods();
    msg_.fetchmods_ = fetchmods;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.DebuggerToBackend.fetchMods)
}
inline ::dse::lua::dbg::DbgFetchMods* DebuggerToBackend::mutable_fetchmods() {
  if (!has_fetchmods()) {
    clear_msg();
    set_has_fetchmods();
    msg_.fetchmods_ = CreateMaybeMessage< ::dse::lua::dbg::DbgFetchMods >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.DebuggerToBackend.fetchMods)
  return msg_.fetchmods_;
}

// .dse.lua.dbg.DbgRequestSource requestSource = 9;
inline bool DebuggerToBackend::has_requestsource() const {
  return msg_case() == kRequestSource;
}
inline void DebuggerToBackend::set_has_requestsource() {
  _oneof_case_[0] = kRequestSource;
}
inline void DebuggerToBackend::clear_requestsource() {
  if (has_requestsource()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.requestsource_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::DbgRequestSource& DebuggerToBackend::_internal_requestsource() const {
  return *msg_.requestsource_;
}
inline ::dse::lua::dbg::DbgRequestSource* DebuggerToBackend::release_requestsource() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.DebuggerToBackend.requestSource)
  if (has_requestsource()) {
    clear_has_msg();
      ::dse::lua::dbg::DbgRequestSource* temp = msg_.requestsource_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.requestsource_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::DbgRequestSource& DebuggerToBackend::requestsource() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DebuggerToBackend.requestSource)
  return has_requestsource()
      ? *msg_.requestsource_
      : *reinterpret_cast< ::dse::lua::dbg::DbgRequestSource*>(&::dse::lua::dbg::_DbgRequestSource_default_instance_);
}
inline ::dse::lua::dbg::DbgRequestSource* DebuggerToBackend::unsafe_arena_release_requestsource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.DebuggerToBackend.requestSource)
  if (has_requestsource()) {
    clear_has_msg();
    ::dse::lua::dbg::DbgRequestSource* temp = msg_.requestsource_;
    msg_.requestsource_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DebuggerToBackend::unsafe_arena_set_allocated_requestsource(::dse::lua::dbg::DbgRequestSource* requestsource) {
  clear_msg();
  if (requestsource) {
    set_has_requestsource();
    msg_.requestsource_ = requestsource;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.DebuggerToBackend.requestSource)
}
inline ::dse::lua::dbg::DbgRequestSource* DebuggerToBackend::mutable_requestsource() {
  if (!has_requestsource()) {
    clear_msg();
    set_has_requestsource();
    msg_.requestsource_ = CreateMaybeMessage< ::dse::lua::dbg::DbgRequestSource >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.DebuggerToBackend.requestSource)
  return msg_.requestsource_;
}

// .dse.lua.dbg.DbgGetVariables getVariables = 10;
inline bool DebuggerToBackend::has_getvariables() const {
  return msg_case() == kGetVariables;
}
inline void DebuggerToBackend::set_has_getvariables() {
  _oneof_case_[0] = kGetVariables;
}
inline void DebuggerToBackend::clear_getvariables() {
  if (has_getvariables()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.getvariables_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::DbgGetVariables& DebuggerToBackend::_internal_getvariables() const {
  return *msg_.getvariables_;
}
inline ::dse::lua::dbg::DbgGetVariables* DebuggerToBackend::release_getvariables() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.DebuggerToBackend.getVariables)
  if (has_getvariables()) {
    clear_has_msg();
      ::dse::lua::dbg::DbgGetVariables* temp = msg_.getvariables_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.getvariables_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::DbgGetVariables& DebuggerToBackend::getvariables() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.DebuggerToBackend.getVariables)
  return has_getvariables()
      ? *msg_.getvariables_
      : *reinterpret_cast< ::dse::lua::dbg::DbgGetVariables*>(&::dse::lua::dbg::_DbgGetVariables_default_instance_);
}
inline ::dse::lua::dbg::DbgGetVariables* DebuggerToBackend::unsafe_arena_release_getvariables() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.DebuggerToBackend.getVariables)
  if (has_getvariables()) {
    clear_has_msg();
    ::dse::lua::dbg::DbgGetVariables* temp = msg_.getvariables_;
    msg_.getvariables_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DebuggerToBackend::unsafe_arena_set_allocated_getvariables(::dse::lua::dbg::DbgGetVariables* getvariables) {
  clear_msg();
  if (getvariables) {
    set_has_getvariables();
    msg_.getvariables_ = getvariables;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.DebuggerToBackend.getVariables)
}
inline ::dse::lua::dbg::DbgGetVariables* DebuggerToBackend::mutable_getvariables() {
  if (!has_getvariables()) {
    clear_msg();
    set_has_getvariables();
    msg_.getvariables_ = CreateMaybeMessage< ::dse::lua::dbg::DbgGetVariables >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.DebuggerToBackend.getVariables)
  return msg_.getvariables_;
}

inline bool DebuggerToBackend::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void DebuggerToBackend::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline DebuggerToBackend::MsgCase DebuggerToBackend::msg_case() const {
  return DebuggerToBackend::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BackendToDebugger

// uint32 seq_no = 1;
inline void BackendToDebugger::clear_seq_no() {
  seq_no_ = 0u;
}
inline ::google::protobuf::uint32 BackendToDebugger::seq_no() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BackendToDebugger.seq_no)
  return seq_no_;
}
inline void BackendToDebugger::set_seq_no(::google::protobuf::uint32 value) {
  
  seq_no_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.BackendToDebugger.seq_no)
}

// uint32 reply_seq_no = 2;
inline void BackendToDebugger::clear_reply_seq_no() {
  reply_seq_no_ = 0u;
}
inline ::google::protobuf::uint32 BackendToDebugger::reply_seq_no() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BackendToDebugger.reply_seq_no)
  return reply_seq_no_;
}
inline void BackendToDebugger::set_reply_seq_no(::google::protobuf::uint32 value) {
  
  reply_seq_no_ = value;
  // @@protoc_insertion_point(field_set:dse.lua.dbg.BackendToDebugger.reply_seq_no)
}

// .dse.lua.dbg.BkConnectResponse connectResponse = 3;
inline bool BackendToDebugger::has_connectresponse() const {
  return msg_case() == kConnectResponse;
}
inline void BackendToDebugger::set_has_connectresponse() {
  _oneof_case_[0] = kConnectResponse;
}
inline void BackendToDebugger::clear_connectresponse() {
  if (has_connectresponse()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.connectresponse_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::BkConnectResponse& BackendToDebugger::_internal_connectresponse() const {
  return *msg_.connectresponse_;
}
inline ::dse::lua::dbg::BkConnectResponse* BackendToDebugger::release_connectresponse() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BackendToDebugger.connectResponse)
  if (has_connectresponse()) {
    clear_has_msg();
      ::dse::lua::dbg::BkConnectResponse* temp = msg_.connectresponse_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.connectresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::BkConnectResponse& BackendToDebugger::connectresponse() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BackendToDebugger.connectResponse)
  return has_connectresponse()
      ? *msg_.connectresponse_
      : *reinterpret_cast< ::dse::lua::dbg::BkConnectResponse*>(&::dse::lua::dbg::_BkConnectResponse_default_instance_);
}
inline ::dse::lua::dbg::BkConnectResponse* BackendToDebugger::unsafe_arena_release_connectresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BackendToDebugger.connectResponse)
  if (has_connectresponse()) {
    clear_has_msg();
    ::dse::lua::dbg::BkConnectResponse* temp = msg_.connectresponse_;
    msg_.connectresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_connectresponse(::dse::lua::dbg::BkConnectResponse* connectresponse) {
  clear_msg();
  if (connectresponse) {
    set_has_connectresponse();
    msg_.connectresponse_ = connectresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BackendToDebugger.connectResponse)
}
inline ::dse::lua::dbg::BkConnectResponse* BackendToDebugger::mutable_connectresponse() {
  if (!has_connectresponse()) {
    clear_msg();
    set_has_connectresponse();
    msg_.connectresponse_ = CreateMaybeMessage< ::dse::lua::dbg::BkConnectResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BackendToDebugger.connectResponse)
  return msg_.connectresponse_;
}

// .dse.lua.dbg.BkBreakpointTriggered breakpointTriggered = 4;
inline bool BackendToDebugger::has_breakpointtriggered() const {
  return msg_case() == kBreakpointTriggered;
}
inline void BackendToDebugger::set_has_breakpointtriggered() {
  _oneof_case_[0] = kBreakpointTriggered;
}
inline void BackendToDebugger::clear_breakpointtriggered() {
  if (has_breakpointtriggered()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.breakpointtriggered_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::BkBreakpointTriggered& BackendToDebugger::_internal_breakpointtriggered() const {
  return *msg_.breakpointtriggered_;
}
inline ::dse::lua::dbg::BkBreakpointTriggered* BackendToDebugger::release_breakpointtriggered() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BackendToDebugger.breakpointTriggered)
  if (has_breakpointtriggered()) {
    clear_has_msg();
      ::dse::lua::dbg::BkBreakpointTriggered* temp = msg_.breakpointtriggered_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.breakpointtriggered_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::BkBreakpointTriggered& BackendToDebugger::breakpointtriggered() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BackendToDebugger.breakpointTriggered)
  return has_breakpointtriggered()
      ? *msg_.breakpointtriggered_
      : *reinterpret_cast< ::dse::lua::dbg::BkBreakpointTriggered*>(&::dse::lua::dbg::_BkBreakpointTriggered_default_instance_);
}
inline ::dse::lua::dbg::BkBreakpointTriggered* BackendToDebugger::unsafe_arena_release_breakpointtriggered() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BackendToDebugger.breakpointTriggered)
  if (has_breakpointtriggered()) {
    clear_has_msg();
    ::dse::lua::dbg::BkBreakpointTriggered* temp = msg_.breakpointtriggered_;
    msg_.breakpointtriggered_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_breakpointtriggered(::dse::lua::dbg::BkBreakpointTriggered* breakpointtriggered) {
  clear_msg();
  if (breakpointtriggered) {
    set_has_breakpointtriggered();
    msg_.breakpointtriggered_ = breakpointtriggered;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BackendToDebugger.breakpointTriggered)
}
inline ::dse::lua::dbg::BkBreakpointTriggered* BackendToDebugger::mutable_breakpointtriggered() {
  if (!has_breakpointtriggered()) {
    clear_msg();
    set_has_breakpointtriggered();
    msg_.breakpointtriggered_ = CreateMaybeMessage< ::dse::lua::dbg::BkBreakpointTriggered >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BackendToDebugger.breakpointTriggered)
  return msg_.breakpointtriggered_;
}

// .dse.lua.dbg.BkEvaluateResponse evaluateResponse = 5;
inline bool BackendToDebugger::has_evaluateresponse() const {
  return msg_case() == kEvaluateResponse;
}
inline void BackendToDebugger::set_has_evaluateresponse() {
  _oneof_case_[0] = kEvaluateResponse;
}
inline void BackendToDebugger::clear_evaluateresponse() {
  if (has_evaluateresponse()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.evaluateresponse_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::BkEvaluateResponse& BackendToDebugger::_internal_evaluateresponse() const {
  return *msg_.evaluateresponse_;
}
inline ::dse::lua::dbg::BkEvaluateResponse* BackendToDebugger::release_evaluateresponse() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BackendToDebugger.evaluateResponse)
  if (has_evaluateresponse()) {
    clear_has_msg();
      ::dse::lua::dbg::BkEvaluateResponse* temp = msg_.evaluateresponse_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.evaluateresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::BkEvaluateResponse& BackendToDebugger::evaluateresponse() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BackendToDebugger.evaluateResponse)
  return has_evaluateresponse()
      ? *msg_.evaluateresponse_
      : *reinterpret_cast< ::dse::lua::dbg::BkEvaluateResponse*>(&::dse::lua::dbg::_BkEvaluateResponse_default_instance_);
}
inline ::dse::lua::dbg::BkEvaluateResponse* BackendToDebugger::unsafe_arena_release_evaluateresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BackendToDebugger.evaluateResponse)
  if (has_evaluateresponse()) {
    clear_has_msg();
    ::dse::lua::dbg::BkEvaluateResponse* temp = msg_.evaluateresponse_;
    msg_.evaluateresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_evaluateresponse(::dse::lua::dbg::BkEvaluateResponse* evaluateresponse) {
  clear_msg();
  if (evaluateresponse) {
    set_has_evaluateresponse();
    msg_.evaluateresponse_ = evaluateresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BackendToDebugger.evaluateResponse)
}
inline ::dse::lua::dbg::BkEvaluateResponse* BackendToDebugger::mutable_evaluateresponse() {
  if (!has_evaluateresponse()) {
    clear_msg();
    set_has_evaluateresponse();
    msg_.evaluateresponse_ = CreateMaybeMessage< ::dse::lua::dbg::BkEvaluateResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BackendToDebugger.evaluateResponse)
  return msg_.evaluateresponse_;
}

// .dse.lua.dbg.BkContextUpdated contextUpdated = 6;
inline bool BackendToDebugger::has_contextupdated() const {
  return msg_case() == kContextUpdated;
}
inline void BackendToDebugger::set_has_contextupdated() {
  _oneof_case_[0] = kContextUpdated;
}
inline void BackendToDebugger::clear_contextupdated() {
  if (has_contextupdated()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.contextupdated_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::BkContextUpdated& BackendToDebugger::_internal_contextupdated() const {
  return *msg_.contextupdated_;
}
inline ::dse::lua::dbg::BkContextUpdated* BackendToDebugger::release_contextupdated() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BackendToDebugger.contextUpdated)
  if (has_contextupdated()) {
    clear_has_msg();
      ::dse::lua::dbg::BkContextUpdated* temp = msg_.contextupdated_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.contextupdated_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::BkContextUpdated& BackendToDebugger::contextupdated() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BackendToDebugger.contextUpdated)
  return has_contextupdated()
      ? *msg_.contextupdated_
      : *reinterpret_cast< ::dse::lua::dbg::BkContextUpdated*>(&::dse::lua::dbg::_BkContextUpdated_default_instance_);
}
inline ::dse::lua::dbg::BkContextUpdated* BackendToDebugger::unsafe_arena_release_contextupdated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BackendToDebugger.contextUpdated)
  if (has_contextupdated()) {
    clear_has_msg();
    ::dse::lua::dbg::BkContextUpdated* temp = msg_.contextupdated_;
    msg_.contextupdated_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_contextupdated(::dse::lua::dbg::BkContextUpdated* contextupdated) {
  clear_msg();
  if (contextupdated) {
    set_has_contextupdated();
    msg_.contextupdated_ = contextupdated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BackendToDebugger.contextUpdated)
}
inline ::dse::lua::dbg::BkContextUpdated* BackendToDebugger::mutable_contextupdated() {
  if (!has_contextupdated()) {
    clear_msg();
    set_has_contextupdated();
    msg_.contextupdated_ = CreateMaybeMessage< ::dse::lua::dbg::BkContextUpdated >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BackendToDebugger.contextUpdated)
  return msg_.contextupdated_;
}

// .dse.lua.dbg.BkModInfoResponse modInfoResponse = 7;
inline bool BackendToDebugger::has_modinforesponse() const {
  return msg_case() == kModInfoResponse;
}
inline void BackendToDebugger::set_has_modinforesponse() {
  _oneof_case_[0] = kModInfoResponse;
}
inline void BackendToDebugger::clear_modinforesponse() {
  if (has_modinforesponse()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.modinforesponse_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::BkModInfoResponse& BackendToDebugger::_internal_modinforesponse() const {
  return *msg_.modinforesponse_;
}
inline ::dse::lua::dbg::BkModInfoResponse* BackendToDebugger::release_modinforesponse() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BackendToDebugger.modInfoResponse)
  if (has_modinforesponse()) {
    clear_has_msg();
      ::dse::lua::dbg::BkModInfoResponse* temp = msg_.modinforesponse_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.modinforesponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::BkModInfoResponse& BackendToDebugger::modinforesponse() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BackendToDebugger.modInfoResponse)
  return has_modinforesponse()
      ? *msg_.modinforesponse_
      : *reinterpret_cast< ::dse::lua::dbg::BkModInfoResponse*>(&::dse::lua::dbg::_BkModInfoResponse_default_instance_);
}
inline ::dse::lua::dbg::BkModInfoResponse* BackendToDebugger::unsafe_arena_release_modinforesponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BackendToDebugger.modInfoResponse)
  if (has_modinforesponse()) {
    clear_has_msg();
    ::dse::lua::dbg::BkModInfoResponse* temp = msg_.modinforesponse_;
    msg_.modinforesponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_modinforesponse(::dse::lua::dbg::BkModInfoResponse* modinforesponse) {
  clear_msg();
  if (modinforesponse) {
    set_has_modinforesponse();
    msg_.modinforesponse_ = modinforesponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BackendToDebugger.modInfoResponse)
}
inline ::dse::lua::dbg::BkModInfoResponse* BackendToDebugger::mutable_modinforesponse() {
  if (!has_modinforesponse()) {
    clear_msg();
    set_has_modinforesponse();
    msg_.modinforesponse_ = CreateMaybeMessage< ::dse::lua::dbg::BkModInfoResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BackendToDebugger.modInfoResponse)
  return msg_.modinforesponse_;
}

// .dse.lua.dbg.BkDebugOutput debugOutput = 8;
inline bool BackendToDebugger::has_debugoutput() const {
  return msg_case() == kDebugOutput;
}
inline void BackendToDebugger::set_has_debugoutput() {
  _oneof_case_[0] = kDebugOutput;
}
inline void BackendToDebugger::clear_debugoutput() {
  if (has_debugoutput()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.debugoutput_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::BkDebugOutput& BackendToDebugger::_internal_debugoutput() const {
  return *msg_.debugoutput_;
}
inline ::dse::lua::dbg::BkDebugOutput* BackendToDebugger::release_debugoutput() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BackendToDebugger.debugOutput)
  if (has_debugoutput()) {
    clear_has_msg();
      ::dse::lua::dbg::BkDebugOutput* temp = msg_.debugoutput_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.debugoutput_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::BkDebugOutput& BackendToDebugger::debugoutput() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BackendToDebugger.debugOutput)
  return has_debugoutput()
      ? *msg_.debugoutput_
      : *reinterpret_cast< ::dse::lua::dbg::BkDebugOutput*>(&::dse::lua::dbg::_BkDebugOutput_default_instance_);
}
inline ::dse::lua::dbg::BkDebugOutput* BackendToDebugger::unsafe_arena_release_debugoutput() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BackendToDebugger.debugOutput)
  if (has_debugoutput()) {
    clear_has_msg();
    ::dse::lua::dbg::BkDebugOutput* temp = msg_.debugoutput_;
    msg_.debugoutput_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_debugoutput(::dse::lua::dbg::BkDebugOutput* debugoutput) {
  clear_msg();
  if (debugoutput) {
    set_has_debugoutput();
    msg_.debugoutput_ = debugoutput;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BackendToDebugger.debugOutput)
}
inline ::dse::lua::dbg::BkDebugOutput* BackendToDebugger::mutable_debugoutput() {
  if (!has_debugoutput()) {
    clear_msg();
    set_has_debugoutput();
    msg_.debugoutput_ = CreateMaybeMessage< ::dse::lua::dbg::BkDebugOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BackendToDebugger.debugOutput)
  return msg_.debugoutput_;
}

// .dse.lua.dbg.BkResult results = 9;
inline bool BackendToDebugger::has_results() const {
  return msg_case() == kResults;
}
inline void BackendToDebugger::set_has_results() {
  _oneof_case_[0] = kResults;
}
inline void BackendToDebugger::clear_results() {
  if (has_results()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.results_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::BkResult& BackendToDebugger::_internal_results() const {
  return *msg_.results_;
}
inline ::dse::lua::dbg::BkResult* BackendToDebugger::release_results() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BackendToDebugger.results)
  if (has_results()) {
    clear_has_msg();
      ::dse::lua::dbg::BkResult* temp = msg_.results_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.results_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::BkResult& BackendToDebugger::results() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BackendToDebugger.results)
  return has_results()
      ? *msg_.results_
      : *reinterpret_cast< ::dse::lua::dbg::BkResult*>(&::dse::lua::dbg::_BkResult_default_instance_);
}
inline ::dse::lua::dbg::BkResult* BackendToDebugger::unsafe_arena_release_results() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BackendToDebugger.results)
  if (has_results()) {
    clear_has_msg();
    ::dse::lua::dbg::BkResult* temp = msg_.results_;
    msg_.results_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_results(::dse::lua::dbg::BkResult* results) {
  clear_msg();
  if (results) {
    set_has_results();
    msg_.results_ = results;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BackendToDebugger.results)
}
inline ::dse::lua::dbg::BkResult* BackendToDebugger::mutable_results() {
  if (!has_results()) {
    clear_msg();
    set_has_results();
    msg_.results_ = CreateMaybeMessage< ::dse::lua::dbg::BkResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BackendToDebugger.results)
  return msg_.results_;
}

// .dse.lua.dbg.BkDebuggerReady debuggerReady = 10;
inline bool BackendToDebugger::has_debuggerready() const {
  return msg_case() == kDebuggerReady;
}
inline void BackendToDebugger::set_has_debuggerready() {
  _oneof_case_[0] = kDebuggerReady;
}
inline void BackendToDebugger::clear_debuggerready() {
  if (has_debuggerready()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.debuggerready_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::BkDebuggerReady& BackendToDebugger::_internal_debuggerready() const {
  return *msg_.debuggerready_;
}
inline ::dse::lua::dbg::BkDebuggerReady* BackendToDebugger::release_debuggerready() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BackendToDebugger.debuggerReady)
  if (has_debuggerready()) {
    clear_has_msg();
      ::dse::lua::dbg::BkDebuggerReady* temp = msg_.debuggerready_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.debuggerready_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::BkDebuggerReady& BackendToDebugger::debuggerready() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BackendToDebugger.debuggerReady)
  return has_debuggerready()
      ? *msg_.debuggerready_
      : *reinterpret_cast< ::dse::lua::dbg::BkDebuggerReady*>(&::dse::lua::dbg::_BkDebuggerReady_default_instance_);
}
inline ::dse::lua::dbg::BkDebuggerReady* BackendToDebugger::unsafe_arena_release_debuggerready() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BackendToDebugger.debuggerReady)
  if (has_debuggerready()) {
    clear_has_msg();
    ::dse::lua::dbg::BkDebuggerReady* temp = msg_.debuggerready_;
    msg_.debuggerready_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_debuggerready(::dse::lua::dbg::BkDebuggerReady* debuggerready) {
  clear_msg();
  if (debuggerready) {
    set_has_debuggerready();
    msg_.debuggerready_ = debuggerready;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BackendToDebugger.debuggerReady)
}
inline ::dse::lua::dbg::BkDebuggerReady* BackendToDebugger::mutable_debuggerready() {
  if (!has_debuggerready()) {
    clear_msg();
    set_has_debuggerready();
    msg_.debuggerready_ = CreateMaybeMessage< ::dse::lua::dbg::BkDebuggerReady >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BackendToDebugger.debuggerReady)
  return msg_.debuggerready_;
}

// .dse.lua.dbg.BkSourceResponse sourceResponse = 11;
inline bool BackendToDebugger::has_sourceresponse() const {
  return msg_case() == kSourceResponse;
}
inline void BackendToDebugger::set_has_sourceresponse() {
  _oneof_case_[0] = kSourceResponse;
}
inline void BackendToDebugger::clear_sourceresponse() {
  if (has_sourceresponse()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.sourceresponse_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::BkSourceResponse& BackendToDebugger::_internal_sourceresponse() const {
  return *msg_.sourceresponse_;
}
inline ::dse::lua::dbg::BkSourceResponse* BackendToDebugger::release_sourceresponse() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BackendToDebugger.sourceResponse)
  if (has_sourceresponse()) {
    clear_has_msg();
      ::dse::lua::dbg::BkSourceResponse* temp = msg_.sourceresponse_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.sourceresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::BkSourceResponse& BackendToDebugger::sourceresponse() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BackendToDebugger.sourceResponse)
  return has_sourceresponse()
      ? *msg_.sourceresponse_
      : *reinterpret_cast< ::dse::lua::dbg::BkSourceResponse*>(&::dse::lua::dbg::_BkSourceResponse_default_instance_);
}
inline ::dse::lua::dbg::BkSourceResponse* BackendToDebugger::unsafe_arena_release_sourceresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BackendToDebugger.sourceResponse)
  if (has_sourceresponse()) {
    clear_has_msg();
    ::dse::lua::dbg::BkSourceResponse* temp = msg_.sourceresponse_;
    msg_.sourceresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_sourceresponse(::dse::lua::dbg::BkSourceResponse* sourceresponse) {
  clear_msg();
  if (sourceresponse) {
    set_has_sourceresponse();
    msg_.sourceresponse_ = sourceresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BackendToDebugger.sourceResponse)
}
inline ::dse::lua::dbg::BkSourceResponse* BackendToDebugger::mutable_sourceresponse() {
  if (!has_sourceresponse()) {
    clear_msg();
    set_has_sourceresponse();
    msg_.sourceresponse_ = CreateMaybeMessage< ::dse::lua::dbg::BkSourceResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BackendToDebugger.sourceResponse)
  return msg_.sourceresponse_;
}

// .dse.lua.dbg.BkGetVariablesResponse getVariablesResponse = 12;
inline bool BackendToDebugger::has_getvariablesresponse() const {
  return msg_case() == kGetVariablesResponse;
}
inline void BackendToDebugger::set_has_getvariablesresponse() {
  _oneof_case_[0] = kGetVariablesResponse;
}
inline void BackendToDebugger::clear_getvariablesresponse() {
  if (has_getvariablesresponse()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.getvariablesresponse_;
    }
    clear_has_msg();
  }
}
inline const ::dse::lua::dbg::BkGetVariablesResponse& BackendToDebugger::_internal_getvariablesresponse() const {
  return *msg_.getvariablesresponse_;
}
inline ::dse::lua::dbg::BkGetVariablesResponse* BackendToDebugger::release_getvariablesresponse() {
  // @@protoc_insertion_point(field_release:dse.lua.dbg.BackendToDebugger.getVariablesResponse)
  if (has_getvariablesresponse()) {
    clear_has_msg();
      ::dse::lua::dbg::BkGetVariablesResponse* temp = msg_.getvariablesresponse_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.getvariablesresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::lua::dbg::BkGetVariablesResponse& BackendToDebugger::getvariablesresponse() const {
  // @@protoc_insertion_point(field_get:dse.lua.dbg.BackendToDebugger.getVariablesResponse)
  return has_getvariablesresponse()
      ? *msg_.getvariablesresponse_
      : *reinterpret_cast< ::dse::lua::dbg::BkGetVariablesResponse*>(&::dse::lua::dbg::_BkGetVariablesResponse_default_instance_);
}
inline ::dse::lua::dbg::BkGetVariablesResponse* BackendToDebugger::unsafe_arena_release_getvariablesresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.lua.dbg.BackendToDebugger.getVariablesResponse)
  if (has_getvariablesresponse()) {
    clear_has_msg();
    ::dse::lua::dbg::BkGetVariablesResponse* temp = msg_.getvariablesresponse_;
    msg_.getvariablesresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_getvariablesresponse(::dse::lua::dbg::BkGetVariablesResponse* getvariablesresponse) {
  clear_msg();
  if (getvariablesresponse) {
    set_has_getvariablesresponse();
    msg_.getvariablesresponse_ = getvariablesresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.lua.dbg.BackendToDebugger.getVariablesResponse)
}
inline ::dse::lua::dbg::BkGetVariablesResponse* BackendToDebugger::mutable_getvariablesresponse() {
  if (!has_getvariablesresponse()) {
    clear_msg();
    set_has_getvariablesresponse();
    msg_.getvariablesresponse_ = CreateMaybeMessage< ::dse::lua::dbg::BkGetVariablesResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.lua.dbg.BackendToDebugger.getVariablesResponse)
  return msg_.getvariablesresponse_;
}

inline bool BackendToDebugger::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void BackendToDebugger::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline BackendToDebugger::MsgCase BackendToDebugger::msg_case() const {
  return BackendToDebugger::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbg
}  // namespace lua
}  // namespace dse

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dse::lua::dbg::MsgTableKey_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::lua::dbg::MsgChildValue_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::lua::dbg::BkBreakpointTriggered_Reason> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::lua::dbg::DbgContinue_Action> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::lua::dbg::BkContextUpdated_Status> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::lua::dbg::BkDebugOutput_Severity> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::lua::dbg::StatusCode> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::lua::dbg::DbgContext> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::lua::dbg::MsgValueType> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_LuaDebug_2eproto
