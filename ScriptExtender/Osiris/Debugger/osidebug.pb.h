// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osidebug.proto

#ifndef PROTOBUF_INCLUDED_osidebug_2eproto
#define PROTOBUF_INCLUDED_osidebug_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_osidebug_2eproto 

namespace protobuf_osidebug_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[32];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_osidebug_2eproto
namespace dse {
namespace osidbg {
class BackendToDebugger;
class BackendToDebuggerDefaultTypeInternal;
extern BackendToDebuggerDefaultTypeInternal _BackendToDebugger_default_instance_;
class BkBeginDatabaseContents;
class BkBeginDatabaseContentsDefaultTypeInternal;
extern BkBeginDatabaseContentsDefaultTypeInternal _BkBeginDatabaseContents_default_instance_;
class BkBreakpointTriggered;
class BkBreakpointTriggeredDefaultTypeInternal;
extern BkBreakpointTriggeredDefaultTypeInternal _BkBreakpointTriggered_default_instance_;
class BkDatabaseRow;
class BkDatabaseRowDefaultTypeInternal;
extern BkDatabaseRowDefaultTypeInternal _BkDatabaseRow_default_instance_;
class BkDebugOutput;
class BkDebugOutputDefaultTypeInternal;
extern BkDebugOutputDefaultTypeInternal _BkDebugOutput_default_instance_;
class BkDebugSessionEnded;
class BkDebugSessionEndedDefaultTypeInternal;
extern BkDebugSessionEndedDefaultTypeInternal _BkDebugSessionEnded_default_instance_;
class BkEndDatabaseContents;
class BkEndDatabaseContentsDefaultTypeInternal;
extern BkEndDatabaseContentsDefaultTypeInternal _BkEndDatabaseContents_default_instance_;
class BkEvaluateFinished;
class BkEvaluateFinishedDefaultTypeInternal;
extern BkEvaluateFinishedDefaultTypeInternal _BkEvaluateFinished_default_instance_;
class BkEvaluateRow;
class BkEvaluateRowDefaultTypeInternal;
extern BkEvaluateRowDefaultTypeInternal _BkEvaluateRow_default_instance_;
class BkGlobalBreakpointTriggered;
class BkGlobalBreakpointTriggeredDefaultTypeInternal;
extern BkGlobalBreakpointTriggeredDefaultTypeInternal _BkGlobalBreakpointTriggered_default_instance_;
class BkResult;
class BkResultDefaultTypeInternal;
extern BkResultDefaultTypeInternal _BkResult_default_instance_;
class BkStoryLoaded;
class BkStoryLoadedDefaultTypeInternal;
extern BkStoryLoadedDefaultTypeInternal _BkStoryLoaded_default_instance_;
class BkSyncStoryData;
class BkSyncStoryDataDefaultTypeInternal;
extern BkSyncStoryDataDefaultTypeInternal _BkSyncStoryData_default_instance_;
class BkSyncStoryFinished;
class BkSyncStoryFinishedDefaultTypeInternal;
extern BkSyncStoryFinishedDefaultTypeInternal _BkSyncStoryFinished_default_instance_;
class BkVersionInfoResponse;
class BkVersionInfoResponseDefaultTypeInternal;
extern BkVersionInfoResponseDefaultTypeInternal _BkVersionInfoResponse_default_instance_;
class DbgContinue;
class DbgContinueDefaultTypeInternal;
extern DbgContinueDefaultTypeInternal _DbgContinue_default_instance_;
class DbgEvaluate;
class DbgEvaluateDefaultTypeInternal;
extern DbgEvaluateDefaultTypeInternal _DbgEvaluate_default_instance_;
class DbgGetDatabaseContents;
class DbgGetDatabaseContentsDefaultTypeInternal;
extern DbgGetDatabaseContentsDefaultTypeInternal _DbgGetDatabaseContents_default_instance_;
class DbgIdentifyRequest;
class DbgIdentifyRequestDefaultTypeInternal;
extern DbgIdentifyRequestDefaultTypeInternal _DbgIdentifyRequest_default_instance_;
class DbgSetBreakpoints;
class DbgSetBreakpointsDefaultTypeInternal;
extern DbgSetBreakpointsDefaultTypeInternal _DbgSetBreakpoints_default_instance_;
class DbgSetGlobalBreakpoints;
class DbgSetGlobalBreakpointsDefaultTypeInternal;
extern DbgSetGlobalBreakpointsDefaultTypeInternal _DbgSetGlobalBreakpoints_default_instance_;
class DbgSyncStory;
class DbgSyncStoryDefaultTypeInternal;
extern DbgSyncStoryDefaultTypeInternal _DbgSyncStory_default_instance_;
class DebuggerToBackend;
class DebuggerToBackendDefaultTypeInternal;
extern DebuggerToBackendDefaultTypeInternal _DebuggerToBackend_default_instance_;
class MsgActionInfo;
class MsgActionInfoDefaultTypeInternal;
extern MsgActionInfoDefaultTypeInternal _MsgActionInfo_default_instance_;
class MsgBreakpoint;
class MsgBreakpointDefaultTypeInternal;
extern MsgBreakpointDefaultTypeInternal _MsgBreakpoint_default_instance_;
class MsgDatabaseInfo;
class MsgDatabaseInfoDefaultTypeInternal;
extern MsgDatabaseInfoDefaultTypeInternal _MsgDatabaseInfo_default_instance_;
class MsgFrame;
class MsgFrameDefaultTypeInternal;
extern MsgFrameDefaultTypeInternal _MsgFrame_default_instance_;
class MsgGoalInfo;
class MsgGoalInfoDefaultTypeInternal;
extern MsgGoalInfoDefaultTypeInternal _MsgGoalInfo_default_instance_;
class MsgNodeInfo;
class MsgNodeInfoDefaultTypeInternal;
extern MsgNodeInfoDefaultTypeInternal _MsgNodeInfo_default_instance_;
class MsgRuleInfo;
class MsgRuleInfoDefaultTypeInternal;
extern MsgRuleInfoDefaultTypeInternal _MsgRuleInfo_default_instance_;
class MsgTuple;
class MsgTupleDefaultTypeInternal;
extern MsgTupleDefaultTypeInternal _MsgTuple_default_instance_;
class MsgTypedValue;
class MsgTypedValueDefaultTypeInternal;
extern MsgTypedValueDefaultTypeInternal _MsgTypedValue_default_instance_;
}  // namespace osidbg
}  // namespace dse
namespace google {
namespace protobuf {
template<> ::dse::osidbg::BackendToDebugger* Arena::CreateMaybeMessage<::dse::osidbg::BackendToDebugger>(Arena*);
template<> ::dse::osidbg::BkBeginDatabaseContents* Arena::CreateMaybeMessage<::dse::osidbg::BkBeginDatabaseContents>(Arena*);
template<> ::dse::osidbg::BkBreakpointTriggered* Arena::CreateMaybeMessage<::dse::osidbg::BkBreakpointTriggered>(Arena*);
template<> ::dse::osidbg::BkDatabaseRow* Arena::CreateMaybeMessage<::dse::osidbg::BkDatabaseRow>(Arena*);
template<> ::dse::osidbg::BkDebugOutput* Arena::CreateMaybeMessage<::dse::osidbg::BkDebugOutput>(Arena*);
template<> ::dse::osidbg::BkDebugSessionEnded* Arena::CreateMaybeMessage<::dse::osidbg::BkDebugSessionEnded>(Arena*);
template<> ::dse::osidbg::BkEndDatabaseContents* Arena::CreateMaybeMessage<::dse::osidbg::BkEndDatabaseContents>(Arena*);
template<> ::dse::osidbg::BkEvaluateFinished* Arena::CreateMaybeMessage<::dse::osidbg::BkEvaluateFinished>(Arena*);
template<> ::dse::osidbg::BkEvaluateRow* Arena::CreateMaybeMessage<::dse::osidbg::BkEvaluateRow>(Arena*);
template<> ::dse::osidbg::BkGlobalBreakpointTriggered* Arena::CreateMaybeMessage<::dse::osidbg::BkGlobalBreakpointTriggered>(Arena*);
template<> ::dse::osidbg::BkResult* Arena::CreateMaybeMessage<::dse::osidbg::BkResult>(Arena*);
template<> ::dse::osidbg::BkStoryLoaded* Arena::CreateMaybeMessage<::dse::osidbg::BkStoryLoaded>(Arena*);
template<> ::dse::osidbg::BkSyncStoryData* Arena::CreateMaybeMessage<::dse::osidbg::BkSyncStoryData>(Arena*);
template<> ::dse::osidbg::BkSyncStoryFinished* Arena::CreateMaybeMessage<::dse::osidbg::BkSyncStoryFinished>(Arena*);
template<> ::dse::osidbg::BkVersionInfoResponse* Arena::CreateMaybeMessage<::dse::osidbg::BkVersionInfoResponse>(Arena*);
template<> ::dse::osidbg::DbgContinue* Arena::CreateMaybeMessage<::dse::osidbg::DbgContinue>(Arena*);
template<> ::dse::osidbg::DbgEvaluate* Arena::CreateMaybeMessage<::dse::osidbg::DbgEvaluate>(Arena*);
template<> ::dse::osidbg::DbgGetDatabaseContents* Arena::CreateMaybeMessage<::dse::osidbg::DbgGetDatabaseContents>(Arena*);
template<> ::dse::osidbg::DbgIdentifyRequest* Arena::CreateMaybeMessage<::dse::osidbg::DbgIdentifyRequest>(Arena*);
template<> ::dse::osidbg::DbgSetBreakpoints* Arena::CreateMaybeMessage<::dse::osidbg::DbgSetBreakpoints>(Arena*);
template<> ::dse::osidbg::DbgSetGlobalBreakpoints* Arena::CreateMaybeMessage<::dse::osidbg::DbgSetGlobalBreakpoints>(Arena*);
template<> ::dse::osidbg::DbgSyncStory* Arena::CreateMaybeMessage<::dse::osidbg::DbgSyncStory>(Arena*);
template<> ::dse::osidbg::DebuggerToBackend* Arena::CreateMaybeMessage<::dse::osidbg::DebuggerToBackend>(Arena*);
template<> ::dse::osidbg::MsgActionInfo* Arena::CreateMaybeMessage<::dse::osidbg::MsgActionInfo>(Arena*);
template<> ::dse::osidbg::MsgBreakpoint* Arena::CreateMaybeMessage<::dse::osidbg::MsgBreakpoint>(Arena*);
template<> ::dse::osidbg::MsgDatabaseInfo* Arena::CreateMaybeMessage<::dse::osidbg::MsgDatabaseInfo>(Arena*);
template<> ::dse::osidbg::MsgFrame* Arena::CreateMaybeMessage<::dse::osidbg::MsgFrame>(Arena*);
template<> ::dse::osidbg::MsgGoalInfo* Arena::CreateMaybeMessage<::dse::osidbg::MsgGoalInfo>(Arena*);
template<> ::dse::osidbg::MsgNodeInfo* Arena::CreateMaybeMessage<::dse::osidbg::MsgNodeInfo>(Arena*);
template<> ::dse::osidbg::MsgRuleInfo* Arena::CreateMaybeMessage<::dse::osidbg::MsgRuleInfo>(Arena*);
template<> ::dse::osidbg::MsgTuple* Arena::CreateMaybeMessage<::dse::osidbg::MsgTuple>(Arena*);
template<> ::dse::osidbg::MsgTypedValue* Arena::CreateMaybeMessage<::dse::osidbg::MsgTypedValue>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dse {
namespace osidbg {

enum MsgFrame_FrameType {
  MsgFrame_FrameType_IS_VALID = 0,
  MsgFrame_FrameType_PUSHDOWN = 1,
  MsgFrame_FrameType_INSERT = 2,
  MsgFrame_FrameType_DELETE_ = 3,
  MsgFrame_FrameType_PUSHDOWN_DELETE = 4,
  MsgFrame_FrameType_RULE_ACTION = 5,
  MsgFrame_FrameType_GOAL_INIT_ACTION = 6,
  MsgFrame_FrameType_GOAL_EXIT_ACTION = 7,
  MsgFrame_FrameType_MsgFrame_FrameType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgFrame_FrameType_MsgFrame_FrameType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgFrame_FrameType_IsValid(int value);
const MsgFrame_FrameType MsgFrame_FrameType_FrameType_MIN = MsgFrame_FrameType_IS_VALID;
const MsgFrame_FrameType MsgFrame_FrameType_FrameType_MAX = MsgFrame_FrameType_GOAL_EXIT_ACTION;
const int MsgFrame_FrameType_FrameType_ARRAYSIZE = MsgFrame_FrameType_FrameType_MAX + 1;

enum DbgSetGlobalBreakpoints_GlobalBreakpointType {
  DbgSetGlobalBreakpoints_GlobalBreakpointType_NONE = 0,
  DbgSetGlobalBreakpoints_GlobalBreakpointType_STORY_LOADED = 1,
  DbgSetGlobalBreakpoints_GlobalBreakpointType_VALID = 2,
  DbgSetGlobalBreakpoints_GlobalBreakpointType_PUSHDOWN = 4,
  DbgSetGlobalBreakpoints_GlobalBreakpointType_INSERT = 8,
  DbgSetGlobalBreakpoints_GlobalBreakpointType_RULE_ACTION = 16,
  DbgSetGlobalBreakpoints_GlobalBreakpointType_INIT_CALL = 32,
  DbgSetGlobalBreakpoints_GlobalBreakpointType_EXIT_CALL = 64,
  DbgSetGlobalBreakpoints_GlobalBreakpointType_GAME_INIT = 128,
  DbgSetGlobalBreakpoints_GlobalBreakpointType_GAME_EXIT = 256,
  DbgSetGlobalBreakpoints_GlobalBreakpointType_DELETE_ = 512,
  DbgSetGlobalBreakpoints_GlobalBreakpointType_FAILED_QUERY = 1024,
  DbgSetGlobalBreakpoints_GlobalBreakpointType_DbgSetGlobalBreakpoints_GlobalBreakpointType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DbgSetGlobalBreakpoints_GlobalBreakpointType_DbgSetGlobalBreakpoints_GlobalBreakpointType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DbgSetGlobalBreakpoints_GlobalBreakpointType_IsValid(int value);
const DbgSetGlobalBreakpoints_GlobalBreakpointType DbgSetGlobalBreakpoints_GlobalBreakpointType_GlobalBreakpointType_MIN = DbgSetGlobalBreakpoints_GlobalBreakpointType_NONE;
const DbgSetGlobalBreakpoints_GlobalBreakpointType DbgSetGlobalBreakpoints_GlobalBreakpointType_GlobalBreakpointType_MAX = DbgSetGlobalBreakpoints_GlobalBreakpointType_FAILED_QUERY;
const int DbgSetGlobalBreakpoints_GlobalBreakpointType_GlobalBreakpointType_ARRAYSIZE = DbgSetGlobalBreakpoints_GlobalBreakpointType_GlobalBreakpointType_MAX + 1;

enum MsgBreakpoint_BreakpointType {
  MsgBreakpoint_BreakpointType_NONE = 0,
  MsgBreakpoint_BreakpointType_VALID = 1,
  MsgBreakpoint_BreakpointType_PUSHDOWN = 2,
  MsgBreakpoint_BreakpointType_INSERT = 4,
  MsgBreakpoint_BreakpointType_RULE_ACTION = 8,
  MsgBreakpoint_BreakpointType_INIT_CALL = 16,
  MsgBreakpoint_BreakpointType_EXIT_CALL = 32,
  MsgBreakpoint_BreakpointType_DELETE_ = 64,
  MsgBreakpoint_BreakpointType_FAILED_QUERY = 128,
  MsgBreakpoint_BreakpointType_MsgBreakpoint_BreakpointType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgBreakpoint_BreakpointType_MsgBreakpoint_BreakpointType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgBreakpoint_BreakpointType_IsValid(int value);
const MsgBreakpoint_BreakpointType MsgBreakpoint_BreakpointType_BreakpointType_MIN = MsgBreakpoint_BreakpointType_NONE;
const MsgBreakpoint_BreakpointType MsgBreakpoint_BreakpointType_BreakpointType_MAX = MsgBreakpoint_BreakpointType_FAILED_QUERY;
const int MsgBreakpoint_BreakpointType_BreakpointType_ARRAYSIZE = MsgBreakpoint_BreakpointType_BreakpointType_MAX + 1;

enum BkBreakpointTriggered_QueryStatus {
  BkBreakpointTriggered_QueryStatus_NOT_A_QUERY = 0,
  BkBreakpointTriggered_QueryStatus_SUCCEEDED = 1,
  BkBreakpointTriggered_QueryStatus_FAILED = 2,
  BkBreakpointTriggered_QueryStatus_BkBreakpointTriggered_QueryStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BkBreakpointTriggered_QueryStatus_BkBreakpointTriggered_QueryStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BkBreakpointTriggered_QueryStatus_IsValid(int value);
const BkBreakpointTriggered_QueryStatus BkBreakpointTriggered_QueryStatus_QueryStatus_MIN = BkBreakpointTriggered_QueryStatus_NOT_A_QUERY;
const BkBreakpointTriggered_QueryStatus BkBreakpointTriggered_QueryStatus_QueryStatus_MAX = BkBreakpointTriggered_QueryStatus_FAILED;
const int BkBreakpointTriggered_QueryStatus_QueryStatus_ARRAYSIZE = BkBreakpointTriggered_QueryStatus_QueryStatus_MAX + 1;

enum BkGlobalBreakpointTriggered_Reason {
  BkGlobalBreakpointTriggered_Reason_STORY_LOADED = 0,
  BkGlobalBreakpointTriggered_Reason_GAME_INIT = 1,
  BkGlobalBreakpointTriggered_Reason_GAME_EXIT = 2,
  BkGlobalBreakpointTriggered_Reason_BkGlobalBreakpointTriggered_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BkGlobalBreakpointTriggered_Reason_BkGlobalBreakpointTriggered_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BkGlobalBreakpointTriggered_Reason_IsValid(int value);
const BkGlobalBreakpointTriggered_Reason BkGlobalBreakpointTriggered_Reason_Reason_MIN = BkGlobalBreakpointTriggered_Reason_STORY_LOADED;
const BkGlobalBreakpointTriggered_Reason BkGlobalBreakpointTriggered_Reason_Reason_MAX = BkGlobalBreakpointTriggered_Reason_GAME_EXIT;
const int BkGlobalBreakpointTriggered_Reason_Reason_ARRAYSIZE = BkGlobalBreakpointTriggered_Reason_Reason_MAX + 1;

enum DbgContinue_Action {
  DbgContinue_Action_CONTINUE = 0,
  DbgContinue_Action_STEP_OVER = 1,
  DbgContinue_Action_STEP_INTO = 2,
  DbgContinue_Action_STEP_OUT = 3,
  DbgContinue_Action_PAUSE = 4,
  DbgContinue_Action_DbgContinue_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DbgContinue_Action_DbgContinue_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DbgContinue_Action_IsValid(int value);
const DbgContinue_Action DbgContinue_Action_Action_MIN = DbgContinue_Action_CONTINUE;
const DbgContinue_Action DbgContinue_Action_Action_MAX = DbgContinue_Action_PAUSE;
const int DbgContinue_Action_Action_ARRAYSIZE = DbgContinue_Action_Action_MAX + 1;

enum DbgContinue_Flags {
  DbgContinue_Flags_NONE = 0,
  DbgContinue_Flags_SKIP_RULE_PUSHDOWN = 1,
  DbgContinue_Flags_SKIP_DB_PROPAGATION = 2,
  DbgContinue_Flags_DbgContinue_Flags_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DbgContinue_Flags_DbgContinue_Flags_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DbgContinue_Flags_IsValid(int value);
const DbgContinue_Flags DbgContinue_Flags_Flags_MIN = DbgContinue_Flags_NONE;
const DbgContinue_Flags DbgContinue_Flags_Flags_MAX = DbgContinue_Flags_SKIP_DB_PROPAGATION;
const int DbgContinue_Flags_Flags_ARRAYSIZE = DbgContinue_Flags_Flags_MAX + 1;

enum DbgEvaluate_EvalType {
  DbgEvaluate_EvalType_IS_VALID = 0,
  DbgEvaluate_EvalType_PUSHDOWN = 1,
  DbgEvaluate_EvalType_INSERT = 2,
  DbgEvaluate_EvalType_DELETE_ = 3,
  DbgEvaluate_EvalType_DbgEvaluate_EvalType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DbgEvaluate_EvalType_DbgEvaluate_EvalType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DbgEvaluate_EvalType_IsValid(int value);
const DbgEvaluate_EvalType DbgEvaluate_EvalType_EvalType_MIN = DbgEvaluate_EvalType_IS_VALID;
const DbgEvaluate_EvalType DbgEvaluate_EvalType_EvalType_MAX = DbgEvaluate_EvalType_DELETE_;
const int DbgEvaluate_EvalType_EvalType_ARRAYSIZE = DbgEvaluate_EvalType_EvalType_MAX + 1;

enum StatusCode {
  SUCCESS = 0,
  UNSUPPORTED_BREAKPOINT_TYPE = 1,
  INVALID_NODE_ID = 2,
  NOT_IN_PAUSE = 3,
  NO_DEBUGGEE = 4,
  INVALID_CONTINUE_ACTION = 5,
  IN_PAUSE = 6,
  INVALID_GOAL_ID = 7,
  UNSUPPORTED_CONTINUE_FLAGS = 8,
  INVALID_DATABASE_ID = 9,
  NOT_CALLABLE = 10,
  INVALID_PARAMETERS = 11,
  NO_ADAPTER = 12,
  INVALID_EVAL_TYPE = 13,
  EVAL_ENGINE_NOT_READY = 14,
  INVALID_PARAM_TUPLE_ARITY = 15,
  INVALID_PARAM_TYPE = 16,
  MISSING_REQUIRED_PARAM = 17,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = SUCCESS;
const StatusCode StatusCode_MAX = MISSING_REQUIRED_PARAM;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

// ===================================================================

class MsgTypedValue : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.MsgTypedValue) */ {
 public:
  MsgTypedValue();
  virtual ~MsgTypedValue();

  MsgTypedValue(const MsgTypedValue& from);

  inline MsgTypedValue& operator=(const MsgTypedValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgTypedValue(MsgTypedValue&& from) noexcept
    : MsgTypedValue() {
    *this = ::std::move(from);
  }

  inline MsgTypedValue& operator=(MsgTypedValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgTypedValue& default_instance();

  enum ValueCase {
    kIntval = 2,
    kFloatval = 3,
    kStringval = 4,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgTypedValue* internal_default_instance() {
    return reinterpret_cast<const MsgTypedValue*>(
               &_MsgTypedValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(MsgTypedValue* other);
  void Swap(MsgTypedValue* other);
  friend void swap(MsgTypedValue& a, MsgTypedValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgTypedValue* New() const final {
    return CreateMaybeMessage<MsgTypedValue>(NULL);
  }

  MsgTypedValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgTypedValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgTypedValue& from);
  void MergeFrom(const MsgTypedValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgTypedValue* other);
  protected:
  explicit MsgTypedValue(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 type_id = 1;
  void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  ::google::protobuf::uint32 type_id() const;
  void set_type_id(::google::protobuf::uint32 value);

  // int64 intval = 2;
  private:
  bool has_intval() const;
  public:
  void clear_intval();
  static const int kIntvalFieldNumber = 2;
  ::google::protobuf::int64 intval() const;
  void set_intval(::google::protobuf::int64 value);

  // float floatval = 3;
  private:
  bool has_floatval() const;
  public:
  void clear_floatval();
  static const int kFloatvalFieldNumber = 3;
  float floatval() const;
  void set_floatval(float value);

  // string stringval = 4;
  private:
  bool has_stringval() const;
  public:
  void clear_stringval();
  static const int kStringvalFieldNumber = 4;
  const ::std::string& stringval() const;
  void set_stringval(const ::std::string& value);
  #if LANG_CXX11
  void set_stringval(::std::string&& value);
  #endif
  void set_stringval(const char* value);
  void set_stringval(const char* value, size_t size);
  ::std::string* mutable_stringval();
  ::std::string* release_stringval();
  void set_allocated_stringval(::std::string* stringval);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_stringval();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stringval(
      ::std::string* stringval);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:dse.osidbg.MsgTypedValue)
 private:
  void set_has_intval();
  void set_has_floatval();
  void set_has_stringval();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 type_id_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::int64 intval_;
    float floatval_;
    ::google::protobuf::internal::ArenaStringPtr stringval_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgTuple : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.MsgTuple) */ {
 public:
  MsgTuple();
  virtual ~MsgTuple();

  MsgTuple(const MsgTuple& from);

  inline MsgTuple& operator=(const MsgTuple& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgTuple(MsgTuple&& from) noexcept
    : MsgTuple() {
    *this = ::std::move(from);
  }

  inline MsgTuple& operator=(MsgTuple&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgTuple& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgTuple* internal_default_instance() {
    return reinterpret_cast<const MsgTuple*>(
               &_MsgTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(MsgTuple* other);
  void Swap(MsgTuple* other);
  friend void swap(MsgTuple& a, MsgTuple& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgTuple* New() const final {
    return CreateMaybeMessage<MsgTuple>(NULL);
  }

  MsgTuple* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgTuple>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgTuple& from);
  void MergeFrom(const MsgTuple& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgTuple* other);
  protected:
  explicit MsgTuple(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dse.osidbg.MsgTypedValue column = 1;
  int column_size() const;
  void clear_column();
  static const int kColumnFieldNumber = 1;
  ::dse::osidbg::MsgTypedValue* mutable_column(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgTypedValue >*
      mutable_column();
  const ::dse::osidbg::MsgTypedValue& column(int index) const;
  ::dse::osidbg::MsgTypedValue* add_column();
  const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgTypedValue >&
      column() const;

  // @@protoc_insertion_point(class_scope:dse.osidbg.MsgTuple)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgTypedValue > column_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgFrame : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.MsgFrame) */ {
 public:
  MsgFrame();
  virtual ~MsgFrame();

  MsgFrame(const MsgFrame& from);

  inline MsgFrame& operator=(const MsgFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgFrame(MsgFrame&& from) noexcept
    : MsgFrame() {
    *this = ::std::move(from);
  }

  inline MsgFrame& operator=(MsgFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgFrame* internal_default_instance() {
    return reinterpret_cast<const MsgFrame*>(
               &_MsgFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(MsgFrame* other);
  void Swap(MsgFrame* other);
  friend void swap(MsgFrame& a, MsgFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgFrame* New() const final {
    return CreateMaybeMessage<MsgFrame>(NULL);
  }

  MsgFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgFrame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgFrame& from);
  void MergeFrom(const MsgFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgFrame* other);
  protected:
  explicit MsgFrame(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MsgFrame_FrameType FrameType;
  static const FrameType IS_VALID =
    MsgFrame_FrameType_IS_VALID;
  static const FrameType PUSHDOWN =
    MsgFrame_FrameType_PUSHDOWN;
  static const FrameType INSERT =
    MsgFrame_FrameType_INSERT;
  static const FrameType DELETE_ =
    MsgFrame_FrameType_DELETE_;
  static const FrameType PUSHDOWN_DELETE =
    MsgFrame_FrameType_PUSHDOWN_DELETE;
  static const FrameType RULE_ACTION =
    MsgFrame_FrameType_RULE_ACTION;
  static const FrameType GOAL_INIT_ACTION =
    MsgFrame_FrameType_GOAL_INIT_ACTION;
  static const FrameType GOAL_EXIT_ACTION =
    MsgFrame_FrameType_GOAL_EXIT_ACTION;
  static inline bool FrameType_IsValid(int value) {
    return MsgFrame_FrameType_IsValid(value);
  }
  static const FrameType FrameType_MIN =
    MsgFrame_FrameType_FrameType_MIN;
  static const FrameType FrameType_MAX =
    MsgFrame_FrameType_FrameType_MAX;
  static const int FrameType_ARRAYSIZE =
    MsgFrame_FrameType_FrameType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // .dse.osidbg.MsgTuple tuple = 3;
  bool has_tuple() const;
  void clear_tuple();
  static const int kTupleFieldNumber = 3;
  private:
  const ::dse::osidbg::MsgTuple& _internal_tuple() const;
  public:
  const ::dse::osidbg::MsgTuple& tuple() const;
  ::dse::osidbg::MsgTuple* release_tuple();
  ::dse::osidbg::MsgTuple* mutable_tuple();
  void set_allocated_tuple(::dse::osidbg::MsgTuple* tuple);
  void unsafe_arena_set_allocated_tuple(
      ::dse::osidbg::MsgTuple* tuple);
  ::dse::osidbg::MsgTuple* unsafe_arena_release_tuple();

  // uint32 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::uint32 node_id() const;
  void set_node_id(::google::protobuf::uint32 value);

  // .dse.osidbg.MsgFrame.FrameType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::dse::osidbg::MsgFrame_FrameType type() const;
  void set_type(::dse::osidbg::MsgFrame_FrameType value);

  // uint32 goal_id = 4;
  void clear_goal_id();
  static const int kGoalIdFieldNumber = 4;
  ::google::protobuf::uint32 goal_id() const;
  void set_goal_id(::google::protobuf::uint32 value);

  // uint32 action_index = 5;
  void clear_action_index();
  static const int kActionIndexFieldNumber = 5;
  ::google::protobuf::uint32 action_index() const;
  void set_action_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.MsgFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dse::osidbg::MsgTuple* tuple_;
  ::google::protobuf::uint32 node_id_;
  int type_;
  ::google::protobuf::uint32 goal_id_;
  ::google::protobuf::uint32 action_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DbgIdentifyRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.DbgIdentifyRequest) */ {
 public:
  DbgIdentifyRequest();
  virtual ~DbgIdentifyRequest();

  DbgIdentifyRequest(const DbgIdentifyRequest& from);

  inline DbgIdentifyRequest& operator=(const DbgIdentifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DbgIdentifyRequest(DbgIdentifyRequest&& from) noexcept
    : DbgIdentifyRequest() {
    *this = ::std::move(from);
  }

  inline DbgIdentifyRequest& operator=(DbgIdentifyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DbgIdentifyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbgIdentifyRequest* internal_default_instance() {
    return reinterpret_cast<const DbgIdentifyRequest*>(
               &_DbgIdentifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(DbgIdentifyRequest* other);
  void Swap(DbgIdentifyRequest* other);
  friend void swap(DbgIdentifyRequest& a, DbgIdentifyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DbgIdentifyRequest* New() const final {
    return CreateMaybeMessage<DbgIdentifyRequest>(NULL);
  }

  DbgIdentifyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DbgIdentifyRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DbgIdentifyRequest& from);
  void MergeFrom(const DbgIdentifyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgIdentifyRequest* other);
  protected:
  explicit DbgIdentifyRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 protocol_version = 1;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  ::google::protobuf::uint32 protocol_version() const;
  void set_protocol_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.DbgIdentifyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 protocol_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkVersionInfoResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.BkVersionInfoResponse) */ {
 public:
  BkVersionInfoResponse();
  virtual ~BkVersionInfoResponse();

  BkVersionInfoResponse(const BkVersionInfoResponse& from);

  inline BkVersionInfoResponse& operator=(const BkVersionInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkVersionInfoResponse(BkVersionInfoResponse&& from) noexcept
    : BkVersionInfoResponse() {
    *this = ::std::move(from);
  }

  inline BkVersionInfoResponse& operator=(BkVersionInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkVersionInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkVersionInfoResponse* internal_default_instance() {
    return reinterpret_cast<const BkVersionInfoResponse*>(
               &_BkVersionInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(BkVersionInfoResponse* other);
  void Swap(BkVersionInfoResponse* other);
  friend void swap(BkVersionInfoResponse& a, BkVersionInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkVersionInfoResponse* New() const final {
    return CreateMaybeMessage<BkVersionInfoResponse>(NULL);
  }

  BkVersionInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkVersionInfoResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkVersionInfoResponse& from);
  void MergeFrom(const BkVersionInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkVersionInfoResponse* other);
  protected:
  explicit BkVersionInfoResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 protocol_version = 1;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  ::google::protobuf::uint32 protocol_version() const;
  void set_protocol_version(::google::protobuf::uint32 value);

  // bool story_loaded = 2;
  void clear_story_loaded();
  static const int kStoryLoadedFieldNumber = 2;
  bool story_loaded() const;
  void set_story_loaded(bool value);

  // bool story_initialized = 4;
  void clear_story_initialized();
  static const int kStoryInitializedFieldNumber = 4;
  bool story_initialized() const;
  void set_story_initialized(bool value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.BkVersionInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 protocol_version_;
  bool story_loaded_;
  bool story_initialized_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DbgSetGlobalBreakpoints : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.DbgSetGlobalBreakpoints) */ {
 public:
  DbgSetGlobalBreakpoints();
  virtual ~DbgSetGlobalBreakpoints();

  DbgSetGlobalBreakpoints(const DbgSetGlobalBreakpoints& from);

  inline DbgSetGlobalBreakpoints& operator=(const DbgSetGlobalBreakpoints& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DbgSetGlobalBreakpoints(DbgSetGlobalBreakpoints&& from) noexcept
    : DbgSetGlobalBreakpoints() {
    *this = ::std::move(from);
  }

  inline DbgSetGlobalBreakpoints& operator=(DbgSetGlobalBreakpoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DbgSetGlobalBreakpoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbgSetGlobalBreakpoints* internal_default_instance() {
    return reinterpret_cast<const DbgSetGlobalBreakpoints*>(
               &_DbgSetGlobalBreakpoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(DbgSetGlobalBreakpoints* other);
  void Swap(DbgSetGlobalBreakpoints* other);
  friend void swap(DbgSetGlobalBreakpoints& a, DbgSetGlobalBreakpoints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DbgSetGlobalBreakpoints* New() const final {
    return CreateMaybeMessage<DbgSetGlobalBreakpoints>(NULL);
  }

  DbgSetGlobalBreakpoints* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DbgSetGlobalBreakpoints>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DbgSetGlobalBreakpoints& from);
  void MergeFrom(const DbgSetGlobalBreakpoints& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgSetGlobalBreakpoints* other);
  protected:
  explicit DbgSetGlobalBreakpoints(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DbgSetGlobalBreakpoints_GlobalBreakpointType GlobalBreakpointType;
  static const GlobalBreakpointType NONE =
    DbgSetGlobalBreakpoints_GlobalBreakpointType_NONE;
  static const GlobalBreakpointType STORY_LOADED =
    DbgSetGlobalBreakpoints_GlobalBreakpointType_STORY_LOADED;
  static const GlobalBreakpointType VALID =
    DbgSetGlobalBreakpoints_GlobalBreakpointType_VALID;
  static const GlobalBreakpointType PUSHDOWN =
    DbgSetGlobalBreakpoints_GlobalBreakpointType_PUSHDOWN;
  static const GlobalBreakpointType INSERT =
    DbgSetGlobalBreakpoints_GlobalBreakpointType_INSERT;
  static const GlobalBreakpointType RULE_ACTION =
    DbgSetGlobalBreakpoints_GlobalBreakpointType_RULE_ACTION;
  static const GlobalBreakpointType INIT_CALL =
    DbgSetGlobalBreakpoints_GlobalBreakpointType_INIT_CALL;
  static const GlobalBreakpointType EXIT_CALL =
    DbgSetGlobalBreakpoints_GlobalBreakpointType_EXIT_CALL;
  static const GlobalBreakpointType GAME_INIT =
    DbgSetGlobalBreakpoints_GlobalBreakpointType_GAME_INIT;
  static const GlobalBreakpointType GAME_EXIT =
    DbgSetGlobalBreakpoints_GlobalBreakpointType_GAME_EXIT;
  static const GlobalBreakpointType DELETE_ =
    DbgSetGlobalBreakpoints_GlobalBreakpointType_DELETE_;
  static const GlobalBreakpointType FAILED_QUERY =
    DbgSetGlobalBreakpoints_GlobalBreakpointType_FAILED_QUERY;
  static inline bool GlobalBreakpointType_IsValid(int value) {
    return DbgSetGlobalBreakpoints_GlobalBreakpointType_IsValid(value);
  }
  static const GlobalBreakpointType GlobalBreakpointType_MIN =
    DbgSetGlobalBreakpoints_GlobalBreakpointType_GlobalBreakpointType_MIN;
  static const GlobalBreakpointType GlobalBreakpointType_MAX =
    DbgSetGlobalBreakpoints_GlobalBreakpointType_GlobalBreakpointType_MAX;
  static const int GlobalBreakpointType_ARRAYSIZE =
    DbgSetGlobalBreakpoints_GlobalBreakpointType_GlobalBreakpointType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // uint32 breakpoint_mask = 1;
  void clear_breakpoint_mask();
  static const int kBreakpointMaskFieldNumber = 1;
  ::google::protobuf::uint32 breakpoint_mask() const;
  void set_breakpoint_mask(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.DbgSetGlobalBreakpoints)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 breakpoint_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgBreakpoint : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.MsgBreakpoint) */ {
 public:
  MsgBreakpoint();
  virtual ~MsgBreakpoint();

  MsgBreakpoint(const MsgBreakpoint& from);

  inline MsgBreakpoint& operator=(const MsgBreakpoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgBreakpoint(MsgBreakpoint&& from) noexcept
    : MsgBreakpoint() {
    *this = ::std::move(from);
  }

  inline MsgBreakpoint& operator=(MsgBreakpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgBreakpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgBreakpoint* internal_default_instance() {
    return reinterpret_cast<const MsgBreakpoint*>(
               &_MsgBreakpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(MsgBreakpoint* other);
  void Swap(MsgBreakpoint* other);
  friend void swap(MsgBreakpoint& a, MsgBreakpoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgBreakpoint* New() const final {
    return CreateMaybeMessage<MsgBreakpoint>(NULL);
  }

  MsgBreakpoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgBreakpoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgBreakpoint& from);
  void MergeFrom(const MsgBreakpoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgBreakpoint* other);
  protected:
  explicit MsgBreakpoint(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MsgBreakpoint_BreakpointType BreakpointType;
  static const BreakpointType NONE =
    MsgBreakpoint_BreakpointType_NONE;
  static const BreakpointType VALID =
    MsgBreakpoint_BreakpointType_VALID;
  static const BreakpointType PUSHDOWN =
    MsgBreakpoint_BreakpointType_PUSHDOWN;
  static const BreakpointType INSERT =
    MsgBreakpoint_BreakpointType_INSERT;
  static const BreakpointType RULE_ACTION =
    MsgBreakpoint_BreakpointType_RULE_ACTION;
  static const BreakpointType INIT_CALL =
    MsgBreakpoint_BreakpointType_INIT_CALL;
  static const BreakpointType EXIT_CALL =
    MsgBreakpoint_BreakpointType_EXIT_CALL;
  static const BreakpointType DELETE_ =
    MsgBreakpoint_BreakpointType_DELETE_;
  static const BreakpointType FAILED_QUERY =
    MsgBreakpoint_BreakpointType_FAILED_QUERY;
  static inline bool BreakpointType_IsValid(int value) {
    return MsgBreakpoint_BreakpointType_IsValid(value);
  }
  static const BreakpointType BreakpointType_MIN =
    MsgBreakpoint_BreakpointType_BreakpointType_MIN;
  static const BreakpointType BreakpointType_MAX =
    MsgBreakpoint_BreakpointType_BreakpointType_MAX;
  static const int BreakpointType_ARRAYSIZE =
    MsgBreakpoint_BreakpointType_BreakpointType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // uint32 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::uint32 node_id() const;
  void set_node_id(::google::protobuf::uint32 value);

  // uint32 breakpoint_mask = 2;
  void clear_breakpoint_mask();
  static const int kBreakpointMaskFieldNumber = 2;
  ::google::protobuf::uint32 breakpoint_mask() const;
  void set_breakpoint_mask(::google::protobuf::uint32 value);

  // uint32 goal_id = 3;
  void clear_goal_id();
  static const int kGoalIdFieldNumber = 3;
  ::google::protobuf::uint32 goal_id() const;
  void set_goal_id(::google::protobuf::uint32 value);

  // bool is_init_action = 4;
  void clear_is_init_action();
  static const int kIsInitActionFieldNumber = 4;
  bool is_init_action() const;
  void set_is_init_action(bool value);

  // int32 action_index = 5;
  void clear_action_index();
  static const int kActionIndexFieldNumber = 5;
  ::google::protobuf::int32 action_index() const;
  void set_action_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.MsgBreakpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 node_id_;
  ::google::protobuf::uint32 breakpoint_mask_;
  ::google::protobuf::uint32 goal_id_;
  bool is_init_action_;
  ::google::protobuf::int32 action_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DbgSetBreakpoints : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.DbgSetBreakpoints) */ {
 public:
  DbgSetBreakpoints();
  virtual ~DbgSetBreakpoints();

  DbgSetBreakpoints(const DbgSetBreakpoints& from);

  inline DbgSetBreakpoints& operator=(const DbgSetBreakpoints& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DbgSetBreakpoints(DbgSetBreakpoints&& from) noexcept
    : DbgSetBreakpoints() {
    *this = ::std::move(from);
  }

  inline DbgSetBreakpoints& operator=(DbgSetBreakpoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DbgSetBreakpoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbgSetBreakpoints* internal_default_instance() {
    return reinterpret_cast<const DbgSetBreakpoints*>(
               &_DbgSetBreakpoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(DbgSetBreakpoints* other);
  void Swap(DbgSetBreakpoints* other);
  friend void swap(DbgSetBreakpoints& a, DbgSetBreakpoints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DbgSetBreakpoints* New() const final {
    return CreateMaybeMessage<DbgSetBreakpoints>(NULL);
  }

  DbgSetBreakpoints* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DbgSetBreakpoints>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DbgSetBreakpoints& from);
  void MergeFrom(const DbgSetBreakpoints& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgSetBreakpoints* other);
  protected:
  explicit DbgSetBreakpoints(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dse.osidbg.MsgBreakpoint breakpoint = 1;
  int breakpoint_size() const;
  void clear_breakpoint();
  static const int kBreakpointFieldNumber = 1;
  ::dse::osidbg::MsgBreakpoint* mutable_breakpoint(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgBreakpoint >*
      mutable_breakpoint();
  const ::dse::osidbg::MsgBreakpoint& breakpoint(int index) const;
  ::dse::osidbg::MsgBreakpoint* add_breakpoint();
  const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgBreakpoint >&
      breakpoint() const;

  // @@protoc_insertion_point(class_scope:dse.osidbg.DbgSetBreakpoints)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgBreakpoint > breakpoint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkBreakpointTriggered : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.BkBreakpointTriggered) */ {
 public:
  BkBreakpointTriggered();
  virtual ~BkBreakpointTriggered();

  BkBreakpointTriggered(const BkBreakpointTriggered& from);

  inline BkBreakpointTriggered& operator=(const BkBreakpointTriggered& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkBreakpointTriggered(BkBreakpointTriggered&& from) noexcept
    : BkBreakpointTriggered() {
    *this = ::std::move(from);
  }

  inline BkBreakpointTriggered& operator=(BkBreakpointTriggered&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkBreakpointTriggered& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkBreakpointTriggered* internal_default_instance() {
    return reinterpret_cast<const BkBreakpointTriggered*>(
               &_BkBreakpointTriggered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(BkBreakpointTriggered* other);
  void Swap(BkBreakpointTriggered* other);
  friend void swap(BkBreakpointTriggered& a, BkBreakpointTriggered& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkBreakpointTriggered* New() const final {
    return CreateMaybeMessage<BkBreakpointTriggered>(NULL);
  }

  BkBreakpointTriggered* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkBreakpointTriggered>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkBreakpointTriggered& from);
  void MergeFrom(const BkBreakpointTriggered& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkBreakpointTriggered* other);
  protected:
  explicit BkBreakpointTriggered(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BkBreakpointTriggered_QueryStatus QueryStatus;
  static const QueryStatus NOT_A_QUERY =
    BkBreakpointTriggered_QueryStatus_NOT_A_QUERY;
  static const QueryStatus SUCCEEDED =
    BkBreakpointTriggered_QueryStatus_SUCCEEDED;
  static const QueryStatus FAILED =
    BkBreakpointTriggered_QueryStatus_FAILED;
  static inline bool QueryStatus_IsValid(int value) {
    return BkBreakpointTriggered_QueryStatus_IsValid(value);
  }
  static const QueryStatus QueryStatus_MIN =
    BkBreakpointTriggered_QueryStatus_QueryStatus_MIN;
  static const QueryStatus QueryStatus_MAX =
    BkBreakpointTriggered_QueryStatus_QueryStatus_MAX;
  static const int QueryStatus_ARRAYSIZE =
    BkBreakpointTriggered_QueryStatus_QueryStatus_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .dse.osidbg.MsgFrame call_stack = 1;
  int call_stack_size() const;
  void clear_call_stack();
  static const int kCallStackFieldNumber = 1;
  ::dse::osidbg::MsgFrame* mutable_call_stack(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgFrame >*
      mutable_call_stack();
  const ::dse::osidbg::MsgFrame& call_stack(int index) const;
  ::dse::osidbg::MsgFrame* add_call_stack();
  const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgFrame >&
      call_stack() const;

  // .dse.osidbg.MsgTuple query_results = 3;
  bool has_query_results() const;
  void clear_query_results();
  static const int kQueryResultsFieldNumber = 3;
  private:
  const ::dse::osidbg::MsgTuple& _internal_query_results() const;
  public:
  const ::dse::osidbg::MsgTuple& query_results() const;
  ::dse::osidbg::MsgTuple* release_query_results();
  ::dse::osidbg::MsgTuple* mutable_query_results();
  void set_allocated_query_results(::dse::osidbg::MsgTuple* query_results);
  void unsafe_arena_set_allocated_query_results(
      ::dse::osidbg::MsgTuple* query_results);
  ::dse::osidbg::MsgTuple* unsafe_arena_release_query_results();

  // .dse.osidbg.BkBreakpointTriggered.QueryStatus query_succeeded = 2;
  void clear_query_succeeded();
  static const int kQuerySucceededFieldNumber = 2;
  ::dse::osidbg::BkBreakpointTriggered_QueryStatus query_succeeded() const;
  void set_query_succeeded(::dse::osidbg::BkBreakpointTriggered_QueryStatus value);

  // uint32 query_node_id = 4;
  void clear_query_node_id();
  static const int kQueryNodeIdFieldNumber = 4;
  ::google::protobuf::uint32 query_node_id() const;
  void set_query_node_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.BkBreakpointTriggered)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgFrame > call_stack_;
  ::dse::osidbg::MsgTuple* query_results_;
  int query_succeeded_;
  ::google::protobuf::uint32 query_node_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkGlobalBreakpointTriggered : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.BkGlobalBreakpointTriggered) */ {
 public:
  BkGlobalBreakpointTriggered();
  virtual ~BkGlobalBreakpointTriggered();

  BkGlobalBreakpointTriggered(const BkGlobalBreakpointTriggered& from);

  inline BkGlobalBreakpointTriggered& operator=(const BkGlobalBreakpointTriggered& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkGlobalBreakpointTriggered(BkGlobalBreakpointTriggered&& from) noexcept
    : BkGlobalBreakpointTriggered() {
    *this = ::std::move(from);
  }

  inline BkGlobalBreakpointTriggered& operator=(BkGlobalBreakpointTriggered&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkGlobalBreakpointTriggered& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkGlobalBreakpointTriggered* internal_default_instance() {
    return reinterpret_cast<const BkGlobalBreakpointTriggered*>(
               &_BkGlobalBreakpointTriggered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(BkGlobalBreakpointTriggered* other);
  void Swap(BkGlobalBreakpointTriggered* other);
  friend void swap(BkGlobalBreakpointTriggered& a, BkGlobalBreakpointTriggered& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkGlobalBreakpointTriggered* New() const final {
    return CreateMaybeMessage<BkGlobalBreakpointTriggered>(NULL);
  }

  BkGlobalBreakpointTriggered* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkGlobalBreakpointTriggered>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkGlobalBreakpointTriggered& from);
  void MergeFrom(const BkGlobalBreakpointTriggered& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkGlobalBreakpointTriggered* other);
  protected:
  explicit BkGlobalBreakpointTriggered(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BkGlobalBreakpointTriggered_Reason Reason;
  static const Reason STORY_LOADED =
    BkGlobalBreakpointTriggered_Reason_STORY_LOADED;
  static const Reason GAME_INIT =
    BkGlobalBreakpointTriggered_Reason_GAME_INIT;
  static const Reason GAME_EXIT =
    BkGlobalBreakpointTriggered_Reason_GAME_EXIT;
  static inline bool Reason_IsValid(int value) {
    return BkGlobalBreakpointTriggered_Reason_IsValid(value);
  }
  static const Reason Reason_MIN =
    BkGlobalBreakpointTriggered_Reason_Reason_MIN;
  static const Reason Reason_MAX =
    BkGlobalBreakpointTriggered_Reason_Reason_MAX;
  static const int Reason_ARRAYSIZE =
    BkGlobalBreakpointTriggered_Reason_Reason_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // .dse.osidbg.BkGlobalBreakpointTriggered.Reason reason = 1;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  ::dse::osidbg::BkGlobalBreakpointTriggered_Reason reason() const;
  void set_reason(::dse::osidbg::BkGlobalBreakpointTriggered_Reason value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.BkGlobalBreakpointTriggered)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int reason_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DbgContinue : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.DbgContinue) */ {
 public:
  DbgContinue();
  virtual ~DbgContinue();

  DbgContinue(const DbgContinue& from);

  inline DbgContinue& operator=(const DbgContinue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DbgContinue(DbgContinue&& from) noexcept
    : DbgContinue() {
    *this = ::std::move(from);
  }

  inline DbgContinue& operator=(DbgContinue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DbgContinue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbgContinue* internal_default_instance() {
    return reinterpret_cast<const DbgContinue*>(
               &_DbgContinue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(DbgContinue* other);
  void Swap(DbgContinue* other);
  friend void swap(DbgContinue& a, DbgContinue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DbgContinue* New() const final {
    return CreateMaybeMessage<DbgContinue>(NULL);
  }

  DbgContinue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DbgContinue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DbgContinue& from);
  void MergeFrom(const DbgContinue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgContinue* other);
  protected:
  explicit DbgContinue(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DbgContinue_Action Action;
  static const Action CONTINUE =
    DbgContinue_Action_CONTINUE;
  static const Action STEP_OVER =
    DbgContinue_Action_STEP_OVER;
  static const Action STEP_INTO =
    DbgContinue_Action_STEP_INTO;
  static const Action STEP_OUT =
    DbgContinue_Action_STEP_OUT;
  static const Action PAUSE =
    DbgContinue_Action_PAUSE;
  static inline bool Action_IsValid(int value) {
    return DbgContinue_Action_IsValid(value);
  }
  static const Action Action_MIN =
    DbgContinue_Action_Action_MIN;
  static const Action Action_MAX =
    DbgContinue_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    DbgContinue_Action_Action_ARRAYSIZE;

  typedef DbgContinue_Flags Flags;
  static const Flags NONE =
    DbgContinue_Flags_NONE;
  static const Flags SKIP_RULE_PUSHDOWN =
    DbgContinue_Flags_SKIP_RULE_PUSHDOWN;
  static const Flags SKIP_DB_PROPAGATION =
    DbgContinue_Flags_SKIP_DB_PROPAGATION;
  static inline bool Flags_IsValid(int value) {
    return DbgContinue_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    DbgContinue_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    DbgContinue_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    DbgContinue_Flags_Flags_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // .dse.osidbg.DbgContinue.Action action = 1;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::dse::osidbg::DbgContinue_Action action() const;
  void set_action(::dse::osidbg::DbgContinue_Action value);

  // uint32 breakpoint_mask = 2;
  void clear_breakpoint_mask();
  static const int kBreakpointMaskFieldNumber = 2;
  ::google::protobuf::uint32 breakpoint_mask() const;
  void set_breakpoint_mask(::google::protobuf::uint32 value);

  // uint32 flags = 3;
  void clear_flags();
  static const int kFlagsFieldNumber = 3;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.DbgContinue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int action_;
  ::google::protobuf::uint32 breakpoint_mask_;
  ::google::protobuf::uint32 flags_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DbgGetDatabaseContents : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.DbgGetDatabaseContents) */ {
 public:
  DbgGetDatabaseContents();
  virtual ~DbgGetDatabaseContents();

  DbgGetDatabaseContents(const DbgGetDatabaseContents& from);

  inline DbgGetDatabaseContents& operator=(const DbgGetDatabaseContents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DbgGetDatabaseContents(DbgGetDatabaseContents&& from) noexcept
    : DbgGetDatabaseContents() {
    *this = ::std::move(from);
  }

  inline DbgGetDatabaseContents& operator=(DbgGetDatabaseContents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DbgGetDatabaseContents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbgGetDatabaseContents* internal_default_instance() {
    return reinterpret_cast<const DbgGetDatabaseContents*>(
               &_DbgGetDatabaseContents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(DbgGetDatabaseContents* other);
  void Swap(DbgGetDatabaseContents* other);
  friend void swap(DbgGetDatabaseContents& a, DbgGetDatabaseContents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DbgGetDatabaseContents* New() const final {
    return CreateMaybeMessage<DbgGetDatabaseContents>(NULL);
  }

  DbgGetDatabaseContents* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DbgGetDatabaseContents>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DbgGetDatabaseContents& from);
  void MergeFrom(const DbgGetDatabaseContents& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgGetDatabaseContents* other);
  protected:
  explicit DbgGetDatabaseContents(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 database_id = 1;
  void clear_database_id();
  static const int kDatabaseIdFieldNumber = 1;
  ::google::protobuf::uint32 database_id() const;
  void set_database_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.DbgGetDatabaseContents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 database_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DbgSyncStory : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.DbgSyncStory) */ {
 public:
  DbgSyncStory();
  virtual ~DbgSyncStory();

  DbgSyncStory(const DbgSyncStory& from);

  inline DbgSyncStory& operator=(const DbgSyncStory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DbgSyncStory(DbgSyncStory&& from) noexcept
    : DbgSyncStory() {
    *this = ::std::move(from);
  }

  inline DbgSyncStory& operator=(DbgSyncStory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DbgSyncStory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbgSyncStory* internal_default_instance() {
    return reinterpret_cast<const DbgSyncStory*>(
               &_DbgSyncStory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(DbgSyncStory* other);
  void Swap(DbgSyncStory* other);
  friend void swap(DbgSyncStory& a, DbgSyncStory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DbgSyncStory* New() const final {
    return CreateMaybeMessage<DbgSyncStory>(NULL);
  }

  DbgSyncStory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DbgSyncStory>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DbgSyncStory& from);
  void MergeFrom(const DbgSyncStory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgSyncStory* other);
  protected:
  explicit DbgSyncStory(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dse.osidbg.DbgSyncStory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DbgEvaluate : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.DbgEvaluate) */ {
 public:
  DbgEvaluate();
  virtual ~DbgEvaluate();

  DbgEvaluate(const DbgEvaluate& from);

  inline DbgEvaluate& operator=(const DbgEvaluate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DbgEvaluate(DbgEvaluate&& from) noexcept
    : DbgEvaluate() {
    *this = ::std::move(from);
  }

  inline DbgEvaluate& operator=(DbgEvaluate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DbgEvaluate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbgEvaluate* internal_default_instance() {
    return reinterpret_cast<const DbgEvaluate*>(
               &_DbgEvaluate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(DbgEvaluate* other);
  void Swap(DbgEvaluate* other);
  friend void swap(DbgEvaluate& a, DbgEvaluate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DbgEvaluate* New() const final {
    return CreateMaybeMessage<DbgEvaluate>(NULL);
  }

  DbgEvaluate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DbgEvaluate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DbgEvaluate& from);
  void MergeFrom(const DbgEvaluate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgEvaluate* other);
  protected:
  explicit DbgEvaluate(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DbgEvaluate_EvalType EvalType;
  static const EvalType IS_VALID =
    DbgEvaluate_EvalType_IS_VALID;
  static const EvalType PUSHDOWN =
    DbgEvaluate_EvalType_PUSHDOWN;
  static const EvalType INSERT =
    DbgEvaluate_EvalType_INSERT;
  static const EvalType DELETE_ =
    DbgEvaluate_EvalType_DELETE_;
  static inline bool EvalType_IsValid(int value) {
    return DbgEvaluate_EvalType_IsValid(value);
  }
  static const EvalType EvalType_MIN =
    DbgEvaluate_EvalType_EvalType_MIN;
  static const EvalType EvalType_MAX =
    DbgEvaluate_EvalType_EvalType_MAX;
  static const int EvalType_ARRAYSIZE =
    DbgEvaluate_EvalType_EvalType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // .dse.osidbg.MsgTuple params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  private:
  const ::dse::osidbg::MsgTuple& _internal_params() const;
  public:
  const ::dse::osidbg::MsgTuple& params() const;
  ::dse::osidbg::MsgTuple* release_params();
  ::dse::osidbg::MsgTuple* mutable_params();
  void set_allocated_params(::dse::osidbg::MsgTuple* params);
  void unsafe_arena_set_allocated_params(
      ::dse::osidbg::MsgTuple* params);
  ::dse::osidbg::MsgTuple* unsafe_arena_release_params();

  // .dse.osidbg.DbgEvaluate.EvalType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::dse::osidbg::DbgEvaluate_EvalType type() const;
  void set_type(::dse::osidbg::DbgEvaluate_EvalType value);

  // uint32 node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::uint32 node_id() const;
  void set_node_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.DbgEvaluate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dse::osidbg::MsgTuple* params_;
  int type_;
  ::google::protobuf::uint32 node_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.BkResult) */ {
 public:
  BkResult();
  virtual ~BkResult();

  BkResult(const BkResult& from);

  inline BkResult& operator=(const BkResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkResult(BkResult&& from) noexcept
    : BkResult() {
    *this = ::std::move(from);
  }

  inline BkResult& operator=(BkResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkResult* internal_default_instance() {
    return reinterpret_cast<const BkResult*>(
               &_BkResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void UnsafeArenaSwap(BkResult* other);
  void Swap(BkResult* other);
  friend void swap(BkResult& a, BkResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkResult* New() const final {
    return CreateMaybeMessage<BkResult>(NULL);
  }

  BkResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkResult& from);
  void MergeFrom(const BkResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkResult* other);
  protected:
  explicit BkResult(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dse.osidbg.StatusCode status_code = 1;
  void clear_status_code();
  static const int kStatusCodeFieldNumber = 1;
  ::dse::osidbg::StatusCode status_code() const;
  void set_status_code(::dse::osidbg::StatusCode value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.BkResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkStoryLoaded : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.BkStoryLoaded) */ {
 public:
  BkStoryLoaded();
  virtual ~BkStoryLoaded();

  BkStoryLoaded(const BkStoryLoaded& from);

  inline BkStoryLoaded& operator=(const BkStoryLoaded& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkStoryLoaded(BkStoryLoaded&& from) noexcept
    : BkStoryLoaded() {
    *this = ::std::move(from);
  }

  inline BkStoryLoaded& operator=(BkStoryLoaded&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkStoryLoaded& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkStoryLoaded* internal_default_instance() {
    return reinterpret_cast<const BkStoryLoaded*>(
               &_BkStoryLoaded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void UnsafeArenaSwap(BkStoryLoaded* other);
  void Swap(BkStoryLoaded* other);
  friend void swap(BkStoryLoaded& a, BkStoryLoaded& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkStoryLoaded* New() const final {
    return CreateMaybeMessage<BkStoryLoaded>(NULL);
  }

  BkStoryLoaded* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkStoryLoaded>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkStoryLoaded& from);
  void MergeFrom(const BkStoryLoaded& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkStoryLoaded* other);
  protected:
  explicit BkStoryLoaded(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dse.osidbg.BkStoryLoaded)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkDebugSessionEnded : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.BkDebugSessionEnded) */ {
 public:
  BkDebugSessionEnded();
  virtual ~BkDebugSessionEnded();

  BkDebugSessionEnded(const BkDebugSessionEnded& from);

  inline BkDebugSessionEnded& operator=(const BkDebugSessionEnded& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkDebugSessionEnded(BkDebugSessionEnded&& from) noexcept
    : BkDebugSessionEnded() {
    *this = ::std::move(from);
  }

  inline BkDebugSessionEnded& operator=(BkDebugSessionEnded&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkDebugSessionEnded& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkDebugSessionEnded* internal_default_instance() {
    return reinterpret_cast<const BkDebugSessionEnded*>(
               &_BkDebugSessionEnded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void UnsafeArenaSwap(BkDebugSessionEnded* other);
  void Swap(BkDebugSessionEnded* other);
  friend void swap(BkDebugSessionEnded& a, BkDebugSessionEnded& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkDebugSessionEnded* New() const final {
    return CreateMaybeMessage<BkDebugSessionEnded>(NULL);
  }

  BkDebugSessionEnded* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkDebugSessionEnded>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkDebugSessionEnded& from);
  void MergeFrom(const BkDebugSessionEnded& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkDebugSessionEnded* other);
  protected:
  explicit BkDebugSessionEnded(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dse.osidbg.BkDebugSessionEnded)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgActionInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.MsgActionInfo) */ {
 public:
  MsgActionInfo();
  virtual ~MsgActionInfo();

  MsgActionInfo(const MsgActionInfo& from);

  inline MsgActionInfo& operator=(const MsgActionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgActionInfo(MsgActionInfo&& from) noexcept
    : MsgActionInfo() {
    *this = ::std::move(from);
  }

  inline MsgActionInfo& operator=(MsgActionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgActionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgActionInfo* internal_default_instance() {
    return reinterpret_cast<const MsgActionInfo*>(
               &_MsgActionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void UnsafeArenaSwap(MsgActionInfo* other);
  void Swap(MsgActionInfo* other);
  friend void swap(MsgActionInfo& a, MsgActionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgActionInfo* New() const final {
    return CreateMaybeMessage<MsgActionInfo>(NULL);
  }

  MsgActionInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgActionInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgActionInfo& from);
  void MergeFrom(const MsgActionInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgActionInfo* other);
  protected:
  explicit MsgActionInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string function = 1;
  void clear_function();
  static const int kFunctionFieldNumber = 1;
  const ::std::string& function() const;
  void set_function(const ::std::string& value);
  #if LANG_CXX11
  void set_function(::std::string&& value);
  #endif
  void set_function(const char* value);
  void set_function(const char* value, size_t size);
  ::std::string* mutable_function();
  ::std::string* release_function();
  void set_allocated_function(::std::string* function);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_function();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_function(
      ::std::string* function);

  // uint32 arity = 2;
  void clear_arity();
  static const int kArityFieldNumber = 2;
  ::google::protobuf::uint32 arity() const;
  void set_arity(::google::protobuf::uint32 value);

  // int32 goal_id = 3;
  void clear_goal_id();
  static const int kGoalIdFieldNumber = 3;
  ::google::protobuf::int32 goal_id() const;
  void set_goal_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.MsgActionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr function_;
  ::google::protobuf::uint32 arity_;
  ::google::protobuf::int32 goal_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgGoalInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.MsgGoalInfo) */ {
 public:
  MsgGoalInfo();
  virtual ~MsgGoalInfo();

  MsgGoalInfo(const MsgGoalInfo& from);

  inline MsgGoalInfo& operator=(const MsgGoalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgGoalInfo(MsgGoalInfo&& from) noexcept
    : MsgGoalInfo() {
    *this = ::std::move(from);
  }

  inline MsgGoalInfo& operator=(MsgGoalInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgGoalInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgGoalInfo* internal_default_instance() {
    return reinterpret_cast<const MsgGoalInfo*>(
               &_MsgGoalInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void UnsafeArenaSwap(MsgGoalInfo* other);
  void Swap(MsgGoalInfo* other);
  friend void swap(MsgGoalInfo& a, MsgGoalInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgGoalInfo* New() const final {
    return CreateMaybeMessage<MsgGoalInfo>(NULL);
  }

  MsgGoalInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgGoalInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgGoalInfo& from);
  void MergeFrom(const MsgGoalInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgGoalInfo* other);
  protected:
  explicit MsgGoalInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dse.osidbg.MsgActionInfo initActions = 3;
  int initactions_size() const;
  void clear_initactions();
  static const int kInitActionsFieldNumber = 3;
  ::dse::osidbg::MsgActionInfo* mutable_initactions(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgActionInfo >*
      mutable_initactions();
  const ::dse::osidbg::MsgActionInfo& initactions(int index) const;
  ::dse::osidbg::MsgActionInfo* add_initactions();
  const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgActionInfo >&
      initactions() const;

  // repeated .dse.osidbg.MsgActionInfo exitActions = 4;
  int exitactions_size() const;
  void clear_exitactions();
  static const int kExitActionsFieldNumber = 4;
  ::dse::osidbg::MsgActionInfo* mutable_exitactions(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgActionInfo >*
      mutable_exitactions();
  const ::dse::osidbg::MsgActionInfo& exitactions(int index) const;
  ::dse::osidbg::MsgActionInfo* add_exitactions();
  const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgActionInfo >&
      exitactions() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.MsgGoalInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgActionInfo > initactions_;
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgActionInfo > exitactions_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgDatabaseInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.MsgDatabaseInfo) */ {
 public:
  MsgDatabaseInfo();
  virtual ~MsgDatabaseInfo();

  MsgDatabaseInfo(const MsgDatabaseInfo& from);

  inline MsgDatabaseInfo& operator=(const MsgDatabaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgDatabaseInfo(MsgDatabaseInfo&& from) noexcept
    : MsgDatabaseInfo() {
    *this = ::std::move(from);
  }

  inline MsgDatabaseInfo& operator=(MsgDatabaseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgDatabaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgDatabaseInfo* internal_default_instance() {
    return reinterpret_cast<const MsgDatabaseInfo*>(
               &_MsgDatabaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void UnsafeArenaSwap(MsgDatabaseInfo* other);
  void Swap(MsgDatabaseInfo* other);
  friend void swap(MsgDatabaseInfo& a, MsgDatabaseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgDatabaseInfo* New() const final {
    return CreateMaybeMessage<MsgDatabaseInfo>(NULL);
  }

  MsgDatabaseInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgDatabaseInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgDatabaseInfo& from);
  void MergeFrom(const MsgDatabaseInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgDatabaseInfo* other);
  protected:
  explicit MsgDatabaseInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 argumentType = 2;
  int argumenttype_size() const;
  void clear_argumenttype();
  static const int kArgumentTypeFieldNumber = 2;
  ::google::protobuf::uint32 argumenttype(int index) const;
  void set_argumenttype(int index, ::google::protobuf::uint32 value);
  void add_argumenttype(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      argumenttype() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_argumenttype();

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.MsgDatabaseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > argumenttype_;
  mutable int _argumenttype_cached_byte_size_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgNodeInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.MsgNodeInfo) */ {
 public:
  MsgNodeInfo();
  virtual ~MsgNodeInfo();

  MsgNodeInfo(const MsgNodeInfo& from);

  inline MsgNodeInfo& operator=(const MsgNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgNodeInfo(MsgNodeInfo&& from) noexcept
    : MsgNodeInfo() {
    *this = ::std::move(from);
  }

  inline MsgNodeInfo& operator=(MsgNodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgNodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgNodeInfo* internal_default_instance() {
    return reinterpret_cast<const MsgNodeInfo*>(
               &_MsgNodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void UnsafeArenaSwap(MsgNodeInfo* other);
  void Swap(MsgNodeInfo* other);
  friend void swap(MsgNodeInfo& a, MsgNodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgNodeInfo* New() const final {
    return CreateMaybeMessage<MsgNodeInfo>(NULL);
  }

  MsgNodeInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgNodeInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgNodeInfo& from);
  void MergeFrom(const MsgNodeInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgNodeInfo* other);
  protected:
  explicit MsgNodeInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.MsgNodeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgRuleInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.MsgRuleInfo) */ {
 public:
  MsgRuleInfo();
  virtual ~MsgRuleInfo();

  MsgRuleInfo(const MsgRuleInfo& from);

  inline MsgRuleInfo& operator=(const MsgRuleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgRuleInfo(MsgRuleInfo&& from) noexcept
    : MsgRuleInfo() {
    *this = ::std::move(from);
  }

  inline MsgRuleInfo& operator=(MsgRuleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const MsgRuleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgRuleInfo* internal_default_instance() {
    return reinterpret_cast<const MsgRuleInfo*>(
               &_MsgRuleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void UnsafeArenaSwap(MsgRuleInfo* other);
  void Swap(MsgRuleInfo* other);
  friend void swap(MsgRuleInfo& a, MsgRuleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgRuleInfo* New() const final {
    return CreateMaybeMessage<MsgRuleInfo>(NULL);
  }

  MsgRuleInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgRuleInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgRuleInfo& from);
  void MergeFrom(const MsgRuleInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgRuleInfo* other);
  protected:
  explicit MsgRuleInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dse.osidbg.MsgActionInfo actions = 2;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 2;
  ::dse::osidbg::MsgActionInfo* mutable_actions(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgActionInfo >*
      mutable_actions();
  const ::dse::osidbg::MsgActionInfo& actions(int index) const;
  ::dse::osidbg::MsgActionInfo* add_actions();
  const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgActionInfo >&
      actions() const;

  // uint32 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::uint32 node_id() const;
  void set_node_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.MsgRuleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgActionInfo > actions_;
  ::google::protobuf::uint32 node_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkSyncStoryData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.BkSyncStoryData) */ {
 public:
  BkSyncStoryData();
  virtual ~BkSyncStoryData();

  BkSyncStoryData(const BkSyncStoryData& from);

  inline BkSyncStoryData& operator=(const BkSyncStoryData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkSyncStoryData(BkSyncStoryData&& from) noexcept
    : BkSyncStoryData() {
    *this = ::std::move(from);
  }

  inline BkSyncStoryData& operator=(BkSyncStoryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkSyncStoryData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkSyncStoryData* internal_default_instance() {
    return reinterpret_cast<const BkSyncStoryData*>(
               &_BkSyncStoryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void UnsafeArenaSwap(BkSyncStoryData* other);
  void Swap(BkSyncStoryData* other);
  friend void swap(BkSyncStoryData& a, BkSyncStoryData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkSyncStoryData* New() const final {
    return CreateMaybeMessage<BkSyncStoryData>(NULL);
  }

  BkSyncStoryData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkSyncStoryData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkSyncStoryData& from);
  void MergeFrom(const BkSyncStoryData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkSyncStoryData* other);
  protected:
  explicit BkSyncStoryData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dse.osidbg.MsgGoalInfo goal = 1;
  int goal_size() const;
  void clear_goal();
  static const int kGoalFieldNumber = 1;
  ::dse::osidbg::MsgGoalInfo* mutable_goal(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgGoalInfo >*
      mutable_goal();
  const ::dse::osidbg::MsgGoalInfo& goal(int index) const;
  ::dse::osidbg::MsgGoalInfo* add_goal();
  const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgGoalInfo >&
      goal() const;

  // repeated .dse.osidbg.MsgDatabaseInfo database = 2;
  int database_size() const;
  void clear_database();
  static const int kDatabaseFieldNumber = 2;
  ::dse::osidbg::MsgDatabaseInfo* mutable_database(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgDatabaseInfo >*
      mutable_database();
  const ::dse::osidbg::MsgDatabaseInfo& database(int index) const;
  ::dse::osidbg::MsgDatabaseInfo* add_database();
  const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgDatabaseInfo >&
      database() const;

  // repeated .dse.osidbg.MsgNodeInfo node = 3;
  int node_size() const;
  void clear_node();
  static const int kNodeFieldNumber = 3;
  ::dse::osidbg::MsgNodeInfo* mutable_node(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgNodeInfo >*
      mutable_node();
  const ::dse::osidbg::MsgNodeInfo& node(int index) const;
  ::dse::osidbg::MsgNodeInfo* add_node();
  const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgNodeInfo >&
      node() const;

  // repeated .dse.osidbg.MsgRuleInfo rule = 4;
  int rule_size() const;
  void clear_rule();
  static const int kRuleFieldNumber = 4;
  ::dse::osidbg::MsgRuleInfo* mutable_rule(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgRuleInfo >*
      mutable_rule();
  const ::dse::osidbg::MsgRuleInfo& rule(int index) const;
  ::dse::osidbg::MsgRuleInfo* add_rule();
  const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgRuleInfo >&
      rule() const;

  // @@protoc_insertion_point(class_scope:dse.osidbg.BkSyncStoryData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgGoalInfo > goal_;
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgDatabaseInfo > database_;
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgNodeInfo > node_;
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgRuleInfo > rule_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkSyncStoryFinished : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.BkSyncStoryFinished) */ {
 public:
  BkSyncStoryFinished();
  virtual ~BkSyncStoryFinished();

  BkSyncStoryFinished(const BkSyncStoryFinished& from);

  inline BkSyncStoryFinished& operator=(const BkSyncStoryFinished& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkSyncStoryFinished(BkSyncStoryFinished&& from) noexcept
    : BkSyncStoryFinished() {
    *this = ::std::move(from);
  }

  inline BkSyncStoryFinished& operator=(BkSyncStoryFinished&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkSyncStoryFinished& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkSyncStoryFinished* internal_default_instance() {
    return reinterpret_cast<const BkSyncStoryFinished*>(
               &_BkSyncStoryFinished_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void UnsafeArenaSwap(BkSyncStoryFinished* other);
  void Swap(BkSyncStoryFinished* other);
  friend void swap(BkSyncStoryFinished& a, BkSyncStoryFinished& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkSyncStoryFinished* New() const final {
    return CreateMaybeMessage<BkSyncStoryFinished>(NULL);
  }

  BkSyncStoryFinished* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkSyncStoryFinished>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkSyncStoryFinished& from);
  void MergeFrom(const BkSyncStoryFinished& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkSyncStoryFinished* other);
  protected:
  explicit BkSyncStoryFinished(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dse.osidbg.BkSyncStoryFinished)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkDebugOutput : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.BkDebugOutput) */ {
 public:
  BkDebugOutput();
  virtual ~BkDebugOutput();

  BkDebugOutput(const BkDebugOutput& from);

  inline BkDebugOutput& operator=(const BkDebugOutput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkDebugOutput(BkDebugOutput&& from) noexcept
    : BkDebugOutput() {
    *this = ::std::move(from);
  }

  inline BkDebugOutput& operator=(BkDebugOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkDebugOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkDebugOutput* internal_default_instance() {
    return reinterpret_cast<const BkDebugOutput*>(
               &_BkDebugOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void UnsafeArenaSwap(BkDebugOutput* other);
  void Swap(BkDebugOutput* other);
  friend void swap(BkDebugOutput& a, BkDebugOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkDebugOutput* New() const final {
    return CreateMaybeMessage<BkDebugOutput>(NULL);
  }

  BkDebugOutput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkDebugOutput>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkDebugOutput& from);
  void MergeFrom(const BkDebugOutput& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkDebugOutput* other);
  protected:
  explicit BkDebugOutput(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_message();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      ::std::string* message);

  // @@protoc_insertion_point(class_scope:dse.osidbg.BkDebugOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkBeginDatabaseContents : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.BkBeginDatabaseContents) */ {
 public:
  BkBeginDatabaseContents();
  virtual ~BkBeginDatabaseContents();

  BkBeginDatabaseContents(const BkBeginDatabaseContents& from);

  inline BkBeginDatabaseContents& operator=(const BkBeginDatabaseContents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkBeginDatabaseContents(BkBeginDatabaseContents&& from) noexcept
    : BkBeginDatabaseContents() {
    *this = ::std::move(from);
  }

  inline BkBeginDatabaseContents& operator=(BkBeginDatabaseContents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkBeginDatabaseContents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkBeginDatabaseContents* internal_default_instance() {
    return reinterpret_cast<const BkBeginDatabaseContents*>(
               &_BkBeginDatabaseContents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void UnsafeArenaSwap(BkBeginDatabaseContents* other);
  void Swap(BkBeginDatabaseContents* other);
  friend void swap(BkBeginDatabaseContents& a, BkBeginDatabaseContents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkBeginDatabaseContents* New() const final {
    return CreateMaybeMessage<BkBeginDatabaseContents>(NULL);
  }

  BkBeginDatabaseContents* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkBeginDatabaseContents>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkBeginDatabaseContents& from);
  void MergeFrom(const BkBeginDatabaseContents& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkBeginDatabaseContents* other);
  protected:
  explicit BkBeginDatabaseContents(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 database_id = 1;
  void clear_database_id();
  static const int kDatabaseIdFieldNumber = 1;
  ::google::protobuf::uint32 database_id() const;
  void set_database_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.BkBeginDatabaseContents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 database_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkDatabaseRow : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.BkDatabaseRow) */ {
 public:
  BkDatabaseRow();
  virtual ~BkDatabaseRow();

  BkDatabaseRow(const BkDatabaseRow& from);

  inline BkDatabaseRow& operator=(const BkDatabaseRow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkDatabaseRow(BkDatabaseRow&& from) noexcept
    : BkDatabaseRow() {
    *this = ::std::move(from);
  }

  inline BkDatabaseRow& operator=(BkDatabaseRow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkDatabaseRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkDatabaseRow* internal_default_instance() {
    return reinterpret_cast<const BkDatabaseRow*>(
               &_BkDatabaseRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void UnsafeArenaSwap(BkDatabaseRow* other);
  void Swap(BkDatabaseRow* other);
  friend void swap(BkDatabaseRow& a, BkDatabaseRow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkDatabaseRow* New() const final {
    return CreateMaybeMessage<BkDatabaseRow>(NULL);
  }

  BkDatabaseRow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkDatabaseRow>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkDatabaseRow& from);
  void MergeFrom(const BkDatabaseRow& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkDatabaseRow* other);
  protected:
  explicit BkDatabaseRow(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dse.osidbg.MsgTuple row = 2;
  int row_size() const;
  void clear_row();
  static const int kRowFieldNumber = 2;
  ::dse::osidbg::MsgTuple* mutable_row(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgTuple >*
      mutable_row();
  const ::dse::osidbg::MsgTuple& row(int index) const;
  ::dse::osidbg::MsgTuple* add_row();
  const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgTuple >&
      row() const;

  // uint32 database_id = 1;
  void clear_database_id();
  static const int kDatabaseIdFieldNumber = 1;
  ::google::protobuf::uint32 database_id() const;
  void set_database_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.BkDatabaseRow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgTuple > row_;
  ::google::protobuf::uint32 database_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkEndDatabaseContents : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.BkEndDatabaseContents) */ {
 public:
  BkEndDatabaseContents();
  virtual ~BkEndDatabaseContents();

  BkEndDatabaseContents(const BkEndDatabaseContents& from);

  inline BkEndDatabaseContents& operator=(const BkEndDatabaseContents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkEndDatabaseContents(BkEndDatabaseContents&& from) noexcept
    : BkEndDatabaseContents() {
    *this = ::std::move(from);
  }

  inline BkEndDatabaseContents& operator=(BkEndDatabaseContents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkEndDatabaseContents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkEndDatabaseContents* internal_default_instance() {
    return reinterpret_cast<const BkEndDatabaseContents*>(
               &_BkEndDatabaseContents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void UnsafeArenaSwap(BkEndDatabaseContents* other);
  void Swap(BkEndDatabaseContents* other);
  friend void swap(BkEndDatabaseContents& a, BkEndDatabaseContents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkEndDatabaseContents* New() const final {
    return CreateMaybeMessage<BkEndDatabaseContents>(NULL);
  }

  BkEndDatabaseContents* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkEndDatabaseContents>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkEndDatabaseContents& from);
  void MergeFrom(const BkEndDatabaseContents& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkEndDatabaseContents* other);
  protected:
  explicit BkEndDatabaseContents(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 database_id = 1;
  void clear_database_id();
  static const int kDatabaseIdFieldNumber = 1;
  ::google::protobuf::uint32 database_id() const;
  void set_database_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.BkEndDatabaseContents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 database_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkEvaluateRow : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.BkEvaluateRow) */ {
 public:
  BkEvaluateRow();
  virtual ~BkEvaluateRow();

  BkEvaluateRow(const BkEvaluateRow& from);

  inline BkEvaluateRow& operator=(const BkEvaluateRow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkEvaluateRow(BkEvaluateRow&& from) noexcept
    : BkEvaluateRow() {
    *this = ::std::move(from);
  }

  inline BkEvaluateRow& operator=(BkEvaluateRow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkEvaluateRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkEvaluateRow* internal_default_instance() {
    return reinterpret_cast<const BkEvaluateRow*>(
               &_BkEvaluateRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void UnsafeArenaSwap(BkEvaluateRow* other);
  void Swap(BkEvaluateRow* other);
  friend void swap(BkEvaluateRow& a, BkEvaluateRow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkEvaluateRow* New() const final {
    return CreateMaybeMessage<BkEvaluateRow>(NULL);
  }

  BkEvaluateRow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkEvaluateRow>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkEvaluateRow& from);
  void MergeFrom(const BkEvaluateRow& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkEvaluateRow* other);
  protected:
  explicit BkEvaluateRow(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dse.osidbg.MsgTuple row = 1;
  int row_size() const;
  void clear_row();
  static const int kRowFieldNumber = 1;
  ::dse::osidbg::MsgTuple* mutable_row(int index);
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgTuple >*
      mutable_row();
  const ::dse::osidbg::MsgTuple& row(int index) const;
  ::dse::osidbg::MsgTuple* add_row();
  const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgTuple >&
      row() const;

  // @@protoc_insertion_point(class_scope:dse.osidbg.BkEvaluateRow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgTuple > row_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BkEvaluateFinished : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.BkEvaluateFinished) */ {
 public:
  BkEvaluateFinished();
  virtual ~BkEvaluateFinished();

  BkEvaluateFinished(const BkEvaluateFinished& from);

  inline BkEvaluateFinished& operator=(const BkEvaluateFinished& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BkEvaluateFinished(BkEvaluateFinished&& from) noexcept
    : BkEvaluateFinished() {
    *this = ::std::move(from);
  }

  inline BkEvaluateFinished& operator=(BkEvaluateFinished&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BkEvaluateFinished& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BkEvaluateFinished* internal_default_instance() {
    return reinterpret_cast<const BkEvaluateFinished*>(
               &_BkEvaluateFinished_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void UnsafeArenaSwap(BkEvaluateFinished* other);
  void Swap(BkEvaluateFinished* other);
  friend void swap(BkEvaluateFinished& a, BkEvaluateFinished& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BkEvaluateFinished* New() const final {
    return CreateMaybeMessage<BkEvaluateFinished>(NULL);
  }

  BkEvaluateFinished* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BkEvaluateFinished>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BkEvaluateFinished& from);
  void MergeFrom(const BkEvaluateFinished& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BkEvaluateFinished* other);
  protected:
  explicit BkEvaluateFinished(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dse.osidbg.StatusCode result_code = 1;
  void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  ::dse::osidbg::StatusCode result_code() const;
  void set_result_code(::dse::osidbg::StatusCode value);

  // bool query_succeeded = 2;
  void clear_query_succeeded();
  static const int kQuerySucceededFieldNumber = 2;
  bool query_succeeded() const;
  void set_query_succeeded(bool value);

  // @@protoc_insertion_point(class_scope:dse.osidbg.BkEvaluateFinished)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_code_;
  bool query_succeeded_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DebuggerToBackend : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.DebuggerToBackend) */ {
 public:
  DebuggerToBackend();
  virtual ~DebuggerToBackend();

  DebuggerToBackend(const DebuggerToBackend& from);

  inline DebuggerToBackend& operator=(const DebuggerToBackend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebuggerToBackend(DebuggerToBackend&& from) noexcept
    : DebuggerToBackend() {
    *this = ::std::move(from);
  }

  inline DebuggerToBackend& operator=(DebuggerToBackend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DebuggerToBackend& default_instance();

  enum MsgCase {
    kIdentify = 1,
    kSetGlobalBreakpoints = 2,
    kSetBreakpoints = 3,
    kContinue = 4,
    kGetDatabaseContents = 5,
    kSyncStory = 8,
    kEvaluate = 9,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebuggerToBackend* internal_default_instance() {
    return reinterpret_cast<const DebuggerToBackend*>(
               &_DebuggerToBackend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void UnsafeArenaSwap(DebuggerToBackend* other);
  void Swap(DebuggerToBackend* other);
  friend void swap(DebuggerToBackend& a, DebuggerToBackend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebuggerToBackend* New() const final {
    return CreateMaybeMessage<DebuggerToBackend>(NULL);
  }

  DebuggerToBackend* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DebuggerToBackend>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DebuggerToBackend& from);
  void MergeFrom(const DebuggerToBackend& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DebuggerToBackend* other);
  protected:
  explicit DebuggerToBackend(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 seq_no = 6;
  void clear_seq_no();
  static const int kSeqNoFieldNumber = 6;
  ::google::protobuf::uint32 seq_no() const;
  void set_seq_no(::google::protobuf::uint32 value);

  // uint32 reply_seq_no = 7;
  void clear_reply_seq_no();
  static const int kReplySeqNoFieldNumber = 7;
  ::google::protobuf::uint32 reply_seq_no() const;
  void set_reply_seq_no(::google::protobuf::uint32 value);

  // .dse.osidbg.DbgIdentifyRequest identify = 1;
  bool has_identify() const;
  void clear_identify();
  static const int kIdentifyFieldNumber = 1;
  private:
  const ::dse::osidbg::DbgIdentifyRequest& _internal_identify() const;
  public:
  const ::dse::osidbg::DbgIdentifyRequest& identify() const;
  ::dse::osidbg::DbgIdentifyRequest* release_identify();
  ::dse::osidbg::DbgIdentifyRequest* mutable_identify();
  void set_allocated_identify(::dse::osidbg::DbgIdentifyRequest* identify);
  void unsafe_arena_set_allocated_identify(
      ::dse::osidbg::DbgIdentifyRequest* identify);
  ::dse::osidbg::DbgIdentifyRequest* unsafe_arena_release_identify();

  // .dse.osidbg.DbgSetGlobalBreakpoints setGlobalBreakpoints = 2;
  bool has_setglobalbreakpoints() const;
  void clear_setglobalbreakpoints();
  static const int kSetGlobalBreakpointsFieldNumber = 2;
  private:
  const ::dse::osidbg::DbgSetGlobalBreakpoints& _internal_setglobalbreakpoints() const;
  public:
  const ::dse::osidbg::DbgSetGlobalBreakpoints& setglobalbreakpoints() const;
  ::dse::osidbg::DbgSetGlobalBreakpoints* release_setglobalbreakpoints();
  ::dse::osidbg::DbgSetGlobalBreakpoints* mutable_setglobalbreakpoints();
  void set_allocated_setglobalbreakpoints(::dse::osidbg::DbgSetGlobalBreakpoints* setglobalbreakpoints);
  void unsafe_arena_set_allocated_setglobalbreakpoints(
      ::dse::osidbg::DbgSetGlobalBreakpoints* setglobalbreakpoints);
  ::dse::osidbg::DbgSetGlobalBreakpoints* unsafe_arena_release_setglobalbreakpoints();

  // .dse.osidbg.DbgSetBreakpoints setBreakpoints = 3;
  bool has_setbreakpoints() const;
  void clear_setbreakpoints();
  static const int kSetBreakpointsFieldNumber = 3;
  private:
  const ::dse::osidbg::DbgSetBreakpoints& _internal_setbreakpoints() const;
  public:
  const ::dse::osidbg::DbgSetBreakpoints& setbreakpoints() const;
  ::dse::osidbg::DbgSetBreakpoints* release_setbreakpoints();
  ::dse::osidbg::DbgSetBreakpoints* mutable_setbreakpoints();
  void set_allocated_setbreakpoints(::dse::osidbg::DbgSetBreakpoints* setbreakpoints);
  void unsafe_arena_set_allocated_setbreakpoints(
      ::dse::osidbg::DbgSetBreakpoints* setbreakpoints);
  ::dse::osidbg::DbgSetBreakpoints* unsafe_arena_release_setbreakpoints();

  // .dse.osidbg.DbgContinue continue = 4;
  bool has_continue_() const;
  void clear_continue_();
  static const int kContinueFieldNumber = 4;
  private:
  const ::dse::osidbg::DbgContinue& _internal_continue_() const;
  public:
  const ::dse::osidbg::DbgContinue& continue_() const;
  ::dse::osidbg::DbgContinue* release_continue_();
  ::dse::osidbg::DbgContinue* mutable_continue_();
  void set_allocated_continue_(::dse::osidbg::DbgContinue* continue_);
  void unsafe_arena_set_allocated_continue_(
      ::dse::osidbg::DbgContinue* continue_);
  ::dse::osidbg::DbgContinue* unsafe_arena_release_continue_();

  // .dse.osidbg.DbgGetDatabaseContents getDatabaseContents = 5;
  bool has_getdatabasecontents() const;
  void clear_getdatabasecontents();
  static const int kGetDatabaseContentsFieldNumber = 5;
  private:
  const ::dse::osidbg::DbgGetDatabaseContents& _internal_getdatabasecontents() const;
  public:
  const ::dse::osidbg::DbgGetDatabaseContents& getdatabasecontents() const;
  ::dse::osidbg::DbgGetDatabaseContents* release_getdatabasecontents();
  ::dse::osidbg::DbgGetDatabaseContents* mutable_getdatabasecontents();
  void set_allocated_getdatabasecontents(::dse::osidbg::DbgGetDatabaseContents* getdatabasecontents);
  void unsafe_arena_set_allocated_getdatabasecontents(
      ::dse::osidbg::DbgGetDatabaseContents* getdatabasecontents);
  ::dse::osidbg::DbgGetDatabaseContents* unsafe_arena_release_getdatabasecontents();

  // .dse.osidbg.DbgSyncStory syncStory = 8;
  bool has_syncstory() const;
  void clear_syncstory();
  static const int kSyncStoryFieldNumber = 8;
  private:
  const ::dse::osidbg::DbgSyncStory& _internal_syncstory() const;
  public:
  const ::dse::osidbg::DbgSyncStory& syncstory() const;
  ::dse::osidbg::DbgSyncStory* release_syncstory();
  ::dse::osidbg::DbgSyncStory* mutable_syncstory();
  void set_allocated_syncstory(::dse::osidbg::DbgSyncStory* syncstory);
  void unsafe_arena_set_allocated_syncstory(
      ::dse::osidbg::DbgSyncStory* syncstory);
  ::dse::osidbg::DbgSyncStory* unsafe_arena_release_syncstory();

  // .dse.osidbg.DbgEvaluate evaluate = 9;
  bool has_evaluate() const;
  void clear_evaluate();
  static const int kEvaluateFieldNumber = 9;
  private:
  const ::dse::osidbg::DbgEvaluate& _internal_evaluate() const;
  public:
  const ::dse::osidbg::DbgEvaluate& evaluate() const;
  ::dse::osidbg::DbgEvaluate* release_evaluate();
  ::dse::osidbg::DbgEvaluate* mutable_evaluate();
  void set_allocated_evaluate(::dse::osidbg::DbgEvaluate* evaluate);
  void unsafe_arena_set_allocated_evaluate(
      ::dse::osidbg::DbgEvaluate* evaluate);
  ::dse::osidbg::DbgEvaluate* unsafe_arena_release_evaluate();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:dse.osidbg.DebuggerToBackend)
 private:
  void set_has_identify();
  void set_has_setglobalbreakpoints();
  void set_has_setbreakpoints();
  void set_has_continue_();
  void set_has_getdatabasecontents();
  void set_has_syncstory();
  void set_has_evaluate();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 seq_no_;
  ::google::protobuf::uint32 reply_seq_no_;
  union MsgUnion {
    MsgUnion() {}
    ::dse::osidbg::DbgIdentifyRequest* identify_;
    ::dse::osidbg::DbgSetGlobalBreakpoints* setglobalbreakpoints_;
    ::dse::osidbg::DbgSetBreakpoints* setbreakpoints_;
    ::dse::osidbg::DbgContinue* continue__;
    ::dse::osidbg::DbgGetDatabaseContents* getdatabasecontents_;
    ::dse::osidbg::DbgSyncStory* syncstory_;
    ::dse::osidbg::DbgEvaluate* evaluate_;
  } msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackendToDebugger : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dse.osidbg.BackendToDebugger) */ {
 public:
  BackendToDebugger();
  virtual ~BackendToDebugger();

  BackendToDebugger(const BackendToDebugger& from);

  inline BackendToDebugger& operator=(const BackendToDebugger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BackendToDebugger(BackendToDebugger&& from) noexcept
    : BackendToDebugger() {
    *this = ::std::move(from);
  }

  inline BackendToDebugger& operator=(BackendToDebugger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const BackendToDebugger& default_instance();

  enum MsgCase {
    kVersionInfo = 1,
    kBreakpointTriggered = 2,
    kResults = 4,
    kStoryLoaded = 5,
    kDebugSessionEnded = 6,
    kGlobalBreakpointTriggered = 7,
    kSyncStoryData = 10,
    kSyncStoryFinished = 11,
    kDebugOutput = 12,
    kBeginDatabaseContents = 13,
    kDatabaseRow = 14,
    kEndDatabaseContents = 15,
    kEvaluateRow = 16,
    kEvaluateFinished = 17,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackendToDebugger* internal_default_instance() {
    return reinterpret_cast<const BackendToDebugger*>(
               &_BackendToDebugger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void UnsafeArenaSwap(BackendToDebugger* other);
  void Swap(BackendToDebugger* other);
  friend void swap(BackendToDebugger& a, BackendToDebugger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BackendToDebugger* New() const final {
    return CreateMaybeMessage<BackendToDebugger>(NULL);
  }

  BackendToDebugger* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BackendToDebugger>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BackendToDebugger& from);
  void MergeFrom(const BackendToDebugger& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackendToDebugger* other);
  protected:
  explicit BackendToDebugger(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 seq_no = 8;
  void clear_seq_no();
  static const int kSeqNoFieldNumber = 8;
  ::google::protobuf::uint32 seq_no() const;
  void set_seq_no(::google::protobuf::uint32 value);

  // uint32 reply_seq_no = 9;
  void clear_reply_seq_no();
  static const int kReplySeqNoFieldNumber = 9;
  ::google::protobuf::uint32 reply_seq_no() const;
  void set_reply_seq_no(::google::protobuf::uint32 value);

  // .dse.osidbg.BkVersionInfoResponse versionInfo = 1;
  bool has_versioninfo() const;
  void clear_versioninfo();
  static const int kVersionInfoFieldNumber = 1;
  private:
  const ::dse::osidbg::BkVersionInfoResponse& _internal_versioninfo() const;
  public:
  const ::dse::osidbg::BkVersionInfoResponse& versioninfo() const;
  ::dse::osidbg::BkVersionInfoResponse* release_versioninfo();
  ::dse::osidbg::BkVersionInfoResponse* mutable_versioninfo();
  void set_allocated_versioninfo(::dse::osidbg::BkVersionInfoResponse* versioninfo);
  void unsafe_arena_set_allocated_versioninfo(
      ::dse::osidbg::BkVersionInfoResponse* versioninfo);
  ::dse::osidbg::BkVersionInfoResponse* unsafe_arena_release_versioninfo();

  // .dse.osidbg.BkBreakpointTriggered breakpointTriggered = 2;
  bool has_breakpointtriggered() const;
  void clear_breakpointtriggered();
  static const int kBreakpointTriggeredFieldNumber = 2;
  private:
  const ::dse::osidbg::BkBreakpointTriggered& _internal_breakpointtriggered() const;
  public:
  const ::dse::osidbg::BkBreakpointTriggered& breakpointtriggered() const;
  ::dse::osidbg::BkBreakpointTriggered* release_breakpointtriggered();
  ::dse::osidbg::BkBreakpointTriggered* mutable_breakpointtriggered();
  void set_allocated_breakpointtriggered(::dse::osidbg::BkBreakpointTriggered* breakpointtriggered);
  void unsafe_arena_set_allocated_breakpointtriggered(
      ::dse::osidbg::BkBreakpointTriggered* breakpointtriggered);
  ::dse::osidbg::BkBreakpointTriggered* unsafe_arena_release_breakpointtriggered();

  // .dse.osidbg.BkResult results = 4;
  bool has_results() const;
  void clear_results();
  static const int kResultsFieldNumber = 4;
  private:
  const ::dse::osidbg::BkResult& _internal_results() const;
  public:
  const ::dse::osidbg::BkResult& results() const;
  ::dse::osidbg::BkResult* release_results();
  ::dse::osidbg::BkResult* mutable_results();
  void set_allocated_results(::dse::osidbg::BkResult* results);
  void unsafe_arena_set_allocated_results(
      ::dse::osidbg::BkResult* results);
  ::dse::osidbg::BkResult* unsafe_arena_release_results();

  // .dse.osidbg.BkStoryLoaded storyLoaded = 5;
  bool has_storyloaded() const;
  void clear_storyloaded();
  static const int kStoryLoadedFieldNumber = 5;
  private:
  const ::dse::osidbg::BkStoryLoaded& _internal_storyloaded() const;
  public:
  const ::dse::osidbg::BkStoryLoaded& storyloaded() const;
  ::dse::osidbg::BkStoryLoaded* release_storyloaded();
  ::dse::osidbg::BkStoryLoaded* mutable_storyloaded();
  void set_allocated_storyloaded(::dse::osidbg::BkStoryLoaded* storyloaded);
  void unsafe_arena_set_allocated_storyloaded(
      ::dse::osidbg::BkStoryLoaded* storyloaded);
  ::dse::osidbg::BkStoryLoaded* unsafe_arena_release_storyloaded();

  // .dse.osidbg.BkDebugSessionEnded debugSessionEnded = 6;
  bool has_debugsessionended() const;
  void clear_debugsessionended();
  static const int kDebugSessionEndedFieldNumber = 6;
  private:
  const ::dse::osidbg::BkDebugSessionEnded& _internal_debugsessionended() const;
  public:
  const ::dse::osidbg::BkDebugSessionEnded& debugsessionended() const;
  ::dse::osidbg::BkDebugSessionEnded* release_debugsessionended();
  ::dse::osidbg::BkDebugSessionEnded* mutable_debugsessionended();
  void set_allocated_debugsessionended(::dse::osidbg::BkDebugSessionEnded* debugsessionended);
  void unsafe_arena_set_allocated_debugsessionended(
      ::dse::osidbg::BkDebugSessionEnded* debugsessionended);
  ::dse::osidbg::BkDebugSessionEnded* unsafe_arena_release_debugsessionended();

  // .dse.osidbg.BkGlobalBreakpointTriggered globalBreakpointTriggered = 7;
  bool has_globalbreakpointtriggered() const;
  void clear_globalbreakpointtriggered();
  static const int kGlobalBreakpointTriggeredFieldNumber = 7;
  private:
  const ::dse::osidbg::BkGlobalBreakpointTriggered& _internal_globalbreakpointtriggered() const;
  public:
  const ::dse::osidbg::BkGlobalBreakpointTriggered& globalbreakpointtriggered() const;
  ::dse::osidbg::BkGlobalBreakpointTriggered* release_globalbreakpointtriggered();
  ::dse::osidbg::BkGlobalBreakpointTriggered* mutable_globalbreakpointtriggered();
  void set_allocated_globalbreakpointtriggered(::dse::osidbg::BkGlobalBreakpointTriggered* globalbreakpointtriggered);
  void unsafe_arena_set_allocated_globalbreakpointtriggered(
      ::dse::osidbg::BkGlobalBreakpointTriggered* globalbreakpointtriggered);
  ::dse::osidbg::BkGlobalBreakpointTriggered* unsafe_arena_release_globalbreakpointtriggered();

  // .dse.osidbg.BkSyncStoryData syncStoryData = 10;
  bool has_syncstorydata() const;
  void clear_syncstorydata();
  static const int kSyncStoryDataFieldNumber = 10;
  private:
  const ::dse::osidbg::BkSyncStoryData& _internal_syncstorydata() const;
  public:
  const ::dse::osidbg::BkSyncStoryData& syncstorydata() const;
  ::dse::osidbg::BkSyncStoryData* release_syncstorydata();
  ::dse::osidbg::BkSyncStoryData* mutable_syncstorydata();
  void set_allocated_syncstorydata(::dse::osidbg::BkSyncStoryData* syncstorydata);
  void unsafe_arena_set_allocated_syncstorydata(
      ::dse::osidbg::BkSyncStoryData* syncstorydata);
  ::dse::osidbg::BkSyncStoryData* unsafe_arena_release_syncstorydata();

  // .dse.osidbg.BkSyncStoryFinished syncStoryFinished = 11;
  bool has_syncstoryfinished() const;
  void clear_syncstoryfinished();
  static const int kSyncStoryFinishedFieldNumber = 11;
  private:
  const ::dse::osidbg::BkSyncStoryFinished& _internal_syncstoryfinished() const;
  public:
  const ::dse::osidbg::BkSyncStoryFinished& syncstoryfinished() const;
  ::dse::osidbg::BkSyncStoryFinished* release_syncstoryfinished();
  ::dse::osidbg::BkSyncStoryFinished* mutable_syncstoryfinished();
  void set_allocated_syncstoryfinished(::dse::osidbg::BkSyncStoryFinished* syncstoryfinished);
  void unsafe_arena_set_allocated_syncstoryfinished(
      ::dse::osidbg::BkSyncStoryFinished* syncstoryfinished);
  ::dse::osidbg::BkSyncStoryFinished* unsafe_arena_release_syncstoryfinished();

  // .dse.osidbg.BkDebugOutput debugOutput = 12;
  bool has_debugoutput() const;
  void clear_debugoutput();
  static const int kDebugOutputFieldNumber = 12;
  private:
  const ::dse::osidbg::BkDebugOutput& _internal_debugoutput() const;
  public:
  const ::dse::osidbg::BkDebugOutput& debugoutput() const;
  ::dse::osidbg::BkDebugOutput* release_debugoutput();
  ::dse::osidbg::BkDebugOutput* mutable_debugoutput();
  void set_allocated_debugoutput(::dse::osidbg::BkDebugOutput* debugoutput);
  void unsafe_arena_set_allocated_debugoutput(
      ::dse::osidbg::BkDebugOutput* debugoutput);
  ::dse::osidbg::BkDebugOutput* unsafe_arena_release_debugoutput();

  // .dse.osidbg.BkBeginDatabaseContents beginDatabaseContents = 13;
  bool has_begindatabasecontents() const;
  void clear_begindatabasecontents();
  static const int kBeginDatabaseContentsFieldNumber = 13;
  private:
  const ::dse::osidbg::BkBeginDatabaseContents& _internal_begindatabasecontents() const;
  public:
  const ::dse::osidbg::BkBeginDatabaseContents& begindatabasecontents() const;
  ::dse::osidbg::BkBeginDatabaseContents* release_begindatabasecontents();
  ::dse::osidbg::BkBeginDatabaseContents* mutable_begindatabasecontents();
  void set_allocated_begindatabasecontents(::dse::osidbg::BkBeginDatabaseContents* begindatabasecontents);
  void unsafe_arena_set_allocated_begindatabasecontents(
      ::dse::osidbg::BkBeginDatabaseContents* begindatabasecontents);
  ::dse::osidbg::BkBeginDatabaseContents* unsafe_arena_release_begindatabasecontents();

  // .dse.osidbg.BkDatabaseRow databaseRow = 14;
  bool has_databaserow() const;
  void clear_databaserow();
  static const int kDatabaseRowFieldNumber = 14;
  private:
  const ::dse::osidbg::BkDatabaseRow& _internal_databaserow() const;
  public:
  const ::dse::osidbg::BkDatabaseRow& databaserow() const;
  ::dse::osidbg::BkDatabaseRow* release_databaserow();
  ::dse::osidbg::BkDatabaseRow* mutable_databaserow();
  void set_allocated_databaserow(::dse::osidbg::BkDatabaseRow* databaserow);
  void unsafe_arena_set_allocated_databaserow(
      ::dse::osidbg::BkDatabaseRow* databaserow);
  ::dse::osidbg::BkDatabaseRow* unsafe_arena_release_databaserow();

  // .dse.osidbg.BkEndDatabaseContents endDatabaseContents = 15;
  bool has_enddatabasecontents() const;
  void clear_enddatabasecontents();
  static const int kEndDatabaseContentsFieldNumber = 15;
  private:
  const ::dse::osidbg::BkEndDatabaseContents& _internal_enddatabasecontents() const;
  public:
  const ::dse::osidbg::BkEndDatabaseContents& enddatabasecontents() const;
  ::dse::osidbg::BkEndDatabaseContents* release_enddatabasecontents();
  ::dse::osidbg::BkEndDatabaseContents* mutable_enddatabasecontents();
  void set_allocated_enddatabasecontents(::dse::osidbg::BkEndDatabaseContents* enddatabasecontents);
  void unsafe_arena_set_allocated_enddatabasecontents(
      ::dse::osidbg::BkEndDatabaseContents* enddatabasecontents);
  ::dse::osidbg::BkEndDatabaseContents* unsafe_arena_release_enddatabasecontents();

  // .dse.osidbg.BkEvaluateRow evaluateRow = 16;
  bool has_evaluaterow() const;
  void clear_evaluaterow();
  static const int kEvaluateRowFieldNumber = 16;
  private:
  const ::dse::osidbg::BkEvaluateRow& _internal_evaluaterow() const;
  public:
  const ::dse::osidbg::BkEvaluateRow& evaluaterow() const;
  ::dse::osidbg::BkEvaluateRow* release_evaluaterow();
  ::dse::osidbg::BkEvaluateRow* mutable_evaluaterow();
  void set_allocated_evaluaterow(::dse::osidbg::BkEvaluateRow* evaluaterow);
  void unsafe_arena_set_allocated_evaluaterow(
      ::dse::osidbg::BkEvaluateRow* evaluaterow);
  ::dse::osidbg::BkEvaluateRow* unsafe_arena_release_evaluaterow();

  // .dse.osidbg.BkEvaluateFinished evaluateFinished = 17;
  bool has_evaluatefinished() const;
  void clear_evaluatefinished();
  static const int kEvaluateFinishedFieldNumber = 17;
  private:
  const ::dse::osidbg::BkEvaluateFinished& _internal_evaluatefinished() const;
  public:
  const ::dse::osidbg::BkEvaluateFinished& evaluatefinished() const;
  ::dse::osidbg::BkEvaluateFinished* release_evaluatefinished();
  ::dse::osidbg::BkEvaluateFinished* mutable_evaluatefinished();
  void set_allocated_evaluatefinished(::dse::osidbg::BkEvaluateFinished* evaluatefinished);
  void unsafe_arena_set_allocated_evaluatefinished(
      ::dse::osidbg::BkEvaluateFinished* evaluatefinished);
  ::dse::osidbg::BkEvaluateFinished* unsafe_arena_release_evaluatefinished();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:dse.osidbg.BackendToDebugger)
 private:
  void set_has_versioninfo();
  void set_has_breakpointtriggered();
  void set_has_results();
  void set_has_storyloaded();
  void set_has_debugsessionended();
  void set_has_globalbreakpointtriggered();
  void set_has_syncstorydata();
  void set_has_syncstoryfinished();
  void set_has_debugoutput();
  void set_has_begindatabasecontents();
  void set_has_databaserow();
  void set_has_enddatabasecontents();
  void set_has_evaluaterow();
  void set_has_evaluatefinished();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 seq_no_;
  ::google::protobuf::uint32 reply_seq_no_;
  union MsgUnion {
    MsgUnion() {}
    ::dse::osidbg::BkVersionInfoResponse* versioninfo_;
    ::dse::osidbg::BkBreakpointTriggered* breakpointtriggered_;
    ::dse::osidbg::BkResult* results_;
    ::dse::osidbg::BkStoryLoaded* storyloaded_;
    ::dse::osidbg::BkDebugSessionEnded* debugsessionended_;
    ::dse::osidbg::BkGlobalBreakpointTriggered* globalbreakpointtriggered_;
    ::dse::osidbg::BkSyncStoryData* syncstorydata_;
    ::dse::osidbg::BkSyncStoryFinished* syncstoryfinished_;
    ::dse::osidbg::BkDebugOutput* debugoutput_;
    ::dse::osidbg::BkBeginDatabaseContents* begindatabasecontents_;
    ::dse::osidbg::BkDatabaseRow* databaserow_;
    ::dse::osidbg::BkEndDatabaseContents* enddatabasecontents_;
    ::dse::osidbg::BkEvaluateRow* evaluaterow_;
    ::dse::osidbg::BkEvaluateFinished* evaluatefinished_;
  } msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_osidebug_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgTypedValue

// uint32 type_id = 1;
inline void MsgTypedValue::clear_type_id() {
  type_id_ = 0u;
}
inline ::google::protobuf::uint32 MsgTypedValue::type_id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgTypedValue.type_id)
  return type_id_;
}
inline void MsgTypedValue::set_type_id(::google::protobuf::uint32 value) {
  
  type_id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgTypedValue.type_id)
}

// int64 intval = 2;
inline bool MsgTypedValue::has_intval() const {
  return value_case() == kIntval;
}
inline void MsgTypedValue::set_has_intval() {
  _oneof_case_[0] = kIntval;
}
inline void MsgTypedValue::clear_intval() {
  if (has_intval()) {
    value_.intval_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 MsgTypedValue::intval() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgTypedValue.intval)
  if (has_intval()) {
    return value_.intval_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void MsgTypedValue::set_intval(::google::protobuf::int64 value) {
  if (!has_intval()) {
    clear_value();
    set_has_intval();
  }
  value_.intval_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgTypedValue.intval)
}

// float floatval = 3;
inline bool MsgTypedValue::has_floatval() const {
  return value_case() == kFloatval;
}
inline void MsgTypedValue::set_has_floatval() {
  _oneof_case_[0] = kFloatval;
}
inline void MsgTypedValue::clear_floatval() {
  if (has_floatval()) {
    value_.floatval_ = 0;
    clear_has_value();
  }
}
inline float MsgTypedValue::floatval() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgTypedValue.floatval)
  if (has_floatval()) {
    return value_.floatval_;
  }
  return 0;
}
inline void MsgTypedValue::set_floatval(float value) {
  if (!has_floatval()) {
    clear_value();
    set_has_floatval();
  }
  value_.floatval_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgTypedValue.floatval)
}

// string stringval = 4;
inline bool MsgTypedValue::has_stringval() const {
  return value_case() == kStringval;
}
inline void MsgTypedValue::set_has_stringval() {
  _oneof_case_[0] = kStringval;
}
inline void MsgTypedValue::clear_stringval() {
  if (has_stringval()) {
    value_.stringval_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_value();
  }
}
inline const ::std::string& MsgTypedValue::stringval() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgTypedValue.stringval)
  if (has_stringval()) {
    return value_.stringval_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void MsgTypedValue::set_stringval(const ::std::string& value) {
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.stringval_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgTypedValue.stringval)
}
#if LANG_CXX11
inline void MsgTypedValue::set_stringval(::std::string&& value) {
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgTypedValue.stringval)
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.stringval_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.osidbg.MsgTypedValue.stringval)
}
#endif
inline void MsgTypedValue::set_stringval(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.stringval_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.osidbg.MsgTypedValue.stringval)
}
inline void MsgTypedValue::set_stringval(const char* value,
                             size_t size) {
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.stringval_.SetLite(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.osidbg.MsgTypedValue.stringval)
}
inline ::std::string* MsgTypedValue::mutable_stringval() {
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return value_.stringval_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:dse.osidbg.MsgTypedValue.stringval)
}
inline ::std::string* MsgTypedValue::release_stringval() {
  // @@protoc_insertion_point(field_release:dse.osidbg.MsgTypedValue.stringval)
  if (has_stringval()) {
    clear_has_value();
    return value_.stringval_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void MsgTypedValue::set_allocated_stringval(::std::string* stringval) {
  if (!has_stringval()) {
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (stringval != NULL) {
    set_has_stringval();
    value_.stringval_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stringval,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:dse.osidbg.MsgTypedValue.stringval)
}
inline ::std::string* MsgTypedValue::unsafe_arena_release_stringval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.MsgTypedValue.stringval)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_stringval()) {
    clear_has_value();
    return value_.stringval_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void MsgTypedValue::unsafe_arena_set_allocated_stringval(::std::string* stringval) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_stringval()) {
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (stringval) {
    set_has_stringval();
    value_.stringval_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stringval, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.MsgTypedValue.stringval)
}

inline bool MsgTypedValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void MsgTypedValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline MsgTypedValue::ValueCase MsgTypedValue::value_case() const {
  return MsgTypedValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MsgTuple

// repeated .dse.osidbg.MsgTypedValue column = 1;
inline int MsgTuple::column_size() const {
  return column_.size();
}
inline void MsgTuple::clear_column() {
  column_.Clear();
}
inline ::dse::osidbg::MsgTypedValue* MsgTuple::mutable_column(int index) {
  // @@protoc_insertion_point(field_mutable:dse.osidbg.MsgTuple.column)
  return column_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgTypedValue >*
MsgTuple::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:dse.osidbg.MsgTuple.column)
  return &column_;
}
inline const ::dse::osidbg::MsgTypedValue& MsgTuple::column(int index) const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgTuple.column)
  return column_.Get(index);
}
inline ::dse::osidbg::MsgTypedValue* MsgTuple::add_column() {
  // @@protoc_insertion_point(field_add:dse.osidbg.MsgTuple.column)
  return column_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgTypedValue >&
MsgTuple::column() const {
  // @@protoc_insertion_point(field_list:dse.osidbg.MsgTuple.column)
  return column_;
}

// -------------------------------------------------------------------

// MsgFrame

// uint32 node_id = 1;
inline void MsgFrame::clear_node_id() {
  node_id_ = 0u;
}
inline ::google::protobuf::uint32 MsgFrame::node_id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgFrame.node_id)
  return node_id_;
}
inline void MsgFrame::set_node_id(::google::protobuf::uint32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgFrame.node_id)
}

// .dse.osidbg.MsgFrame.FrameType type = 2;
inline void MsgFrame::clear_type() {
  type_ = 0;
}
inline ::dse::osidbg::MsgFrame_FrameType MsgFrame::type() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgFrame.type)
  return static_cast< ::dse::osidbg::MsgFrame_FrameType >(type_);
}
inline void MsgFrame::set_type(::dse::osidbg::MsgFrame_FrameType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgFrame.type)
}

// .dse.osidbg.MsgTuple tuple = 3;
inline bool MsgFrame::has_tuple() const {
  return this != internal_default_instance() && tuple_ != NULL;
}
inline void MsgFrame::clear_tuple() {
  if (GetArenaNoVirtual() == NULL && tuple_ != NULL) {
    delete tuple_;
  }
  tuple_ = NULL;
}
inline const ::dse::osidbg::MsgTuple& MsgFrame::_internal_tuple() const {
  return *tuple_;
}
inline const ::dse::osidbg::MsgTuple& MsgFrame::tuple() const {
  const ::dse::osidbg::MsgTuple* p = tuple_;
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgFrame.tuple)
  return p != NULL ? *p : *reinterpret_cast<const ::dse::osidbg::MsgTuple*>(
      &::dse::osidbg::_MsgTuple_default_instance_);
}
inline ::dse::osidbg::MsgTuple* MsgFrame::release_tuple() {
  // @@protoc_insertion_point(field_release:dse.osidbg.MsgFrame.tuple)
  
  ::dse::osidbg::MsgTuple* temp = tuple_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  tuple_ = NULL;
  return temp;
}
inline ::dse::osidbg::MsgTuple* MsgFrame::unsafe_arena_release_tuple() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.MsgFrame.tuple)
  
  ::dse::osidbg::MsgTuple* temp = tuple_;
  tuple_ = NULL;
  return temp;
}
inline ::dse::osidbg::MsgTuple* MsgFrame::mutable_tuple() {
  
  if (tuple_ == NULL) {
    auto* p = CreateMaybeMessage<::dse::osidbg::MsgTuple>(GetArenaNoVirtual());
    tuple_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.MsgFrame.tuple)
  return tuple_;
}
inline void MsgFrame::set_allocated_tuple(::dse::osidbg::MsgTuple* tuple) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tuple_;
  }
  if (tuple) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(tuple);
    if (message_arena != submessage_arena) {
      tuple = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tuple, submessage_arena);
    }
    
  } else {
    
  }
  tuple_ = tuple;
  // @@protoc_insertion_point(field_set_allocated:dse.osidbg.MsgFrame.tuple)
}

// uint32 goal_id = 4;
inline void MsgFrame::clear_goal_id() {
  goal_id_ = 0u;
}
inline ::google::protobuf::uint32 MsgFrame::goal_id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgFrame.goal_id)
  return goal_id_;
}
inline void MsgFrame::set_goal_id(::google::protobuf::uint32 value) {
  
  goal_id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgFrame.goal_id)
}

// uint32 action_index = 5;
inline void MsgFrame::clear_action_index() {
  action_index_ = 0u;
}
inline ::google::protobuf::uint32 MsgFrame::action_index() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgFrame.action_index)
  return action_index_;
}
inline void MsgFrame::set_action_index(::google::protobuf::uint32 value) {
  
  action_index_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgFrame.action_index)
}

// -------------------------------------------------------------------

// DbgIdentifyRequest

// uint32 protocol_version = 1;
inline void DbgIdentifyRequest::clear_protocol_version() {
  protocol_version_ = 0u;
}
inline ::google::protobuf::uint32 DbgIdentifyRequest::protocol_version() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DbgIdentifyRequest.protocol_version)
  return protocol_version_;
}
inline void DbgIdentifyRequest::set_protocol_version(::google::protobuf::uint32 value) {
  
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.DbgIdentifyRequest.protocol_version)
}

// -------------------------------------------------------------------

// BkVersionInfoResponse

// uint32 protocol_version = 1;
inline void BkVersionInfoResponse::clear_protocol_version() {
  protocol_version_ = 0u;
}
inline ::google::protobuf::uint32 BkVersionInfoResponse::protocol_version() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkVersionInfoResponse.protocol_version)
  return protocol_version_;
}
inline void BkVersionInfoResponse::set_protocol_version(::google::protobuf::uint32 value) {
  
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.BkVersionInfoResponse.protocol_version)
}

// bool story_loaded = 2;
inline void BkVersionInfoResponse::clear_story_loaded() {
  story_loaded_ = false;
}
inline bool BkVersionInfoResponse::story_loaded() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkVersionInfoResponse.story_loaded)
  return story_loaded_;
}
inline void BkVersionInfoResponse::set_story_loaded(bool value) {
  
  story_loaded_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.BkVersionInfoResponse.story_loaded)
}

// bool story_initialized = 4;
inline void BkVersionInfoResponse::clear_story_initialized() {
  story_initialized_ = false;
}
inline bool BkVersionInfoResponse::story_initialized() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkVersionInfoResponse.story_initialized)
  return story_initialized_;
}
inline void BkVersionInfoResponse::set_story_initialized(bool value) {
  
  story_initialized_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.BkVersionInfoResponse.story_initialized)
}

// -------------------------------------------------------------------

// DbgSetGlobalBreakpoints

// uint32 breakpoint_mask = 1;
inline void DbgSetGlobalBreakpoints::clear_breakpoint_mask() {
  breakpoint_mask_ = 0u;
}
inline ::google::protobuf::uint32 DbgSetGlobalBreakpoints::breakpoint_mask() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DbgSetGlobalBreakpoints.breakpoint_mask)
  return breakpoint_mask_;
}
inline void DbgSetGlobalBreakpoints::set_breakpoint_mask(::google::protobuf::uint32 value) {
  
  breakpoint_mask_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.DbgSetGlobalBreakpoints.breakpoint_mask)
}

// -------------------------------------------------------------------

// MsgBreakpoint

// uint32 node_id = 1;
inline void MsgBreakpoint::clear_node_id() {
  node_id_ = 0u;
}
inline ::google::protobuf::uint32 MsgBreakpoint::node_id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgBreakpoint.node_id)
  return node_id_;
}
inline void MsgBreakpoint::set_node_id(::google::protobuf::uint32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgBreakpoint.node_id)
}

// uint32 breakpoint_mask = 2;
inline void MsgBreakpoint::clear_breakpoint_mask() {
  breakpoint_mask_ = 0u;
}
inline ::google::protobuf::uint32 MsgBreakpoint::breakpoint_mask() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgBreakpoint.breakpoint_mask)
  return breakpoint_mask_;
}
inline void MsgBreakpoint::set_breakpoint_mask(::google::protobuf::uint32 value) {
  
  breakpoint_mask_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgBreakpoint.breakpoint_mask)
}

// uint32 goal_id = 3;
inline void MsgBreakpoint::clear_goal_id() {
  goal_id_ = 0u;
}
inline ::google::protobuf::uint32 MsgBreakpoint::goal_id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgBreakpoint.goal_id)
  return goal_id_;
}
inline void MsgBreakpoint::set_goal_id(::google::protobuf::uint32 value) {
  
  goal_id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgBreakpoint.goal_id)
}

// bool is_init_action = 4;
inline void MsgBreakpoint::clear_is_init_action() {
  is_init_action_ = false;
}
inline bool MsgBreakpoint::is_init_action() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgBreakpoint.is_init_action)
  return is_init_action_;
}
inline void MsgBreakpoint::set_is_init_action(bool value) {
  
  is_init_action_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgBreakpoint.is_init_action)
}

// int32 action_index = 5;
inline void MsgBreakpoint::clear_action_index() {
  action_index_ = 0;
}
inline ::google::protobuf::int32 MsgBreakpoint::action_index() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgBreakpoint.action_index)
  return action_index_;
}
inline void MsgBreakpoint::set_action_index(::google::protobuf::int32 value) {
  
  action_index_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgBreakpoint.action_index)
}

// -------------------------------------------------------------------

// DbgSetBreakpoints

// repeated .dse.osidbg.MsgBreakpoint breakpoint = 1;
inline int DbgSetBreakpoints::breakpoint_size() const {
  return breakpoint_.size();
}
inline void DbgSetBreakpoints::clear_breakpoint() {
  breakpoint_.Clear();
}
inline ::dse::osidbg::MsgBreakpoint* DbgSetBreakpoints::mutable_breakpoint(int index) {
  // @@protoc_insertion_point(field_mutable:dse.osidbg.DbgSetBreakpoints.breakpoint)
  return breakpoint_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgBreakpoint >*
DbgSetBreakpoints::mutable_breakpoint() {
  // @@protoc_insertion_point(field_mutable_list:dse.osidbg.DbgSetBreakpoints.breakpoint)
  return &breakpoint_;
}
inline const ::dse::osidbg::MsgBreakpoint& DbgSetBreakpoints::breakpoint(int index) const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DbgSetBreakpoints.breakpoint)
  return breakpoint_.Get(index);
}
inline ::dse::osidbg::MsgBreakpoint* DbgSetBreakpoints::add_breakpoint() {
  // @@protoc_insertion_point(field_add:dse.osidbg.DbgSetBreakpoints.breakpoint)
  return breakpoint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgBreakpoint >&
DbgSetBreakpoints::breakpoint() const {
  // @@protoc_insertion_point(field_list:dse.osidbg.DbgSetBreakpoints.breakpoint)
  return breakpoint_;
}

// -------------------------------------------------------------------

// BkBreakpointTriggered

// repeated .dse.osidbg.MsgFrame call_stack = 1;
inline int BkBreakpointTriggered::call_stack_size() const {
  return call_stack_.size();
}
inline void BkBreakpointTriggered::clear_call_stack() {
  call_stack_.Clear();
}
inline ::dse::osidbg::MsgFrame* BkBreakpointTriggered::mutable_call_stack(int index) {
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BkBreakpointTriggered.call_stack)
  return call_stack_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgFrame >*
BkBreakpointTriggered::mutable_call_stack() {
  // @@protoc_insertion_point(field_mutable_list:dse.osidbg.BkBreakpointTriggered.call_stack)
  return &call_stack_;
}
inline const ::dse::osidbg::MsgFrame& BkBreakpointTriggered::call_stack(int index) const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkBreakpointTriggered.call_stack)
  return call_stack_.Get(index);
}
inline ::dse::osidbg::MsgFrame* BkBreakpointTriggered::add_call_stack() {
  // @@protoc_insertion_point(field_add:dse.osidbg.BkBreakpointTriggered.call_stack)
  return call_stack_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgFrame >&
BkBreakpointTriggered::call_stack() const {
  // @@protoc_insertion_point(field_list:dse.osidbg.BkBreakpointTriggered.call_stack)
  return call_stack_;
}

// .dse.osidbg.BkBreakpointTriggered.QueryStatus query_succeeded = 2;
inline void BkBreakpointTriggered::clear_query_succeeded() {
  query_succeeded_ = 0;
}
inline ::dse::osidbg::BkBreakpointTriggered_QueryStatus BkBreakpointTriggered::query_succeeded() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkBreakpointTriggered.query_succeeded)
  return static_cast< ::dse::osidbg::BkBreakpointTriggered_QueryStatus >(query_succeeded_);
}
inline void BkBreakpointTriggered::set_query_succeeded(::dse::osidbg::BkBreakpointTriggered_QueryStatus value) {
  
  query_succeeded_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.BkBreakpointTriggered.query_succeeded)
}

// .dse.osidbg.MsgTuple query_results = 3;
inline bool BkBreakpointTriggered::has_query_results() const {
  return this != internal_default_instance() && query_results_ != NULL;
}
inline void BkBreakpointTriggered::clear_query_results() {
  if (GetArenaNoVirtual() == NULL && query_results_ != NULL) {
    delete query_results_;
  }
  query_results_ = NULL;
}
inline const ::dse::osidbg::MsgTuple& BkBreakpointTriggered::_internal_query_results() const {
  return *query_results_;
}
inline const ::dse::osidbg::MsgTuple& BkBreakpointTriggered::query_results() const {
  const ::dse::osidbg::MsgTuple* p = query_results_;
  // @@protoc_insertion_point(field_get:dse.osidbg.BkBreakpointTriggered.query_results)
  return p != NULL ? *p : *reinterpret_cast<const ::dse::osidbg::MsgTuple*>(
      &::dse::osidbg::_MsgTuple_default_instance_);
}
inline ::dse::osidbg::MsgTuple* BkBreakpointTriggered::release_query_results() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BkBreakpointTriggered.query_results)
  
  ::dse::osidbg::MsgTuple* temp = query_results_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  query_results_ = NULL;
  return temp;
}
inline ::dse::osidbg::MsgTuple* BkBreakpointTriggered::unsafe_arena_release_query_results() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BkBreakpointTriggered.query_results)
  
  ::dse::osidbg::MsgTuple* temp = query_results_;
  query_results_ = NULL;
  return temp;
}
inline ::dse::osidbg::MsgTuple* BkBreakpointTriggered::mutable_query_results() {
  
  if (query_results_ == NULL) {
    auto* p = CreateMaybeMessage<::dse::osidbg::MsgTuple>(GetArenaNoVirtual());
    query_results_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BkBreakpointTriggered.query_results)
  return query_results_;
}
inline void BkBreakpointTriggered::set_allocated_query_results(::dse::osidbg::MsgTuple* query_results) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete query_results_;
  }
  if (query_results) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(query_results);
    if (message_arena != submessage_arena) {
      query_results = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query_results, submessage_arena);
    }
    
  } else {
    
  }
  query_results_ = query_results;
  // @@protoc_insertion_point(field_set_allocated:dse.osidbg.BkBreakpointTriggered.query_results)
}

// uint32 query_node_id = 4;
inline void BkBreakpointTriggered::clear_query_node_id() {
  query_node_id_ = 0u;
}
inline ::google::protobuf::uint32 BkBreakpointTriggered::query_node_id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkBreakpointTriggered.query_node_id)
  return query_node_id_;
}
inline void BkBreakpointTriggered::set_query_node_id(::google::protobuf::uint32 value) {
  
  query_node_id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.BkBreakpointTriggered.query_node_id)
}

// -------------------------------------------------------------------

// BkGlobalBreakpointTriggered

// .dse.osidbg.BkGlobalBreakpointTriggered.Reason reason = 1;
inline void BkGlobalBreakpointTriggered::clear_reason() {
  reason_ = 0;
}
inline ::dse::osidbg::BkGlobalBreakpointTriggered_Reason BkGlobalBreakpointTriggered::reason() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkGlobalBreakpointTriggered.reason)
  return static_cast< ::dse::osidbg::BkGlobalBreakpointTriggered_Reason >(reason_);
}
inline void BkGlobalBreakpointTriggered::set_reason(::dse::osidbg::BkGlobalBreakpointTriggered_Reason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.BkGlobalBreakpointTriggered.reason)
}

// -------------------------------------------------------------------

// DbgContinue

// .dse.osidbg.DbgContinue.Action action = 1;
inline void DbgContinue::clear_action() {
  action_ = 0;
}
inline ::dse::osidbg::DbgContinue_Action DbgContinue::action() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DbgContinue.action)
  return static_cast< ::dse::osidbg::DbgContinue_Action >(action_);
}
inline void DbgContinue::set_action(::dse::osidbg::DbgContinue_Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.DbgContinue.action)
}

// uint32 breakpoint_mask = 2;
inline void DbgContinue::clear_breakpoint_mask() {
  breakpoint_mask_ = 0u;
}
inline ::google::protobuf::uint32 DbgContinue::breakpoint_mask() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DbgContinue.breakpoint_mask)
  return breakpoint_mask_;
}
inline void DbgContinue::set_breakpoint_mask(::google::protobuf::uint32 value) {
  
  breakpoint_mask_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.DbgContinue.breakpoint_mask)
}

// uint32 flags = 3;
inline void DbgContinue::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 DbgContinue::flags() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DbgContinue.flags)
  return flags_;
}
inline void DbgContinue::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.DbgContinue.flags)
}

// -------------------------------------------------------------------

// DbgGetDatabaseContents

// uint32 database_id = 1;
inline void DbgGetDatabaseContents::clear_database_id() {
  database_id_ = 0u;
}
inline ::google::protobuf::uint32 DbgGetDatabaseContents::database_id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DbgGetDatabaseContents.database_id)
  return database_id_;
}
inline void DbgGetDatabaseContents::set_database_id(::google::protobuf::uint32 value) {
  
  database_id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.DbgGetDatabaseContents.database_id)
}

// -------------------------------------------------------------------

// DbgSyncStory

// -------------------------------------------------------------------

// DbgEvaluate

// .dse.osidbg.DbgEvaluate.EvalType type = 1;
inline void DbgEvaluate::clear_type() {
  type_ = 0;
}
inline ::dse::osidbg::DbgEvaluate_EvalType DbgEvaluate::type() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DbgEvaluate.type)
  return static_cast< ::dse::osidbg::DbgEvaluate_EvalType >(type_);
}
inline void DbgEvaluate::set_type(::dse::osidbg::DbgEvaluate_EvalType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.DbgEvaluate.type)
}

// uint32 node_id = 2;
inline void DbgEvaluate::clear_node_id() {
  node_id_ = 0u;
}
inline ::google::protobuf::uint32 DbgEvaluate::node_id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DbgEvaluate.node_id)
  return node_id_;
}
inline void DbgEvaluate::set_node_id(::google::protobuf::uint32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.DbgEvaluate.node_id)
}

// .dse.osidbg.MsgTuple params = 3;
inline bool DbgEvaluate::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void DbgEvaluate::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
}
inline const ::dse::osidbg::MsgTuple& DbgEvaluate::_internal_params() const {
  return *params_;
}
inline const ::dse::osidbg::MsgTuple& DbgEvaluate::params() const {
  const ::dse::osidbg::MsgTuple* p = params_;
  // @@protoc_insertion_point(field_get:dse.osidbg.DbgEvaluate.params)
  return p != NULL ? *p : *reinterpret_cast<const ::dse::osidbg::MsgTuple*>(
      &::dse::osidbg::_MsgTuple_default_instance_);
}
inline ::dse::osidbg::MsgTuple* DbgEvaluate::release_params() {
  // @@protoc_insertion_point(field_release:dse.osidbg.DbgEvaluate.params)
  
  ::dse::osidbg::MsgTuple* temp = params_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  params_ = NULL;
  return temp;
}
inline ::dse::osidbg::MsgTuple* DbgEvaluate::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.DbgEvaluate.params)
  
  ::dse::osidbg::MsgTuple* temp = params_;
  params_ = NULL;
  return temp;
}
inline ::dse::osidbg::MsgTuple* DbgEvaluate::mutable_params() {
  
  if (params_ == NULL) {
    auto* p = CreateMaybeMessage<::dse::osidbg::MsgTuple>(GetArenaNoVirtual());
    params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.DbgEvaluate.params)
  return params_;
}
inline void DbgEvaluate::set_allocated_params(::dse::osidbg::MsgTuple* params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete params_;
  }
  if (params) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(params);
    if (message_arena != submessage_arena) {
      params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:dse.osidbg.DbgEvaluate.params)
}

// -------------------------------------------------------------------

// BkResult

// .dse.osidbg.StatusCode status_code = 1;
inline void BkResult::clear_status_code() {
  status_code_ = 0;
}
inline ::dse::osidbg::StatusCode BkResult::status_code() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkResult.status_code)
  return static_cast< ::dse::osidbg::StatusCode >(status_code_);
}
inline void BkResult::set_status_code(::dse::osidbg::StatusCode value) {
  
  status_code_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.BkResult.status_code)
}

// -------------------------------------------------------------------

// BkStoryLoaded

// -------------------------------------------------------------------

// BkDebugSessionEnded

// -------------------------------------------------------------------

// MsgActionInfo

// string function = 1;
inline void MsgActionInfo::clear_function() {
  function_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsgActionInfo::function() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgActionInfo.function)
  return function_.Get();
}
inline void MsgActionInfo::set_function(const ::std::string& value) {
  
  function_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgActionInfo.function)
}
#if LANG_CXX11
inline void MsgActionInfo::set_function(::std::string&& value) {
  
  function_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.osidbg.MsgActionInfo.function)
}
#endif
inline void MsgActionInfo::set_function(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  function_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.osidbg.MsgActionInfo.function)
}
inline void MsgActionInfo::set_function(const char* value,
    size_t size) {
  
  function_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.osidbg.MsgActionInfo.function)
}
inline ::std::string* MsgActionInfo::mutable_function() {
  
  // @@protoc_insertion_point(field_mutable:dse.osidbg.MsgActionInfo.function)
  return function_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsgActionInfo::release_function() {
  // @@protoc_insertion_point(field_release:dse.osidbg.MsgActionInfo.function)
  
  return function_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MsgActionInfo::set_allocated_function(::std::string* function) {
  if (function != NULL) {
    
  } else {
    
  }
  function_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.osidbg.MsgActionInfo.function)
}
inline ::std::string* MsgActionInfo::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.MsgActionInfo.function)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return function_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsgActionInfo::unsafe_arena_set_allocated_function(
    ::std::string* function) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (function != NULL) {
    
  } else {
    
  }
  function_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      function, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.MsgActionInfo.function)
}

// uint32 arity = 2;
inline void MsgActionInfo::clear_arity() {
  arity_ = 0u;
}
inline ::google::protobuf::uint32 MsgActionInfo::arity() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgActionInfo.arity)
  return arity_;
}
inline void MsgActionInfo::set_arity(::google::protobuf::uint32 value) {
  
  arity_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgActionInfo.arity)
}

// int32 goal_id = 3;
inline void MsgActionInfo::clear_goal_id() {
  goal_id_ = 0;
}
inline ::google::protobuf::int32 MsgActionInfo::goal_id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgActionInfo.goal_id)
  return goal_id_;
}
inline void MsgActionInfo::set_goal_id(::google::protobuf::int32 value) {
  
  goal_id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgActionInfo.goal_id)
}

// -------------------------------------------------------------------

// MsgGoalInfo

// uint32 id = 1;
inline void MsgGoalInfo::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 MsgGoalInfo::id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgGoalInfo.id)
  return id_;
}
inline void MsgGoalInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgGoalInfo.id)
}

// string name = 2;
inline void MsgGoalInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsgGoalInfo::name() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgGoalInfo.name)
  return name_.Get();
}
inline void MsgGoalInfo::set_name(const ::std::string& value) {
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgGoalInfo.name)
}
#if LANG_CXX11
inline void MsgGoalInfo::set_name(::std::string&& value) {
  
  name_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.osidbg.MsgGoalInfo.name)
}
#endif
inline void MsgGoalInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.osidbg.MsgGoalInfo.name)
}
inline void MsgGoalInfo::set_name(const char* value,
    size_t size) {
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.osidbg.MsgGoalInfo.name)
}
inline ::std::string* MsgGoalInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dse.osidbg.MsgGoalInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsgGoalInfo::release_name() {
  // @@protoc_insertion_point(field_release:dse.osidbg.MsgGoalInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MsgGoalInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.osidbg.MsgGoalInfo.name)
}
inline ::std::string* MsgGoalInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.MsgGoalInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsgGoalInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.MsgGoalInfo.name)
}

// repeated .dse.osidbg.MsgActionInfo initActions = 3;
inline int MsgGoalInfo::initactions_size() const {
  return initactions_.size();
}
inline void MsgGoalInfo::clear_initactions() {
  initactions_.Clear();
}
inline ::dse::osidbg::MsgActionInfo* MsgGoalInfo::mutable_initactions(int index) {
  // @@protoc_insertion_point(field_mutable:dse.osidbg.MsgGoalInfo.initActions)
  return initactions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgActionInfo >*
MsgGoalInfo::mutable_initactions() {
  // @@protoc_insertion_point(field_mutable_list:dse.osidbg.MsgGoalInfo.initActions)
  return &initactions_;
}
inline const ::dse::osidbg::MsgActionInfo& MsgGoalInfo::initactions(int index) const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgGoalInfo.initActions)
  return initactions_.Get(index);
}
inline ::dse::osidbg::MsgActionInfo* MsgGoalInfo::add_initactions() {
  // @@protoc_insertion_point(field_add:dse.osidbg.MsgGoalInfo.initActions)
  return initactions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgActionInfo >&
MsgGoalInfo::initactions() const {
  // @@protoc_insertion_point(field_list:dse.osidbg.MsgGoalInfo.initActions)
  return initactions_;
}

// repeated .dse.osidbg.MsgActionInfo exitActions = 4;
inline int MsgGoalInfo::exitactions_size() const {
  return exitactions_.size();
}
inline void MsgGoalInfo::clear_exitactions() {
  exitactions_.Clear();
}
inline ::dse::osidbg::MsgActionInfo* MsgGoalInfo::mutable_exitactions(int index) {
  // @@protoc_insertion_point(field_mutable:dse.osidbg.MsgGoalInfo.exitActions)
  return exitactions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgActionInfo >*
MsgGoalInfo::mutable_exitactions() {
  // @@protoc_insertion_point(field_mutable_list:dse.osidbg.MsgGoalInfo.exitActions)
  return &exitactions_;
}
inline const ::dse::osidbg::MsgActionInfo& MsgGoalInfo::exitactions(int index) const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgGoalInfo.exitActions)
  return exitactions_.Get(index);
}
inline ::dse::osidbg::MsgActionInfo* MsgGoalInfo::add_exitactions() {
  // @@protoc_insertion_point(field_add:dse.osidbg.MsgGoalInfo.exitActions)
  return exitactions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgActionInfo >&
MsgGoalInfo::exitactions() const {
  // @@protoc_insertion_point(field_list:dse.osidbg.MsgGoalInfo.exitActions)
  return exitactions_;
}

// -------------------------------------------------------------------

// MsgDatabaseInfo

// uint32 id = 1;
inline void MsgDatabaseInfo::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 MsgDatabaseInfo::id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgDatabaseInfo.id)
  return id_;
}
inline void MsgDatabaseInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgDatabaseInfo.id)
}

// repeated uint32 argumentType = 2;
inline int MsgDatabaseInfo::argumenttype_size() const {
  return argumenttype_.size();
}
inline void MsgDatabaseInfo::clear_argumenttype() {
  argumenttype_.Clear();
}
inline ::google::protobuf::uint32 MsgDatabaseInfo::argumenttype(int index) const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgDatabaseInfo.argumentType)
  return argumenttype_.Get(index);
}
inline void MsgDatabaseInfo::set_argumenttype(int index, ::google::protobuf::uint32 value) {
  argumenttype_.Set(index, value);
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgDatabaseInfo.argumentType)
}
inline void MsgDatabaseInfo::add_argumenttype(::google::protobuf::uint32 value) {
  argumenttype_.Add(value);
  // @@protoc_insertion_point(field_add:dse.osidbg.MsgDatabaseInfo.argumentType)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MsgDatabaseInfo::argumenttype() const {
  // @@protoc_insertion_point(field_list:dse.osidbg.MsgDatabaseInfo.argumentType)
  return argumenttype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MsgDatabaseInfo::mutable_argumenttype() {
  // @@protoc_insertion_point(field_mutable_list:dse.osidbg.MsgDatabaseInfo.argumentType)
  return &argumenttype_;
}

// -------------------------------------------------------------------

// MsgNodeInfo

// uint32 id = 1;
inline void MsgNodeInfo::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 MsgNodeInfo::id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgNodeInfo.id)
  return id_;
}
inline void MsgNodeInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgNodeInfo.id)
}

// uint32 type = 2;
inline void MsgNodeInfo::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 MsgNodeInfo::type() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgNodeInfo.type)
  return type_;
}
inline void MsgNodeInfo::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgNodeInfo.type)
}

// string name = 3;
inline void MsgNodeInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsgNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgNodeInfo.name)
  return name_.Get();
}
inline void MsgNodeInfo::set_name(const ::std::string& value) {
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgNodeInfo.name)
}
#if LANG_CXX11
inline void MsgNodeInfo::set_name(::std::string&& value) {
  
  name_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.osidbg.MsgNodeInfo.name)
}
#endif
inline void MsgNodeInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.osidbg.MsgNodeInfo.name)
}
inline void MsgNodeInfo::set_name(const char* value,
    size_t size) {
  
  name_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.osidbg.MsgNodeInfo.name)
}
inline ::std::string* MsgNodeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dse.osidbg.MsgNodeInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsgNodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:dse.osidbg.MsgNodeInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MsgNodeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.osidbg.MsgNodeInfo.name)
}
inline ::std::string* MsgNodeInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.MsgNodeInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsgNodeInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.MsgNodeInfo.name)
}

// -------------------------------------------------------------------

// MsgRuleInfo

// uint32 node_id = 1;
inline void MsgRuleInfo::clear_node_id() {
  node_id_ = 0u;
}
inline ::google::protobuf::uint32 MsgRuleInfo::node_id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgRuleInfo.node_id)
  return node_id_;
}
inline void MsgRuleInfo::set_node_id(::google::protobuf::uint32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.MsgRuleInfo.node_id)
}

// repeated .dse.osidbg.MsgActionInfo actions = 2;
inline int MsgRuleInfo::actions_size() const {
  return actions_.size();
}
inline void MsgRuleInfo::clear_actions() {
  actions_.Clear();
}
inline ::dse::osidbg::MsgActionInfo* MsgRuleInfo::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:dse.osidbg.MsgRuleInfo.actions)
  return actions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgActionInfo >*
MsgRuleInfo::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:dse.osidbg.MsgRuleInfo.actions)
  return &actions_;
}
inline const ::dse::osidbg::MsgActionInfo& MsgRuleInfo::actions(int index) const {
  // @@protoc_insertion_point(field_get:dse.osidbg.MsgRuleInfo.actions)
  return actions_.Get(index);
}
inline ::dse::osidbg::MsgActionInfo* MsgRuleInfo::add_actions() {
  // @@protoc_insertion_point(field_add:dse.osidbg.MsgRuleInfo.actions)
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgActionInfo >&
MsgRuleInfo::actions() const {
  // @@protoc_insertion_point(field_list:dse.osidbg.MsgRuleInfo.actions)
  return actions_;
}

// -------------------------------------------------------------------

// BkSyncStoryData

// repeated .dse.osidbg.MsgGoalInfo goal = 1;
inline int BkSyncStoryData::goal_size() const {
  return goal_.size();
}
inline void BkSyncStoryData::clear_goal() {
  goal_.Clear();
}
inline ::dse::osidbg::MsgGoalInfo* BkSyncStoryData::mutable_goal(int index) {
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BkSyncStoryData.goal)
  return goal_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgGoalInfo >*
BkSyncStoryData::mutable_goal() {
  // @@protoc_insertion_point(field_mutable_list:dse.osidbg.BkSyncStoryData.goal)
  return &goal_;
}
inline const ::dse::osidbg::MsgGoalInfo& BkSyncStoryData::goal(int index) const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkSyncStoryData.goal)
  return goal_.Get(index);
}
inline ::dse::osidbg::MsgGoalInfo* BkSyncStoryData::add_goal() {
  // @@protoc_insertion_point(field_add:dse.osidbg.BkSyncStoryData.goal)
  return goal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgGoalInfo >&
BkSyncStoryData::goal() const {
  // @@protoc_insertion_point(field_list:dse.osidbg.BkSyncStoryData.goal)
  return goal_;
}

// repeated .dse.osidbg.MsgDatabaseInfo database = 2;
inline int BkSyncStoryData::database_size() const {
  return database_.size();
}
inline void BkSyncStoryData::clear_database() {
  database_.Clear();
}
inline ::dse::osidbg::MsgDatabaseInfo* BkSyncStoryData::mutable_database(int index) {
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BkSyncStoryData.database)
  return database_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgDatabaseInfo >*
BkSyncStoryData::mutable_database() {
  // @@protoc_insertion_point(field_mutable_list:dse.osidbg.BkSyncStoryData.database)
  return &database_;
}
inline const ::dse::osidbg::MsgDatabaseInfo& BkSyncStoryData::database(int index) const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkSyncStoryData.database)
  return database_.Get(index);
}
inline ::dse::osidbg::MsgDatabaseInfo* BkSyncStoryData::add_database() {
  // @@protoc_insertion_point(field_add:dse.osidbg.BkSyncStoryData.database)
  return database_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgDatabaseInfo >&
BkSyncStoryData::database() const {
  // @@protoc_insertion_point(field_list:dse.osidbg.BkSyncStoryData.database)
  return database_;
}

// repeated .dse.osidbg.MsgNodeInfo node = 3;
inline int BkSyncStoryData::node_size() const {
  return node_.size();
}
inline void BkSyncStoryData::clear_node() {
  node_.Clear();
}
inline ::dse::osidbg::MsgNodeInfo* BkSyncStoryData::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BkSyncStoryData.node)
  return node_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgNodeInfo >*
BkSyncStoryData::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:dse.osidbg.BkSyncStoryData.node)
  return &node_;
}
inline const ::dse::osidbg::MsgNodeInfo& BkSyncStoryData::node(int index) const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkSyncStoryData.node)
  return node_.Get(index);
}
inline ::dse::osidbg::MsgNodeInfo* BkSyncStoryData::add_node() {
  // @@protoc_insertion_point(field_add:dse.osidbg.BkSyncStoryData.node)
  return node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgNodeInfo >&
BkSyncStoryData::node() const {
  // @@protoc_insertion_point(field_list:dse.osidbg.BkSyncStoryData.node)
  return node_;
}

// repeated .dse.osidbg.MsgRuleInfo rule = 4;
inline int BkSyncStoryData::rule_size() const {
  return rule_.size();
}
inline void BkSyncStoryData::clear_rule() {
  rule_.Clear();
}
inline ::dse::osidbg::MsgRuleInfo* BkSyncStoryData::mutable_rule(int index) {
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BkSyncStoryData.rule)
  return rule_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgRuleInfo >*
BkSyncStoryData::mutable_rule() {
  // @@protoc_insertion_point(field_mutable_list:dse.osidbg.BkSyncStoryData.rule)
  return &rule_;
}
inline const ::dse::osidbg::MsgRuleInfo& BkSyncStoryData::rule(int index) const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkSyncStoryData.rule)
  return rule_.Get(index);
}
inline ::dse::osidbg::MsgRuleInfo* BkSyncStoryData::add_rule() {
  // @@protoc_insertion_point(field_add:dse.osidbg.BkSyncStoryData.rule)
  return rule_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgRuleInfo >&
BkSyncStoryData::rule() const {
  // @@protoc_insertion_point(field_list:dse.osidbg.BkSyncStoryData.rule)
  return rule_;
}

// -------------------------------------------------------------------

// BkSyncStoryFinished

// -------------------------------------------------------------------

// BkDebugOutput

// string message = 1;
inline void BkDebugOutput::clear_message() {
  message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BkDebugOutput::message() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkDebugOutput.message)
  return message_.Get();
}
inline void BkDebugOutput::set_message(const ::std::string& value) {
  
  message_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dse.osidbg.BkDebugOutput.message)
}
#if LANG_CXX11
inline void BkDebugOutput::set_message(::std::string&& value) {
  
  message_.SetLite(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dse.osidbg.BkDebugOutput.message)
}
#endif
inline void BkDebugOutput::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dse.osidbg.BkDebugOutput.message)
}
inline void BkDebugOutput::set_message(const char* value,
    size_t size) {
  
  message_.SetLite(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dse.osidbg.BkDebugOutput.message)
}
inline ::std::string* BkDebugOutput::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BkDebugOutput.message)
  return message_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BkDebugOutput::release_message() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BkDebugOutput.message)
  
  return message_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void BkDebugOutput::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dse.osidbg.BkDebugOutput.message)
}
inline ::std::string* BkDebugOutput::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BkDebugOutput.message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return message_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BkDebugOutput::unsafe_arena_set_allocated_message(
    ::std::string* message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (message != NULL) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.BkDebugOutput.message)
}

// -------------------------------------------------------------------

// BkBeginDatabaseContents

// uint32 database_id = 1;
inline void BkBeginDatabaseContents::clear_database_id() {
  database_id_ = 0u;
}
inline ::google::protobuf::uint32 BkBeginDatabaseContents::database_id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkBeginDatabaseContents.database_id)
  return database_id_;
}
inline void BkBeginDatabaseContents::set_database_id(::google::protobuf::uint32 value) {
  
  database_id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.BkBeginDatabaseContents.database_id)
}

// -------------------------------------------------------------------

// BkDatabaseRow

// uint32 database_id = 1;
inline void BkDatabaseRow::clear_database_id() {
  database_id_ = 0u;
}
inline ::google::protobuf::uint32 BkDatabaseRow::database_id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkDatabaseRow.database_id)
  return database_id_;
}
inline void BkDatabaseRow::set_database_id(::google::protobuf::uint32 value) {
  
  database_id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.BkDatabaseRow.database_id)
}

// repeated .dse.osidbg.MsgTuple row = 2;
inline int BkDatabaseRow::row_size() const {
  return row_.size();
}
inline void BkDatabaseRow::clear_row() {
  row_.Clear();
}
inline ::dse::osidbg::MsgTuple* BkDatabaseRow::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BkDatabaseRow.row)
  return row_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgTuple >*
BkDatabaseRow::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:dse.osidbg.BkDatabaseRow.row)
  return &row_;
}
inline const ::dse::osidbg::MsgTuple& BkDatabaseRow::row(int index) const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkDatabaseRow.row)
  return row_.Get(index);
}
inline ::dse::osidbg::MsgTuple* BkDatabaseRow::add_row() {
  // @@protoc_insertion_point(field_add:dse.osidbg.BkDatabaseRow.row)
  return row_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgTuple >&
BkDatabaseRow::row() const {
  // @@protoc_insertion_point(field_list:dse.osidbg.BkDatabaseRow.row)
  return row_;
}

// -------------------------------------------------------------------

// BkEndDatabaseContents

// uint32 database_id = 1;
inline void BkEndDatabaseContents::clear_database_id() {
  database_id_ = 0u;
}
inline ::google::protobuf::uint32 BkEndDatabaseContents::database_id() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkEndDatabaseContents.database_id)
  return database_id_;
}
inline void BkEndDatabaseContents::set_database_id(::google::protobuf::uint32 value) {
  
  database_id_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.BkEndDatabaseContents.database_id)
}

// -------------------------------------------------------------------

// BkEvaluateRow

// repeated .dse.osidbg.MsgTuple row = 1;
inline int BkEvaluateRow::row_size() const {
  return row_.size();
}
inline void BkEvaluateRow::clear_row() {
  row_.Clear();
}
inline ::dse::osidbg::MsgTuple* BkEvaluateRow::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BkEvaluateRow.row)
  return row_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgTuple >*
BkEvaluateRow::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:dse.osidbg.BkEvaluateRow.row)
  return &row_;
}
inline const ::dse::osidbg::MsgTuple& BkEvaluateRow::row(int index) const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkEvaluateRow.row)
  return row_.Get(index);
}
inline ::dse::osidbg::MsgTuple* BkEvaluateRow::add_row() {
  // @@protoc_insertion_point(field_add:dse.osidbg.BkEvaluateRow.row)
  return row_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dse::osidbg::MsgTuple >&
BkEvaluateRow::row() const {
  // @@protoc_insertion_point(field_list:dse.osidbg.BkEvaluateRow.row)
  return row_;
}

// -------------------------------------------------------------------

// BkEvaluateFinished

// .dse.osidbg.StatusCode result_code = 1;
inline void BkEvaluateFinished::clear_result_code() {
  result_code_ = 0;
}
inline ::dse::osidbg::StatusCode BkEvaluateFinished::result_code() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkEvaluateFinished.result_code)
  return static_cast< ::dse::osidbg::StatusCode >(result_code_);
}
inline void BkEvaluateFinished::set_result_code(::dse::osidbg::StatusCode value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.BkEvaluateFinished.result_code)
}

// bool query_succeeded = 2;
inline void BkEvaluateFinished::clear_query_succeeded() {
  query_succeeded_ = false;
}
inline bool BkEvaluateFinished::query_succeeded() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BkEvaluateFinished.query_succeeded)
  return query_succeeded_;
}
inline void BkEvaluateFinished::set_query_succeeded(bool value) {
  
  query_succeeded_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.BkEvaluateFinished.query_succeeded)
}

// -------------------------------------------------------------------

// DebuggerToBackend

// .dse.osidbg.DbgIdentifyRequest identify = 1;
inline bool DebuggerToBackend::has_identify() const {
  return msg_case() == kIdentify;
}
inline void DebuggerToBackend::set_has_identify() {
  _oneof_case_[0] = kIdentify;
}
inline void DebuggerToBackend::clear_identify() {
  if (has_identify()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.identify_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::DbgIdentifyRequest& DebuggerToBackend::_internal_identify() const {
  return *msg_.identify_;
}
inline ::dse::osidbg::DbgIdentifyRequest* DebuggerToBackend::release_identify() {
  // @@protoc_insertion_point(field_release:dse.osidbg.DebuggerToBackend.identify)
  if (has_identify()) {
    clear_has_msg();
      ::dse::osidbg::DbgIdentifyRequest* temp = msg_.identify_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.identify_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::DbgIdentifyRequest& DebuggerToBackend::identify() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DebuggerToBackend.identify)
  return has_identify()
      ? *msg_.identify_
      : *reinterpret_cast< ::dse::osidbg::DbgIdentifyRequest*>(&::dse::osidbg::_DbgIdentifyRequest_default_instance_);
}
inline ::dse::osidbg::DbgIdentifyRequest* DebuggerToBackend::unsafe_arena_release_identify() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.DebuggerToBackend.identify)
  if (has_identify()) {
    clear_has_msg();
    ::dse::osidbg::DbgIdentifyRequest* temp = msg_.identify_;
    msg_.identify_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DebuggerToBackend::unsafe_arena_set_allocated_identify(::dse::osidbg::DbgIdentifyRequest* identify) {
  clear_msg();
  if (identify) {
    set_has_identify();
    msg_.identify_ = identify;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.DebuggerToBackend.identify)
}
inline ::dse::osidbg::DbgIdentifyRequest* DebuggerToBackend::mutable_identify() {
  if (!has_identify()) {
    clear_msg();
    set_has_identify();
    msg_.identify_ = CreateMaybeMessage< ::dse::osidbg::DbgIdentifyRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.DebuggerToBackend.identify)
  return msg_.identify_;
}

// .dse.osidbg.DbgSetGlobalBreakpoints setGlobalBreakpoints = 2;
inline bool DebuggerToBackend::has_setglobalbreakpoints() const {
  return msg_case() == kSetGlobalBreakpoints;
}
inline void DebuggerToBackend::set_has_setglobalbreakpoints() {
  _oneof_case_[0] = kSetGlobalBreakpoints;
}
inline void DebuggerToBackend::clear_setglobalbreakpoints() {
  if (has_setglobalbreakpoints()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.setglobalbreakpoints_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::DbgSetGlobalBreakpoints& DebuggerToBackend::_internal_setglobalbreakpoints() const {
  return *msg_.setglobalbreakpoints_;
}
inline ::dse::osidbg::DbgSetGlobalBreakpoints* DebuggerToBackend::release_setglobalbreakpoints() {
  // @@protoc_insertion_point(field_release:dse.osidbg.DebuggerToBackend.setGlobalBreakpoints)
  if (has_setglobalbreakpoints()) {
    clear_has_msg();
      ::dse::osidbg::DbgSetGlobalBreakpoints* temp = msg_.setglobalbreakpoints_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.setglobalbreakpoints_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::DbgSetGlobalBreakpoints& DebuggerToBackend::setglobalbreakpoints() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DebuggerToBackend.setGlobalBreakpoints)
  return has_setglobalbreakpoints()
      ? *msg_.setglobalbreakpoints_
      : *reinterpret_cast< ::dse::osidbg::DbgSetGlobalBreakpoints*>(&::dse::osidbg::_DbgSetGlobalBreakpoints_default_instance_);
}
inline ::dse::osidbg::DbgSetGlobalBreakpoints* DebuggerToBackend::unsafe_arena_release_setglobalbreakpoints() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.DebuggerToBackend.setGlobalBreakpoints)
  if (has_setglobalbreakpoints()) {
    clear_has_msg();
    ::dse::osidbg::DbgSetGlobalBreakpoints* temp = msg_.setglobalbreakpoints_;
    msg_.setglobalbreakpoints_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DebuggerToBackend::unsafe_arena_set_allocated_setglobalbreakpoints(::dse::osidbg::DbgSetGlobalBreakpoints* setglobalbreakpoints) {
  clear_msg();
  if (setglobalbreakpoints) {
    set_has_setglobalbreakpoints();
    msg_.setglobalbreakpoints_ = setglobalbreakpoints;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.DebuggerToBackend.setGlobalBreakpoints)
}
inline ::dse::osidbg::DbgSetGlobalBreakpoints* DebuggerToBackend::mutable_setglobalbreakpoints() {
  if (!has_setglobalbreakpoints()) {
    clear_msg();
    set_has_setglobalbreakpoints();
    msg_.setglobalbreakpoints_ = CreateMaybeMessage< ::dse::osidbg::DbgSetGlobalBreakpoints >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.DebuggerToBackend.setGlobalBreakpoints)
  return msg_.setglobalbreakpoints_;
}

// .dse.osidbg.DbgSetBreakpoints setBreakpoints = 3;
inline bool DebuggerToBackend::has_setbreakpoints() const {
  return msg_case() == kSetBreakpoints;
}
inline void DebuggerToBackend::set_has_setbreakpoints() {
  _oneof_case_[0] = kSetBreakpoints;
}
inline void DebuggerToBackend::clear_setbreakpoints() {
  if (has_setbreakpoints()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.setbreakpoints_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::DbgSetBreakpoints& DebuggerToBackend::_internal_setbreakpoints() const {
  return *msg_.setbreakpoints_;
}
inline ::dse::osidbg::DbgSetBreakpoints* DebuggerToBackend::release_setbreakpoints() {
  // @@protoc_insertion_point(field_release:dse.osidbg.DebuggerToBackend.setBreakpoints)
  if (has_setbreakpoints()) {
    clear_has_msg();
      ::dse::osidbg::DbgSetBreakpoints* temp = msg_.setbreakpoints_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.setbreakpoints_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::DbgSetBreakpoints& DebuggerToBackend::setbreakpoints() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DebuggerToBackend.setBreakpoints)
  return has_setbreakpoints()
      ? *msg_.setbreakpoints_
      : *reinterpret_cast< ::dse::osidbg::DbgSetBreakpoints*>(&::dse::osidbg::_DbgSetBreakpoints_default_instance_);
}
inline ::dse::osidbg::DbgSetBreakpoints* DebuggerToBackend::unsafe_arena_release_setbreakpoints() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.DebuggerToBackend.setBreakpoints)
  if (has_setbreakpoints()) {
    clear_has_msg();
    ::dse::osidbg::DbgSetBreakpoints* temp = msg_.setbreakpoints_;
    msg_.setbreakpoints_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DebuggerToBackend::unsafe_arena_set_allocated_setbreakpoints(::dse::osidbg::DbgSetBreakpoints* setbreakpoints) {
  clear_msg();
  if (setbreakpoints) {
    set_has_setbreakpoints();
    msg_.setbreakpoints_ = setbreakpoints;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.DebuggerToBackend.setBreakpoints)
}
inline ::dse::osidbg::DbgSetBreakpoints* DebuggerToBackend::mutable_setbreakpoints() {
  if (!has_setbreakpoints()) {
    clear_msg();
    set_has_setbreakpoints();
    msg_.setbreakpoints_ = CreateMaybeMessage< ::dse::osidbg::DbgSetBreakpoints >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.DebuggerToBackend.setBreakpoints)
  return msg_.setbreakpoints_;
}

// .dse.osidbg.DbgContinue continue = 4;
inline bool DebuggerToBackend::has_continue_() const {
  return msg_case() == kContinue;
}
inline void DebuggerToBackend::set_has_continue_() {
  _oneof_case_[0] = kContinue;
}
inline void DebuggerToBackend::clear_continue_() {
  if (has_continue_()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.continue__;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::DbgContinue& DebuggerToBackend::_internal_continue_() const {
  return *msg_.continue__;
}
inline ::dse::osidbg::DbgContinue* DebuggerToBackend::release_continue_() {
  // @@protoc_insertion_point(field_release:dse.osidbg.DebuggerToBackend.continue)
  if (has_continue_()) {
    clear_has_msg();
      ::dse::osidbg::DbgContinue* temp = msg_.continue__;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.continue__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::DbgContinue& DebuggerToBackend::continue_() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DebuggerToBackend.continue)
  return has_continue_()
      ? *msg_.continue__
      : *reinterpret_cast< ::dse::osidbg::DbgContinue*>(&::dse::osidbg::_DbgContinue_default_instance_);
}
inline ::dse::osidbg::DbgContinue* DebuggerToBackend::unsafe_arena_release_continue_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.DebuggerToBackend.continue)
  if (has_continue_()) {
    clear_has_msg();
    ::dse::osidbg::DbgContinue* temp = msg_.continue__;
    msg_.continue__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DebuggerToBackend::unsafe_arena_set_allocated_continue_(::dse::osidbg::DbgContinue* continue_) {
  clear_msg();
  if (continue_) {
    set_has_continue_();
    msg_.continue__ = continue_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.DebuggerToBackend.continue)
}
inline ::dse::osidbg::DbgContinue* DebuggerToBackend::mutable_continue_() {
  if (!has_continue_()) {
    clear_msg();
    set_has_continue_();
    msg_.continue__ = CreateMaybeMessage< ::dse::osidbg::DbgContinue >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.DebuggerToBackend.continue)
  return msg_.continue__;
}

// .dse.osidbg.DbgGetDatabaseContents getDatabaseContents = 5;
inline bool DebuggerToBackend::has_getdatabasecontents() const {
  return msg_case() == kGetDatabaseContents;
}
inline void DebuggerToBackend::set_has_getdatabasecontents() {
  _oneof_case_[0] = kGetDatabaseContents;
}
inline void DebuggerToBackend::clear_getdatabasecontents() {
  if (has_getdatabasecontents()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.getdatabasecontents_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::DbgGetDatabaseContents& DebuggerToBackend::_internal_getdatabasecontents() const {
  return *msg_.getdatabasecontents_;
}
inline ::dse::osidbg::DbgGetDatabaseContents* DebuggerToBackend::release_getdatabasecontents() {
  // @@protoc_insertion_point(field_release:dse.osidbg.DebuggerToBackend.getDatabaseContents)
  if (has_getdatabasecontents()) {
    clear_has_msg();
      ::dse::osidbg::DbgGetDatabaseContents* temp = msg_.getdatabasecontents_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.getdatabasecontents_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::DbgGetDatabaseContents& DebuggerToBackend::getdatabasecontents() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DebuggerToBackend.getDatabaseContents)
  return has_getdatabasecontents()
      ? *msg_.getdatabasecontents_
      : *reinterpret_cast< ::dse::osidbg::DbgGetDatabaseContents*>(&::dse::osidbg::_DbgGetDatabaseContents_default_instance_);
}
inline ::dse::osidbg::DbgGetDatabaseContents* DebuggerToBackend::unsafe_arena_release_getdatabasecontents() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.DebuggerToBackend.getDatabaseContents)
  if (has_getdatabasecontents()) {
    clear_has_msg();
    ::dse::osidbg::DbgGetDatabaseContents* temp = msg_.getdatabasecontents_;
    msg_.getdatabasecontents_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DebuggerToBackend::unsafe_arena_set_allocated_getdatabasecontents(::dse::osidbg::DbgGetDatabaseContents* getdatabasecontents) {
  clear_msg();
  if (getdatabasecontents) {
    set_has_getdatabasecontents();
    msg_.getdatabasecontents_ = getdatabasecontents;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.DebuggerToBackend.getDatabaseContents)
}
inline ::dse::osidbg::DbgGetDatabaseContents* DebuggerToBackend::mutable_getdatabasecontents() {
  if (!has_getdatabasecontents()) {
    clear_msg();
    set_has_getdatabasecontents();
    msg_.getdatabasecontents_ = CreateMaybeMessage< ::dse::osidbg::DbgGetDatabaseContents >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.DebuggerToBackend.getDatabaseContents)
  return msg_.getdatabasecontents_;
}

// .dse.osidbg.DbgSyncStory syncStory = 8;
inline bool DebuggerToBackend::has_syncstory() const {
  return msg_case() == kSyncStory;
}
inline void DebuggerToBackend::set_has_syncstory() {
  _oneof_case_[0] = kSyncStory;
}
inline void DebuggerToBackend::clear_syncstory() {
  if (has_syncstory()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.syncstory_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::DbgSyncStory& DebuggerToBackend::_internal_syncstory() const {
  return *msg_.syncstory_;
}
inline ::dse::osidbg::DbgSyncStory* DebuggerToBackend::release_syncstory() {
  // @@protoc_insertion_point(field_release:dse.osidbg.DebuggerToBackend.syncStory)
  if (has_syncstory()) {
    clear_has_msg();
      ::dse::osidbg::DbgSyncStory* temp = msg_.syncstory_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.syncstory_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::DbgSyncStory& DebuggerToBackend::syncstory() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DebuggerToBackend.syncStory)
  return has_syncstory()
      ? *msg_.syncstory_
      : *reinterpret_cast< ::dse::osidbg::DbgSyncStory*>(&::dse::osidbg::_DbgSyncStory_default_instance_);
}
inline ::dse::osidbg::DbgSyncStory* DebuggerToBackend::unsafe_arena_release_syncstory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.DebuggerToBackend.syncStory)
  if (has_syncstory()) {
    clear_has_msg();
    ::dse::osidbg::DbgSyncStory* temp = msg_.syncstory_;
    msg_.syncstory_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DebuggerToBackend::unsafe_arena_set_allocated_syncstory(::dse::osidbg::DbgSyncStory* syncstory) {
  clear_msg();
  if (syncstory) {
    set_has_syncstory();
    msg_.syncstory_ = syncstory;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.DebuggerToBackend.syncStory)
}
inline ::dse::osidbg::DbgSyncStory* DebuggerToBackend::mutable_syncstory() {
  if (!has_syncstory()) {
    clear_msg();
    set_has_syncstory();
    msg_.syncstory_ = CreateMaybeMessage< ::dse::osidbg::DbgSyncStory >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.DebuggerToBackend.syncStory)
  return msg_.syncstory_;
}

// .dse.osidbg.DbgEvaluate evaluate = 9;
inline bool DebuggerToBackend::has_evaluate() const {
  return msg_case() == kEvaluate;
}
inline void DebuggerToBackend::set_has_evaluate() {
  _oneof_case_[0] = kEvaluate;
}
inline void DebuggerToBackend::clear_evaluate() {
  if (has_evaluate()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.evaluate_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::DbgEvaluate& DebuggerToBackend::_internal_evaluate() const {
  return *msg_.evaluate_;
}
inline ::dse::osidbg::DbgEvaluate* DebuggerToBackend::release_evaluate() {
  // @@protoc_insertion_point(field_release:dse.osidbg.DebuggerToBackend.evaluate)
  if (has_evaluate()) {
    clear_has_msg();
      ::dse::osidbg::DbgEvaluate* temp = msg_.evaluate_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.evaluate_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::DbgEvaluate& DebuggerToBackend::evaluate() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DebuggerToBackend.evaluate)
  return has_evaluate()
      ? *msg_.evaluate_
      : *reinterpret_cast< ::dse::osidbg::DbgEvaluate*>(&::dse::osidbg::_DbgEvaluate_default_instance_);
}
inline ::dse::osidbg::DbgEvaluate* DebuggerToBackend::unsafe_arena_release_evaluate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.DebuggerToBackend.evaluate)
  if (has_evaluate()) {
    clear_has_msg();
    ::dse::osidbg::DbgEvaluate* temp = msg_.evaluate_;
    msg_.evaluate_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DebuggerToBackend::unsafe_arena_set_allocated_evaluate(::dse::osidbg::DbgEvaluate* evaluate) {
  clear_msg();
  if (evaluate) {
    set_has_evaluate();
    msg_.evaluate_ = evaluate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.DebuggerToBackend.evaluate)
}
inline ::dse::osidbg::DbgEvaluate* DebuggerToBackend::mutable_evaluate() {
  if (!has_evaluate()) {
    clear_msg();
    set_has_evaluate();
    msg_.evaluate_ = CreateMaybeMessage< ::dse::osidbg::DbgEvaluate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.DebuggerToBackend.evaluate)
  return msg_.evaluate_;
}

// uint32 seq_no = 6;
inline void DebuggerToBackend::clear_seq_no() {
  seq_no_ = 0u;
}
inline ::google::protobuf::uint32 DebuggerToBackend::seq_no() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DebuggerToBackend.seq_no)
  return seq_no_;
}
inline void DebuggerToBackend::set_seq_no(::google::protobuf::uint32 value) {
  
  seq_no_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.DebuggerToBackend.seq_no)
}

// uint32 reply_seq_no = 7;
inline void DebuggerToBackend::clear_reply_seq_no() {
  reply_seq_no_ = 0u;
}
inline ::google::protobuf::uint32 DebuggerToBackend::reply_seq_no() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.DebuggerToBackend.reply_seq_no)
  return reply_seq_no_;
}
inline void DebuggerToBackend::set_reply_seq_no(::google::protobuf::uint32 value) {
  
  reply_seq_no_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.DebuggerToBackend.reply_seq_no)
}

inline bool DebuggerToBackend::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void DebuggerToBackend::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline DebuggerToBackend::MsgCase DebuggerToBackend::msg_case() const {
  return DebuggerToBackend::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BackendToDebugger

// .dse.osidbg.BkVersionInfoResponse versionInfo = 1;
inline bool BackendToDebugger::has_versioninfo() const {
  return msg_case() == kVersionInfo;
}
inline void BackendToDebugger::set_has_versioninfo() {
  _oneof_case_[0] = kVersionInfo;
}
inline void BackendToDebugger::clear_versioninfo() {
  if (has_versioninfo()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.versioninfo_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::BkVersionInfoResponse& BackendToDebugger::_internal_versioninfo() const {
  return *msg_.versioninfo_;
}
inline ::dse::osidbg::BkVersionInfoResponse* BackendToDebugger::release_versioninfo() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BackendToDebugger.versionInfo)
  if (has_versioninfo()) {
    clear_has_msg();
      ::dse::osidbg::BkVersionInfoResponse* temp = msg_.versioninfo_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.versioninfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::BkVersionInfoResponse& BackendToDebugger::versioninfo() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.versionInfo)
  return has_versioninfo()
      ? *msg_.versioninfo_
      : *reinterpret_cast< ::dse::osidbg::BkVersionInfoResponse*>(&::dse::osidbg::_BkVersionInfoResponse_default_instance_);
}
inline ::dse::osidbg::BkVersionInfoResponse* BackendToDebugger::unsafe_arena_release_versioninfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BackendToDebugger.versionInfo)
  if (has_versioninfo()) {
    clear_has_msg();
    ::dse::osidbg::BkVersionInfoResponse* temp = msg_.versioninfo_;
    msg_.versioninfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_versioninfo(::dse::osidbg::BkVersionInfoResponse* versioninfo) {
  clear_msg();
  if (versioninfo) {
    set_has_versioninfo();
    msg_.versioninfo_ = versioninfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.BackendToDebugger.versionInfo)
}
inline ::dse::osidbg::BkVersionInfoResponse* BackendToDebugger::mutable_versioninfo() {
  if (!has_versioninfo()) {
    clear_msg();
    set_has_versioninfo();
    msg_.versioninfo_ = CreateMaybeMessage< ::dse::osidbg::BkVersionInfoResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BackendToDebugger.versionInfo)
  return msg_.versioninfo_;
}

// .dse.osidbg.BkBreakpointTriggered breakpointTriggered = 2;
inline bool BackendToDebugger::has_breakpointtriggered() const {
  return msg_case() == kBreakpointTriggered;
}
inline void BackendToDebugger::set_has_breakpointtriggered() {
  _oneof_case_[0] = kBreakpointTriggered;
}
inline void BackendToDebugger::clear_breakpointtriggered() {
  if (has_breakpointtriggered()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.breakpointtriggered_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::BkBreakpointTriggered& BackendToDebugger::_internal_breakpointtriggered() const {
  return *msg_.breakpointtriggered_;
}
inline ::dse::osidbg::BkBreakpointTriggered* BackendToDebugger::release_breakpointtriggered() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BackendToDebugger.breakpointTriggered)
  if (has_breakpointtriggered()) {
    clear_has_msg();
      ::dse::osidbg::BkBreakpointTriggered* temp = msg_.breakpointtriggered_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.breakpointtriggered_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::BkBreakpointTriggered& BackendToDebugger::breakpointtriggered() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.breakpointTriggered)
  return has_breakpointtriggered()
      ? *msg_.breakpointtriggered_
      : *reinterpret_cast< ::dse::osidbg::BkBreakpointTriggered*>(&::dse::osidbg::_BkBreakpointTriggered_default_instance_);
}
inline ::dse::osidbg::BkBreakpointTriggered* BackendToDebugger::unsafe_arena_release_breakpointtriggered() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BackendToDebugger.breakpointTriggered)
  if (has_breakpointtriggered()) {
    clear_has_msg();
    ::dse::osidbg::BkBreakpointTriggered* temp = msg_.breakpointtriggered_;
    msg_.breakpointtriggered_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_breakpointtriggered(::dse::osidbg::BkBreakpointTriggered* breakpointtriggered) {
  clear_msg();
  if (breakpointtriggered) {
    set_has_breakpointtriggered();
    msg_.breakpointtriggered_ = breakpointtriggered;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.BackendToDebugger.breakpointTriggered)
}
inline ::dse::osidbg::BkBreakpointTriggered* BackendToDebugger::mutable_breakpointtriggered() {
  if (!has_breakpointtriggered()) {
    clear_msg();
    set_has_breakpointtriggered();
    msg_.breakpointtriggered_ = CreateMaybeMessage< ::dse::osidbg::BkBreakpointTriggered >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BackendToDebugger.breakpointTriggered)
  return msg_.breakpointtriggered_;
}

// .dse.osidbg.BkResult results = 4;
inline bool BackendToDebugger::has_results() const {
  return msg_case() == kResults;
}
inline void BackendToDebugger::set_has_results() {
  _oneof_case_[0] = kResults;
}
inline void BackendToDebugger::clear_results() {
  if (has_results()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.results_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::BkResult& BackendToDebugger::_internal_results() const {
  return *msg_.results_;
}
inline ::dse::osidbg::BkResult* BackendToDebugger::release_results() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BackendToDebugger.results)
  if (has_results()) {
    clear_has_msg();
      ::dse::osidbg::BkResult* temp = msg_.results_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.results_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::BkResult& BackendToDebugger::results() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.results)
  return has_results()
      ? *msg_.results_
      : *reinterpret_cast< ::dse::osidbg::BkResult*>(&::dse::osidbg::_BkResult_default_instance_);
}
inline ::dse::osidbg::BkResult* BackendToDebugger::unsafe_arena_release_results() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BackendToDebugger.results)
  if (has_results()) {
    clear_has_msg();
    ::dse::osidbg::BkResult* temp = msg_.results_;
    msg_.results_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_results(::dse::osidbg::BkResult* results) {
  clear_msg();
  if (results) {
    set_has_results();
    msg_.results_ = results;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.BackendToDebugger.results)
}
inline ::dse::osidbg::BkResult* BackendToDebugger::mutable_results() {
  if (!has_results()) {
    clear_msg();
    set_has_results();
    msg_.results_ = CreateMaybeMessage< ::dse::osidbg::BkResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BackendToDebugger.results)
  return msg_.results_;
}

// .dse.osidbg.BkStoryLoaded storyLoaded = 5;
inline bool BackendToDebugger::has_storyloaded() const {
  return msg_case() == kStoryLoaded;
}
inline void BackendToDebugger::set_has_storyloaded() {
  _oneof_case_[0] = kStoryLoaded;
}
inline void BackendToDebugger::clear_storyloaded() {
  if (has_storyloaded()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.storyloaded_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::BkStoryLoaded& BackendToDebugger::_internal_storyloaded() const {
  return *msg_.storyloaded_;
}
inline ::dse::osidbg::BkStoryLoaded* BackendToDebugger::release_storyloaded() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BackendToDebugger.storyLoaded)
  if (has_storyloaded()) {
    clear_has_msg();
      ::dse::osidbg::BkStoryLoaded* temp = msg_.storyloaded_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.storyloaded_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::BkStoryLoaded& BackendToDebugger::storyloaded() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.storyLoaded)
  return has_storyloaded()
      ? *msg_.storyloaded_
      : *reinterpret_cast< ::dse::osidbg::BkStoryLoaded*>(&::dse::osidbg::_BkStoryLoaded_default_instance_);
}
inline ::dse::osidbg::BkStoryLoaded* BackendToDebugger::unsafe_arena_release_storyloaded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BackendToDebugger.storyLoaded)
  if (has_storyloaded()) {
    clear_has_msg();
    ::dse::osidbg::BkStoryLoaded* temp = msg_.storyloaded_;
    msg_.storyloaded_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_storyloaded(::dse::osidbg::BkStoryLoaded* storyloaded) {
  clear_msg();
  if (storyloaded) {
    set_has_storyloaded();
    msg_.storyloaded_ = storyloaded;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.BackendToDebugger.storyLoaded)
}
inline ::dse::osidbg::BkStoryLoaded* BackendToDebugger::mutable_storyloaded() {
  if (!has_storyloaded()) {
    clear_msg();
    set_has_storyloaded();
    msg_.storyloaded_ = CreateMaybeMessage< ::dse::osidbg::BkStoryLoaded >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BackendToDebugger.storyLoaded)
  return msg_.storyloaded_;
}

// .dse.osidbg.BkDebugSessionEnded debugSessionEnded = 6;
inline bool BackendToDebugger::has_debugsessionended() const {
  return msg_case() == kDebugSessionEnded;
}
inline void BackendToDebugger::set_has_debugsessionended() {
  _oneof_case_[0] = kDebugSessionEnded;
}
inline void BackendToDebugger::clear_debugsessionended() {
  if (has_debugsessionended()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.debugsessionended_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::BkDebugSessionEnded& BackendToDebugger::_internal_debugsessionended() const {
  return *msg_.debugsessionended_;
}
inline ::dse::osidbg::BkDebugSessionEnded* BackendToDebugger::release_debugsessionended() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BackendToDebugger.debugSessionEnded)
  if (has_debugsessionended()) {
    clear_has_msg();
      ::dse::osidbg::BkDebugSessionEnded* temp = msg_.debugsessionended_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.debugsessionended_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::BkDebugSessionEnded& BackendToDebugger::debugsessionended() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.debugSessionEnded)
  return has_debugsessionended()
      ? *msg_.debugsessionended_
      : *reinterpret_cast< ::dse::osidbg::BkDebugSessionEnded*>(&::dse::osidbg::_BkDebugSessionEnded_default_instance_);
}
inline ::dse::osidbg::BkDebugSessionEnded* BackendToDebugger::unsafe_arena_release_debugsessionended() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BackendToDebugger.debugSessionEnded)
  if (has_debugsessionended()) {
    clear_has_msg();
    ::dse::osidbg::BkDebugSessionEnded* temp = msg_.debugsessionended_;
    msg_.debugsessionended_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_debugsessionended(::dse::osidbg::BkDebugSessionEnded* debugsessionended) {
  clear_msg();
  if (debugsessionended) {
    set_has_debugsessionended();
    msg_.debugsessionended_ = debugsessionended;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.BackendToDebugger.debugSessionEnded)
}
inline ::dse::osidbg::BkDebugSessionEnded* BackendToDebugger::mutable_debugsessionended() {
  if (!has_debugsessionended()) {
    clear_msg();
    set_has_debugsessionended();
    msg_.debugsessionended_ = CreateMaybeMessage< ::dse::osidbg::BkDebugSessionEnded >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BackendToDebugger.debugSessionEnded)
  return msg_.debugsessionended_;
}

// .dse.osidbg.BkGlobalBreakpointTriggered globalBreakpointTriggered = 7;
inline bool BackendToDebugger::has_globalbreakpointtriggered() const {
  return msg_case() == kGlobalBreakpointTriggered;
}
inline void BackendToDebugger::set_has_globalbreakpointtriggered() {
  _oneof_case_[0] = kGlobalBreakpointTriggered;
}
inline void BackendToDebugger::clear_globalbreakpointtriggered() {
  if (has_globalbreakpointtriggered()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.globalbreakpointtriggered_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::BkGlobalBreakpointTriggered& BackendToDebugger::_internal_globalbreakpointtriggered() const {
  return *msg_.globalbreakpointtriggered_;
}
inline ::dse::osidbg::BkGlobalBreakpointTriggered* BackendToDebugger::release_globalbreakpointtriggered() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BackendToDebugger.globalBreakpointTriggered)
  if (has_globalbreakpointtriggered()) {
    clear_has_msg();
      ::dse::osidbg::BkGlobalBreakpointTriggered* temp = msg_.globalbreakpointtriggered_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.globalbreakpointtriggered_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::BkGlobalBreakpointTriggered& BackendToDebugger::globalbreakpointtriggered() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.globalBreakpointTriggered)
  return has_globalbreakpointtriggered()
      ? *msg_.globalbreakpointtriggered_
      : *reinterpret_cast< ::dse::osidbg::BkGlobalBreakpointTriggered*>(&::dse::osidbg::_BkGlobalBreakpointTriggered_default_instance_);
}
inline ::dse::osidbg::BkGlobalBreakpointTriggered* BackendToDebugger::unsafe_arena_release_globalbreakpointtriggered() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BackendToDebugger.globalBreakpointTriggered)
  if (has_globalbreakpointtriggered()) {
    clear_has_msg();
    ::dse::osidbg::BkGlobalBreakpointTriggered* temp = msg_.globalbreakpointtriggered_;
    msg_.globalbreakpointtriggered_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_globalbreakpointtriggered(::dse::osidbg::BkGlobalBreakpointTriggered* globalbreakpointtriggered) {
  clear_msg();
  if (globalbreakpointtriggered) {
    set_has_globalbreakpointtriggered();
    msg_.globalbreakpointtriggered_ = globalbreakpointtriggered;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.BackendToDebugger.globalBreakpointTriggered)
}
inline ::dse::osidbg::BkGlobalBreakpointTriggered* BackendToDebugger::mutable_globalbreakpointtriggered() {
  if (!has_globalbreakpointtriggered()) {
    clear_msg();
    set_has_globalbreakpointtriggered();
    msg_.globalbreakpointtriggered_ = CreateMaybeMessage< ::dse::osidbg::BkGlobalBreakpointTriggered >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BackendToDebugger.globalBreakpointTriggered)
  return msg_.globalbreakpointtriggered_;
}

// .dse.osidbg.BkSyncStoryData syncStoryData = 10;
inline bool BackendToDebugger::has_syncstorydata() const {
  return msg_case() == kSyncStoryData;
}
inline void BackendToDebugger::set_has_syncstorydata() {
  _oneof_case_[0] = kSyncStoryData;
}
inline void BackendToDebugger::clear_syncstorydata() {
  if (has_syncstorydata()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.syncstorydata_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::BkSyncStoryData& BackendToDebugger::_internal_syncstorydata() const {
  return *msg_.syncstorydata_;
}
inline ::dse::osidbg::BkSyncStoryData* BackendToDebugger::release_syncstorydata() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BackendToDebugger.syncStoryData)
  if (has_syncstorydata()) {
    clear_has_msg();
      ::dse::osidbg::BkSyncStoryData* temp = msg_.syncstorydata_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.syncstorydata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::BkSyncStoryData& BackendToDebugger::syncstorydata() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.syncStoryData)
  return has_syncstorydata()
      ? *msg_.syncstorydata_
      : *reinterpret_cast< ::dse::osidbg::BkSyncStoryData*>(&::dse::osidbg::_BkSyncStoryData_default_instance_);
}
inline ::dse::osidbg::BkSyncStoryData* BackendToDebugger::unsafe_arena_release_syncstorydata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BackendToDebugger.syncStoryData)
  if (has_syncstorydata()) {
    clear_has_msg();
    ::dse::osidbg::BkSyncStoryData* temp = msg_.syncstorydata_;
    msg_.syncstorydata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_syncstorydata(::dse::osidbg::BkSyncStoryData* syncstorydata) {
  clear_msg();
  if (syncstorydata) {
    set_has_syncstorydata();
    msg_.syncstorydata_ = syncstorydata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.BackendToDebugger.syncStoryData)
}
inline ::dse::osidbg::BkSyncStoryData* BackendToDebugger::mutable_syncstorydata() {
  if (!has_syncstorydata()) {
    clear_msg();
    set_has_syncstorydata();
    msg_.syncstorydata_ = CreateMaybeMessage< ::dse::osidbg::BkSyncStoryData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BackendToDebugger.syncStoryData)
  return msg_.syncstorydata_;
}

// .dse.osidbg.BkSyncStoryFinished syncStoryFinished = 11;
inline bool BackendToDebugger::has_syncstoryfinished() const {
  return msg_case() == kSyncStoryFinished;
}
inline void BackendToDebugger::set_has_syncstoryfinished() {
  _oneof_case_[0] = kSyncStoryFinished;
}
inline void BackendToDebugger::clear_syncstoryfinished() {
  if (has_syncstoryfinished()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.syncstoryfinished_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::BkSyncStoryFinished& BackendToDebugger::_internal_syncstoryfinished() const {
  return *msg_.syncstoryfinished_;
}
inline ::dse::osidbg::BkSyncStoryFinished* BackendToDebugger::release_syncstoryfinished() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BackendToDebugger.syncStoryFinished)
  if (has_syncstoryfinished()) {
    clear_has_msg();
      ::dse::osidbg::BkSyncStoryFinished* temp = msg_.syncstoryfinished_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.syncstoryfinished_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::BkSyncStoryFinished& BackendToDebugger::syncstoryfinished() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.syncStoryFinished)
  return has_syncstoryfinished()
      ? *msg_.syncstoryfinished_
      : *reinterpret_cast< ::dse::osidbg::BkSyncStoryFinished*>(&::dse::osidbg::_BkSyncStoryFinished_default_instance_);
}
inline ::dse::osidbg::BkSyncStoryFinished* BackendToDebugger::unsafe_arena_release_syncstoryfinished() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BackendToDebugger.syncStoryFinished)
  if (has_syncstoryfinished()) {
    clear_has_msg();
    ::dse::osidbg::BkSyncStoryFinished* temp = msg_.syncstoryfinished_;
    msg_.syncstoryfinished_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_syncstoryfinished(::dse::osidbg::BkSyncStoryFinished* syncstoryfinished) {
  clear_msg();
  if (syncstoryfinished) {
    set_has_syncstoryfinished();
    msg_.syncstoryfinished_ = syncstoryfinished;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.BackendToDebugger.syncStoryFinished)
}
inline ::dse::osidbg::BkSyncStoryFinished* BackendToDebugger::mutable_syncstoryfinished() {
  if (!has_syncstoryfinished()) {
    clear_msg();
    set_has_syncstoryfinished();
    msg_.syncstoryfinished_ = CreateMaybeMessage< ::dse::osidbg::BkSyncStoryFinished >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BackendToDebugger.syncStoryFinished)
  return msg_.syncstoryfinished_;
}

// .dse.osidbg.BkDebugOutput debugOutput = 12;
inline bool BackendToDebugger::has_debugoutput() const {
  return msg_case() == kDebugOutput;
}
inline void BackendToDebugger::set_has_debugoutput() {
  _oneof_case_[0] = kDebugOutput;
}
inline void BackendToDebugger::clear_debugoutput() {
  if (has_debugoutput()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.debugoutput_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::BkDebugOutput& BackendToDebugger::_internal_debugoutput() const {
  return *msg_.debugoutput_;
}
inline ::dse::osidbg::BkDebugOutput* BackendToDebugger::release_debugoutput() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BackendToDebugger.debugOutput)
  if (has_debugoutput()) {
    clear_has_msg();
      ::dse::osidbg::BkDebugOutput* temp = msg_.debugoutput_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.debugoutput_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::BkDebugOutput& BackendToDebugger::debugoutput() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.debugOutput)
  return has_debugoutput()
      ? *msg_.debugoutput_
      : *reinterpret_cast< ::dse::osidbg::BkDebugOutput*>(&::dse::osidbg::_BkDebugOutput_default_instance_);
}
inline ::dse::osidbg::BkDebugOutput* BackendToDebugger::unsafe_arena_release_debugoutput() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BackendToDebugger.debugOutput)
  if (has_debugoutput()) {
    clear_has_msg();
    ::dse::osidbg::BkDebugOutput* temp = msg_.debugoutput_;
    msg_.debugoutput_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_debugoutput(::dse::osidbg::BkDebugOutput* debugoutput) {
  clear_msg();
  if (debugoutput) {
    set_has_debugoutput();
    msg_.debugoutput_ = debugoutput;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.BackendToDebugger.debugOutput)
}
inline ::dse::osidbg::BkDebugOutput* BackendToDebugger::mutable_debugoutput() {
  if (!has_debugoutput()) {
    clear_msg();
    set_has_debugoutput();
    msg_.debugoutput_ = CreateMaybeMessage< ::dse::osidbg::BkDebugOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BackendToDebugger.debugOutput)
  return msg_.debugoutput_;
}

// .dse.osidbg.BkBeginDatabaseContents beginDatabaseContents = 13;
inline bool BackendToDebugger::has_begindatabasecontents() const {
  return msg_case() == kBeginDatabaseContents;
}
inline void BackendToDebugger::set_has_begindatabasecontents() {
  _oneof_case_[0] = kBeginDatabaseContents;
}
inline void BackendToDebugger::clear_begindatabasecontents() {
  if (has_begindatabasecontents()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.begindatabasecontents_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::BkBeginDatabaseContents& BackendToDebugger::_internal_begindatabasecontents() const {
  return *msg_.begindatabasecontents_;
}
inline ::dse::osidbg::BkBeginDatabaseContents* BackendToDebugger::release_begindatabasecontents() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BackendToDebugger.beginDatabaseContents)
  if (has_begindatabasecontents()) {
    clear_has_msg();
      ::dse::osidbg::BkBeginDatabaseContents* temp = msg_.begindatabasecontents_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.begindatabasecontents_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::BkBeginDatabaseContents& BackendToDebugger::begindatabasecontents() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.beginDatabaseContents)
  return has_begindatabasecontents()
      ? *msg_.begindatabasecontents_
      : *reinterpret_cast< ::dse::osidbg::BkBeginDatabaseContents*>(&::dse::osidbg::_BkBeginDatabaseContents_default_instance_);
}
inline ::dse::osidbg::BkBeginDatabaseContents* BackendToDebugger::unsafe_arena_release_begindatabasecontents() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BackendToDebugger.beginDatabaseContents)
  if (has_begindatabasecontents()) {
    clear_has_msg();
    ::dse::osidbg::BkBeginDatabaseContents* temp = msg_.begindatabasecontents_;
    msg_.begindatabasecontents_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_begindatabasecontents(::dse::osidbg::BkBeginDatabaseContents* begindatabasecontents) {
  clear_msg();
  if (begindatabasecontents) {
    set_has_begindatabasecontents();
    msg_.begindatabasecontents_ = begindatabasecontents;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.BackendToDebugger.beginDatabaseContents)
}
inline ::dse::osidbg::BkBeginDatabaseContents* BackendToDebugger::mutable_begindatabasecontents() {
  if (!has_begindatabasecontents()) {
    clear_msg();
    set_has_begindatabasecontents();
    msg_.begindatabasecontents_ = CreateMaybeMessage< ::dse::osidbg::BkBeginDatabaseContents >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BackendToDebugger.beginDatabaseContents)
  return msg_.begindatabasecontents_;
}

// .dse.osidbg.BkDatabaseRow databaseRow = 14;
inline bool BackendToDebugger::has_databaserow() const {
  return msg_case() == kDatabaseRow;
}
inline void BackendToDebugger::set_has_databaserow() {
  _oneof_case_[0] = kDatabaseRow;
}
inline void BackendToDebugger::clear_databaserow() {
  if (has_databaserow()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.databaserow_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::BkDatabaseRow& BackendToDebugger::_internal_databaserow() const {
  return *msg_.databaserow_;
}
inline ::dse::osidbg::BkDatabaseRow* BackendToDebugger::release_databaserow() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BackendToDebugger.databaseRow)
  if (has_databaserow()) {
    clear_has_msg();
      ::dse::osidbg::BkDatabaseRow* temp = msg_.databaserow_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.databaserow_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::BkDatabaseRow& BackendToDebugger::databaserow() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.databaseRow)
  return has_databaserow()
      ? *msg_.databaserow_
      : *reinterpret_cast< ::dse::osidbg::BkDatabaseRow*>(&::dse::osidbg::_BkDatabaseRow_default_instance_);
}
inline ::dse::osidbg::BkDatabaseRow* BackendToDebugger::unsafe_arena_release_databaserow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BackendToDebugger.databaseRow)
  if (has_databaserow()) {
    clear_has_msg();
    ::dse::osidbg::BkDatabaseRow* temp = msg_.databaserow_;
    msg_.databaserow_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_databaserow(::dse::osidbg::BkDatabaseRow* databaserow) {
  clear_msg();
  if (databaserow) {
    set_has_databaserow();
    msg_.databaserow_ = databaserow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.BackendToDebugger.databaseRow)
}
inline ::dse::osidbg::BkDatabaseRow* BackendToDebugger::mutable_databaserow() {
  if (!has_databaserow()) {
    clear_msg();
    set_has_databaserow();
    msg_.databaserow_ = CreateMaybeMessage< ::dse::osidbg::BkDatabaseRow >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BackendToDebugger.databaseRow)
  return msg_.databaserow_;
}

// .dse.osidbg.BkEndDatabaseContents endDatabaseContents = 15;
inline bool BackendToDebugger::has_enddatabasecontents() const {
  return msg_case() == kEndDatabaseContents;
}
inline void BackendToDebugger::set_has_enddatabasecontents() {
  _oneof_case_[0] = kEndDatabaseContents;
}
inline void BackendToDebugger::clear_enddatabasecontents() {
  if (has_enddatabasecontents()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.enddatabasecontents_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::BkEndDatabaseContents& BackendToDebugger::_internal_enddatabasecontents() const {
  return *msg_.enddatabasecontents_;
}
inline ::dse::osidbg::BkEndDatabaseContents* BackendToDebugger::release_enddatabasecontents() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BackendToDebugger.endDatabaseContents)
  if (has_enddatabasecontents()) {
    clear_has_msg();
      ::dse::osidbg::BkEndDatabaseContents* temp = msg_.enddatabasecontents_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.enddatabasecontents_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::BkEndDatabaseContents& BackendToDebugger::enddatabasecontents() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.endDatabaseContents)
  return has_enddatabasecontents()
      ? *msg_.enddatabasecontents_
      : *reinterpret_cast< ::dse::osidbg::BkEndDatabaseContents*>(&::dse::osidbg::_BkEndDatabaseContents_default_instance_);
}
inline ::dse::osidbg::BkEndDatabaseContents* BackendToDebugger::unsafe_arena_release_enddatabasecontents() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BackendToDebugger.endDatabaseContents)
  if (has_enddatabasecontents()) {
    clear_has_msg();
    ::dse::osidbg::BkEndDatabaseContents* temp = msg_.enddatabasecontents_;
    msg_.enddatabasecontents_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_enddatabasecontents(::dse::osidbg::BkEndDatabaseContents* enddatabasecontents) {
  clear_msg();
  if (enddatabasecontents) {
    set_has_enddatabasecontents();
    msg_.enddatabasecontents_ = enddatabasecontents;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.BackendToDebugger.endDatabaseContents)
}
inline ::dse::osidbg::BkEndDatabaseContents* BackendToDebugger::mutable_enddatabasecontents() {
  if (!has_enddatabasecontents()) {
    clear_msg();
    set_has_enddatabasecontents();
    msg_.enddatabasecontents_ = CreateMaybeMessage< ::dse::osidbg::BkEndDatabaseContents >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BackendToDebugger.endDatabaseContents)
  return msg_.enddatabasecontents_;
}

// .dse.osidbg.BkEvaluateRow evaluateRow = 16;
inline bool BackendToDebugger::has_evaluaterow() const {
  return msg_case() == kEvaluateRow;
}
inline void BackendToDebugger::set_has_evaluaterow() {
  _oneof_case_[0] = kEvaluateRow;
}
inline void BackendToDebugger::clear_evaluaterow() {
  if (has_evaluaterow()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.evaluaterow_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::BkEvaluateRow& BackendToDebugger::_internal_evaluaterow() const {
  return *msg_.evaluaterow_;
}
inline ::dse::osidbg::BkEvaluateRow* BackendToDebugger::release_evaluaterow() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BackendToDebugger.evaluateRow)
  if (has_evaluaterow()) {
    clear_has_msg();
      ::dse::osidbg::BkEvaluateRow* temp = msg_.evaluaterow_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.evaluaterow_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::BkEvaluateRow& BackendToDebugger::evaluaterow() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.evaluateRow)
  return has_evaluaterow()
      ? *msg_.evaluaterow_
      : *reinterpret_cast< ::dse::osidbg::BkEvaluateRow*>(&::dse::osidbg::_BkEvaluateRow_default_instance_);
}
inline ::dse::osidbg::BkEvaluateRow* BackendToDebugger::unsafe_arena_release_evaluaterow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BackendToDebugger.evaluateRow)
  if (has_evaluaterow()) {
    clear_has_msg();
    ::dse::osidbg::BkEvaluateRow* temp = msg_.evaluaterow_;
    msg_.evaluaterow_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_evaluaterow(::dse::osidbg::BkEvaluateRow* evaluaterow) {
  clear_msg();
  if (evaluaterow) {
    set_has_evaluaterow();
    msg_.evaluaterow_ = evaluaterow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.BackendToDebugger.evaluateRow)
}
inline ::dse::osidbg::BkEvaluateRow* BackendToDebugger::mutable_evaluaterow() {
  if (!has_evaluaterow()) {
    clear_msg();
    set_has_evaluaterow();
    msg_.evaluaterow_ = CreateMaybeMessage< ::dse::osidbg::BkEvaluateRow >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BackendToDebugger.evaluateRow)
  return msg_.evaluaterow_;
}

// .dse.osidbg.BkEvaluateFinished evaluateFinished = 17;
inline bool BackendToDebugger::has_evaluatefinished() const {
  return msg_case() == kEvaluateFinished;
}
inline void BackendToDebugger::set_has_evaluatefinished() {
  _oneof_case_[0] = kEvaluateFinished;
}
inline void BackendToDebugger::clear_evaluatefinished() {
  if (has_evaluatefinished()) {
    if (GetArenaNoVirtual() == NULL) {
      delete msg_.evaluatefinished_;
    }
    clear_has_msg();
  }
}
inline const ::dse::osidbg::BkEvaluateFinished& BackendToDebugger::_internal_evaluatefinished() const {
  return *msg_.evaluatefinished_;
}
inline ::dse::osidbg::BkEvaluateFinished* BackendToDebugger::release_evaluatefinished() {
  // @@protoc_insertion_point(field_release:dse.osidbg.BackendToDebugger.evaluateFinished)
  if (has_evaluatefinished()) {
    clear_has_msg();
      ::dse::osidbg::BkEvaluateFinished* temp = msg_.evaluatefinished_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    msg_.evaluatefinished_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dse::osidbg::BkEvaluateFinished& BackendToDebugger::evaluatefinished() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.evaluateFinished)
  return has_evaluatefinished()
      ? *msg_.evaluatefinished_
      : *reinterpret_cast< ::dse::osidbg::BkEvaluateFinished*>(&::dse::osidbg::_BkEvaluateFinished_default_instance_);
}
inline ::dse::osidbg::BkEvaluateFinished* BackendToDebugger::unsafe_arena_release_evaluatefinished() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dse.osidbg.BackendToDebugger.evaluateFinished)
  if (has_evaluatefinished()) {
    clear_has_msg();
    ::dse::osidbg::BkEvaluateFinished* temp = msg_.evaluatefinished_;
    msg_.evaluatefinished_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BackendToDebugger::unsafe_arena_set_allocated_evaluatefinished(::dse::osidbg::BkEvaluateFinished* evaluatefinished) {
  clear_msg();
  if (evaluatefinished) {
    set_has_evaluatefinished();
    msg_.evaluatefinished_ = evaluatefinished;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dse.osidbg.BackendToDebugger.evaluateFinished)
}
inline ::dse::osidbg::BkEvaluateFinished* BackendToDebugger::mutable_evaluatefinished() {
  if (!has_evaluatefinished()) {
    clear_msg();
    set_has_evaluatefinished();
    msg_.evaluatefinished_ = CreateMaybeMessage< ::dse::osidbg::BkEvaluateFinished >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dse.osidbg.BackendToDebugger.evaluateFinished)
  return msg_.evaluatefinished_;
}

// uint32 seq_no = 8;
inline void BackendToDebugger::clear_seq_no() {
  seq_no_ = 0u;
}
inline ::google::protobuf::uint32 BackendToDebugger::seq_no() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.seq_no)
  return seq_no_;
}
inline void BackendToDebugger::set_seq_no(::google::protobuf::uint32 value) {
  
  seq_no_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.BackendToDebugger.seq_no)
}

// uint32 reply_seq_no = 9;
inline void BackendToDebugger::clear_reply_seq_no() {
  reply_seq_no_ = 0u;
}
inline ::google::protobuf::uint32 BackendToDebugger::reply_seq_no() const {
  // @@protoc_insertion_point(field_get:dse.osidbg.BackendToDebugger.reply_seq_no)
  return reply_seq_no_;
}
inline void BackendToDebugger::set_reply_seq_no(::google::protobuf::uint32 value) {
  
  reply_seq_no_ = value;
  // @@protoc_insertion_point(field_set:dse.osidbg.BackendToDebugger.reply_seq_no)
}

inline bool BackendToDebugger::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void BackendToDebugger::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline BackendToDebugger::MsgCase BackendToDebugger::msg_case() const {
  return BackendToDebugger::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osidbg
}  // namespace dse

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dse::osidbg::MsgFrame_FrameType> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::osidbg::DbgSetGlobalBreakpoints_GlobalBreakpointType> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::osidbg::MsgBreakpoint_BreakpointType> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::osidbg::BkBreakpointTriggered_QueryStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::osidbg::BkGlobalBreakpointTriggered_Reason> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::osidbg::DbgContinue_Action> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::osidbg::DbgContinue_Flags> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::osidbg::DbgEvaluate_EvalType> : ::std::true_type {};
template <> struct is_proto_enum< ::dse::osidbg::StatusCode> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_osidebug_2eproto
