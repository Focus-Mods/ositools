BEGIN_CLS(esv::ShootProjectileHelperHitObject)
P(HitInterpolation)
P(Target)
P(Position)
END_CLS()


BEGIN_CLS(esv::ShootProjectileHelper)
P(SkillId)
P(Caster)
P(Source)
P(Target)
P(StartPosition)
P(EndPosition)
P_REF(DamageList)
P(Random)
P(CasterLevel)
P_REF(HitObject)
P(IsTrap)
P(UnknownFlag1)
P(CleanseStatuses)
P(StatusClearChance)
P(IsFromItem)
P(IsStealthed)
P(IgnoreObjects)
END_CLS()


BEGIN_CLS(esv::DefaultProjectileHit)
P(CasterHandle)
P(Level)
P(IsFromItem)
P(SkillId)
END_CLS()


BEGIN_CLS(esv::Projectile)
INHERIT(IEoCServerObject)
P_RO(CasterHandle)
P_RO(SourceHandle)
P_RO(TargetObjectHandle)
P_RO(HitObjectHandle)
P(SourcePosition)
P(TargetPosition)
P(DamageType)
P(DamageSourceType)
P(LifeTime)
P(HitInterpolation)
P(ExplodeRadius0)
P(ExplodeRadius1)
P_REF(DamageList)
P(DeathType)
P(SkillId)
P_REF(PropertyList)
P_RO(BoostConditions)
P_RO(WeaponHandle)
P_RO(MovingEffectHandle)
P(SpawnEffect)
P(SpawnFXOverridesImpactFX)
P_RO(EffectHandle)
P(RequestDelete)
P_RO(Launched)
P(IsTrap)
P(UseCharacterStats)
P(ReduceDurability)
P(AlwaysDamage)
P(ForceTarget)
P(IsFromItem)
P(DivideDamage)
P(IgnoreRoof)
P(CanDeflect)
P(IgnoreObjects)
P_REF(OnHitAction)
P(CleanseStatuses)
P(StatusClearChance)
P_RO(Position)
P_RO(PrevPosition)
P_RO(Velocity)
P_RO(Scale)
P_RO(CurrentLevel)
PN_REF(RootTemplate, ProjectileTemplate)

#if defined(GENERATING_PROPMAP)
// v55 compatibility
pm.AddProperty("Handle",
	[](lua_State* L, LifetimeHolder const& lifetime, esv::Projectile* obj, std::size_t offset, uint64_t flag) {
		push(L, obj->Base.Component.Handle);
		return true;
	}
);
#endif
END_CLS()
